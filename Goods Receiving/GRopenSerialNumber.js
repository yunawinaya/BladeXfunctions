(async () => {
  try {
    // Input validation
    const args = arguments[0];
    if (!args) {
      console.error("No arguments provided");
      return;
    }

    const { row: lineItemData, rowIndex } = args;

    // Validate required data
    if (!lineItemData) {
      console.error("Line item data is missing");
      return;
    }

    if (rowIndex === undefined || rowIndex === null) {
      console.error("Row index is missing");
      return;
    }

    console.log("Processing line item data:", lineItemData);

    // Extract and validate required fields
    const materialId = lineItemData.item_id;
    const baseQty = lineItemData.base_received_qty;
    const baseUOMid = lineItemData.base_received_qty_uom;
    const serialNumberDataRaw = lineItemData.serial_number_data;

    // Validate required fields
    if (!materialId) {
      console.error("Material ID is missing");
      return;
    }

    if (baseQty === undefined || baseQty === null || baseQty < 0) {
      console.error("Invalid base quantity:", baseQty);
      return;
    }

    if (!baseUOMid) {
      console.warn("Base UOM ID is missing, using empty string");
    }

    // Parse serial number data with error handling
    let serialNumberData = [];
    if (serialNumberDataRaw) {
      try {
        const parsed = JSON.parse(serialNumberDataRaw);
        serialNumberData = Array.isArray(parsed) ? parsed : [];
      } catch (parseError) {
        console.error("Error parsing serial number data:", parseError);
        console.warn("Using empty array for serial number data");
      }
    }

    // Validate database connection
    if (typeof db === "undefined" || !db.collection) {
      console.error("Database connection is not available");
      return;
    }

    // Fetch item data with improved error handling
    try {
      const response = await db
        .collection("Item")
        .where({
          id: materialId,
        })
        .get();

      console.log("Database response:", response);

      // Validate response structure
      if (!response || !response.data || !Array.isArray(response.data)) {
        console.error("Invalid response structure from database");
        return;
      }

      if (response.data.length === 0) {
        console.error(`No item found with ID: ${materialId}`);
        return;
      }

      const itemData = response.data[0];

      // Validate item data structure
      if (!itemData) {
        console.error("Item data is null or undefined");
        return;
      }

      // Validate this context
      if (typeof this.setData !== "function") {
        console.error("setData method is not available in current context");
        return;
      }

      const baseUOM = await db
        .collection("unit_of_measurement")
        .where({ id: baseUOMid })
        .get()
        .then((res) => {
          return res.data[0].uom_name;
        });

      const isSNAutoGenerated =
        itemData.serial_no_generate_rule === "According To System Settings";

      // Set dialog data with validated values
      const dialogData = {
        [`dialog_serial_number.item_id`]: itemData.id || materialId,
        [`dialog_serial_number.item_code`]: itemData.material_code || "",
        [`dialog_serial_number.item_name`]: itemData.material_name || "",
        [`dialog_serial_number.row_index`]: rowIndex,
        [`dialog_serial_number.serial_number_qty`]: 0,
        [`dialog_serial_number.is_auto`]: isSNAutoGenerated ? 1 : 0,
        [`dialog_serial_number.is_single`]: itemData.is_single_unit_serial,
        [`dialog_serial_number.total_quantity_uom_id`]: baseUOMid || "",
        [`dialog_serial_number.total_quantity_uom`]: baseUOM || "",
        [`dialog_serial_number.total_quantity`]: baseQty,
      };

      if (itemData.item_image) {
        dialogData[`dialog_serial_number.item_image_url`] = itemData.item_image;
        console.log("itemData.item_image", itemData.item_image);
        await this.display("dialog_serial_number.item_image");
      }

      // Set serial number data if available
      if (serialNumberData.length > 0) {
        dialogData[`dialog_serial_number.table_serial_number`] =
          serialNumberData;
      }

      await this.setData(dialogData);
      this.openDialog("dialog_serial_number");

      console.log("Dialog data set successfully");
    } catch (dbError) {
      console.error("Database operation failed:", dbError);

      // Optional: Set minimal data even if DB fetch fails
      if (typeof this.setData === "function") {
        await this.setData({
          [`dialog_serial_number.item_id`]: materialId,
          [`dialog_serial_number.row_index`]: rowIndex,
          [`dialog_serial_number.serial_number_qty`]: 0,
          [`dialog_serial_number.total_quantity_uom`]: baseUOM || "",
          [`dialog_serial_number.total_quantity`]: baseQty,
          [`dialog_serial_number.table_serial_number`]: serialNumberData,
        });
        this.openDialog("dialog_serial_number");
        console.log("Set minimal dialog data due to database error");
      }
    }
  } catch (error) {
    console.error("Unexpected error in serial number handler:", error);

    // Log stack trace for debugging
    if (error.stack) {
      console.error("Stack trace:", error.stack);
    }
  }
})();
