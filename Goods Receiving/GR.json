{
  "list": [
    {
      "name": "自动布局",
      "type": "flex",
      "el": "su-fm-flex",
      "mainIcon": "自动布局",
      "typeIcon": "自动布局",
      "icon": "icon-zhediemianban",
      "group": "Design",
      "groupSort": 6,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "title": "布局",
        "customClass": "",
        "hidden": false,
        "recursive": false,
        "recursiveStyleFx": "",
        "slotTarget": "",
        "defaultValue": "",
        "flexDirection": "row",
        "flexWrap": "nowrap",
        "alignItems": "",
        "justifyContent": "",
        "hGap": "",
        "vGap": "",
        "grid": {
          "row": {
            "value": "",
            "visible": true
          },
          "col": {
            "value": "",
            "visible": true
          },
          "use": false
        },
        "padding": ["", "", "", ""],
        "margin": ["", "", "", ""],
        "boxSizing": "border-box",
        "width": "",
        "height": "",
        "radius": ["", "", "", ""],
        "position": "",
        "positions": ["", "", "", ""],
        "zIndex": "",
        "flex": "",
        "flexGrow": "",
        "flexShrink": "",
        "fills": [],
        "borders": [],
        "effects": [],
        "states": [],
        "hoverClass": "",
        "overflow": "",
        "styleFx": "",
        "behave": "",
        "remoteFunc": "func_6v5x6f5m",
        "remoteOption": "option_6v5x6f5m",
        "tableColumn": false,
        "subform": false,
        "props": {},
        "datasource": {
          "source": null,
          "rules": {
            "collectionId": "",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "remote": true,
        "remoteType": "datasource",
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        }
      },
      "list": [
        {
          "name": "",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Goods Receiving",
            "customClass": "marginright",
            "hidden": false,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "",
            "color": "#333333",
            "fontSize": "24px",
            "fontWeight": "700",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_gzy6rtnn",
            "remoteOption": "option_gzy6rtnn",
            "tableColumn": false,
            "subform": false,
            "dynamicValueFx": "",
            "dynamicValueType": "fx",
            "isDynamicValue": false
          },
          "events": {
            "onClick": ""
          },
          "key": "gzy6rtnn",
          "model": "goods_receiving_tittle",
          "rules": []
        },
        {
          "name": "Draft Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Draft Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .draft-button {\n            padding: 0 20px;\n            border: 2px solid #8C95A4;\n            background-color: #D0D5DD;\n            color: #4D5A74;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"draft-button\">Draft</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_k78vigaf",
            "remoteOption": "option_k78vigaf",
            "tableColumn": false,
            "subform": false,
            "customClass": "",
            "hideLabel": true,
            "dynamicValueType": "fx",
            "isDynamicValue": false
          },
          "events": {
            "onChange": ""
          },
          "key": "k78vigaf",
          "model": "draft_status",
          "rules": []
        },
        {
          "name": "Completed Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Completed Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .completed-button {\n            padding: 0 20px;\n            border: 2px solid #00AE00;\n            background-color: #C5F5C5;\n            color: #016701;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"completed-button\">Completed</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_k78vigaf",
            "remoteOption": "option_k78vigaf",
            "tableColumn": false,
            "subform": false,
            "customClass": "",
            "hideLabel": true
          },
          "events": {
            "onChange": ""
          },
          "key": "hnxlxzhd",
          "model": "completed_status",
          "rules": []
        }
      ],
      "events": {
        "onClick": ""
      },
      "key": "6v5x6f5m",
      "model": "flex_6v5x6f5m",
      "rules": []
    },
    {
      "name": "GR Status",
      "type": "select",
      "mainIcon": "下拉单选",
      "typeIcon": "下拉单选",
      "icon": "icon-select",
      "group": "Select",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-select",
      "options": {
        "defaultValue": "",
        "multiple": false,
        "disabled": false,
        "clearable": false,
        "placeholder": "",
        "required": false,
        "requiredMessage": "",
        "validatorCheck": false,
        "validator": "",
        "width": "",
        "options": [
          {
            "value": "Option 1",
            "label": "Option 1"
          },
          {
            "value": "Option 2",
            "label": "Option 2"
          },
          {
            "value": "Option 3",
            "label": "Option 3"
          }
        ],
        "remote": true,
        "remoteType": "innerdatasource",
        "remoteOption": "option_lluzrlzo",
        "filterable": false,
        "pagingEnabled": true,
        "remoteOptions": [],
        "props": {
          "value": "dict_key",
          "label": "dict_value",
          "cascade": "",
          "children": "children",
          "image": "",
          "icon": ""
        },
        "remoteFunc": "func_lluzrlzo",
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "customProps": {},
        "tip": "",
        "tableColumn": false,
        "subform": false,
        "paging_enabled": 0,
        "paging_way": "Pagination",
        "page_size": 10,
        "more_fields": [],
        "datasource": {
          "source": "系统字典(勿删):Table:1897577528487428098",
          "rules": {
            "collectionId": "1897577528487428098",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "parent_id",
                "operator": "numberEqual",
                "valueType": "value",
                "value": "1914242988707749889",
                "type": "leaf",
                "level": 1,
                "propLabel": "父主键",
                "valueLabel": "",
                "operatorLabel": "等于",
                "valueTypeLabel": "值"
              }
            ]
          }
        },
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        }
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "lluzrlzo",
      "model": "gr_status",
      "rules": []
    },
    {
      "name": "PI Status",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_7twvd91v",
        "remoteOption": "option_7twvd91v",
        "tableColumn": false,
        "subform": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "7ujrnz6n",
      "model": "pi_status",
      "rules": []
    },
    {
      "name": "Page Status",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_7twvd91v",
        "remoteOption": "option_7twvd91v",
        "tableColumn": false,
        "subform": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "2howhjfr",
      "model": "page_status",
      "rules": []
    },
    {
      "name": "Return Status",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_3w3wjtjj",
        "remoteOption": "option_3w3wjtjj",
        "tableColumn": false,
        "subform": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "3w3wjtjj",
      "model": "return_status",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "PO Number",
              "el": "su-fm-table-select",
              "mainIcon": "数据源",
              "typeIcon": "数据源",
              "group": "Select",
              "groupSort": 4,
              "generate": "part",
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "disabled": false,
                "dataBind": true,
                "required": true,
                "validator": "",
                "hideLabel": false,
                "pageSourceId": "1923315035704745986",
                "customProps": {},
                "pagingEnabled": true,
                "multiple": false,
                "placeholder": "",
                "lazyLoad": true,
                "props": {
                  "value": "id",
                  "label": "purchase_order_no",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "datasource": {
                  "source": "Purchase Order:Table:1902776039445217282",
                  "rules": {
                    "collectionId": "1902776039445217282",
                    "list": [
                      {
                        "id": 1747197370800,
                        "parentId": 1747197370801,
                        "isTop": true,
                        "type": "branch",
                        "operator": "all",
                        "prop": "",
                        "valueType": "",
                        "value": "",
                        "level": 1,
                        "children": [
                          {
                            "id": 1747197370804,
                            "isTop": false,
                            "parentId": 1747197370800,
                            "type": "branch",
                            "operator": "any",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747197399269,
                                "parentId": 1747197370804,
                                "isTop": false,
                                "prop": "gr_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Fully Received",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "GR Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747197370805,
                                "parentId": 1747197370804,
                                "isTop": false,
                                "prop": "gr_status",
                                "operator": "isNull",
                                "valueType": "value",
                                "value": null,
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "GR Status",
                                "valueLabel": "",
                                "operatorLabel": "没有值",
                                "valueTypeLabel": "值"
                              }
                            ]
                          },
                          {
                            "id": 1747197370806,
                            "isTop": false,
                            "parentId": 1747197370800,
                            "type": "branch",
                            "operator": "all",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747197370802,
                                "parentId": 1747197370806,
                                "isTop": false,
                                "prop": "po_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Draft",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "PO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747197370807,
                                "parentId": 1747197370806,
                                "isTop": false,
                                "prop": "po_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Cancelled",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "PO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              }
                            ]
                          },
                          {
                            "id": 1747197370803,
                            "parentId": 1747197370800,
                            "isTop": false,
                            "prop": "po_plant",
                            "operator": "isNotNull",
                            "valueType": "value",
                            "value": null,
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "Plant",
                            "valueLabel": "",
                            "operatorLabel": "有值",
                            "valueTypeLabel": "值"
                          }
                        ]
                      }
                    ]
                  },
                  "paging_enabled": 0,
                  "paging_way": "Pagination",
                  "page_size": 10,
                  "more_fields": [],
                  "datasource": {
                    "source": null,
                    "rules": {
                      "collectionId": "",
                      "list": [
                        {
                          "id": 1723795236686,
                          "parentId": 1723795236685,
                          "isTop": true,
                          "prop": "",
                          "operator": "",
                          "valueType": "",
                          "value": "",
                          "type": "leaf",
                          "level": 1
                        }
                      ]
                    }
                  },
                  "url_params": {
                    "list": [
                      {
                        "prop": "",
                        "propLabel": "",
                        "operator": "",
                        "operatorLabel": "",
                        "valueType": "value",
                        "valueTypeLabel": "",
                        "value": null,
                        "valueLabel": ""
                      }
                    ]
                  },
                  "body_params": {
                    "list": [
                      {
                        "prop": "",
                        "propLabel": "",
                        "operator": "",
                        "operatorLabel": "",
                        "valueType": "value",
                        "valueTypeLabel": "",
                        "value": null,
                        "valueLabel": ""
                      }
                    ]
                  },
                  "request_params": {
                    "list": [
                      {
                        "prop": "",
                        "propLabel": "",
                        "operator": "",
                        "operatorLabel": "",
                        "valueType": "value",
                        "valueTypeLabel": "",
                        "value": null,
                        "valueLabel": ""
                      }
                    ]
                  },
                  "remote": true,
                  "remoteType": "datasource"
                },
                "remoteFunc": "func_7qiud9pk",
                "remoteOption": "option_7qiud9pk",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "columns": [
                  {
                    "title": "PO Number",
                    "name": "purchase_order_no"
                  },
                  {
                    "title": "Supplier Name",
                    "name": "po_supplier_id"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "pageId": "1923315035738300417"
              },
              "events": {
                "onChange": "drpaq3gc"
              },
              "type": "custom",
              "novalid": {},
              "key": "sbn5lowo",
              "model": "fake_purchase_order_id",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "PO Number",
              "el": "su-fm-table-select",
              "mainIcon": "数据源",
              "typeIcon": "数据源",
              "group": "Select",
              "groupSort": 4,
              "generate": "part",
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": [],
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "disabled": false,
                "dataBind": true,
                "required": true,
                "validator": "",
                "hideLabel": false,
                "pageSourceId": "1922109730902089729",
                "customProps": {},
                "pagingEnabled": true,
                "multiple": true,
                "placeholder": "",
                "lazyLoad": true,
                "props": {
                  "value": "id",
                  "label": "purchase_order_no",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "datasource": {
                  "source": "Purchase Order:Table:1902776039445217282",
                  "rules": {
                    "collectionId": "1902776039445217282",
                    "list": [
                      {
                        "id": 1747197370800,
                        "parentId": 1747197370801,
                        "isTop": true,
                        "type": "branch",
                        "operator": "all",
                        "prop": "",
                        "valueType": "",
                        "value": "",
                        "level": 1,
                        "children": [
                          {
                            "id": 1747197370804,
                            "isTop": false,
                            "parentId": 1747197370800,
                            "type": "branch",
                            "operator": "any",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747197399269,
                                "parentId": 1747197370804,
                                "isTop": false,
                                "prop": "gr_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Fully Received",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "GR Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747197370805,
                                "parentId": 1747197370804,
                                "isTop": false,
                                "prop": "gr_status",
                                "operator": "isNull",
                                "valueType": "value",
                                "value": null,
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "GR Status",
                                "valueLabel": "",
                                "operatorLabel": "没有值",
                                "valueTypeLabel": "值"
                              }
                            ]
                          },
                          {
                            "id": 1747197370806,
                            "isTop": false,
                            "parentId": 1747197370800,
                            "type": "branch",
                            "operator": "all",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747197370802,
                                "parentId": 1747197370806,
                                "isTop": false,
                                "prop": "po_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Draft",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "PO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747197370807,
                                "parentId": 1747197370806,
                                "isTop": false,
                                "prop": "po_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Cancelled",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "PO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              }
                            ]
                          },
                          {
                            "id": 1747197370803,
                            "parentId": 1747197370800,
                            "isTop": false,
                            "prop": "po_plant",
                            "operator": "isNotNull",
                            "valueType": "value",
                            "value": null,
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "Plant",
                            "valueLabel": "",
                            "operatorLabel": "有值",
                            "valueTypeLabel": "值"
                          },
                          {
                            "id": 1747396981436,
                            "parentId": 1747197370800,
                            "isTop": false,
                            "prop": "po_supplier_id",
                            "operator": "equal",
                            "valueType": "field",
                            "value": "{{value:supplier_name}}",
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "Supplier Name",
                            "valueLabel": "",
                            "operatorLabel": "等于",
                            "valueTypeLabel": "字段"
                          }
                        ]
                      }
                    ]
                  },
                  "paging_enabled": 0,
                  "paging_way": "Pagination",
                  "page_size": 10,
                  "more_fields": [],
                  "datasource": {
                    "source": null,
                    "rules": {
                      "collectionId": "",
                      "list": [
                        {
                          "id": 1723795236686,
                          "parentId": 1723795236685,
                          "isTop": true,
                          "prop": "",
                          "operator": "",
                          "valueType": "",
                          "value": "",
                          "type": "leaf",
                          "level": 1
                        }
                      ]
                    }
                  },
                  "url_params": {
                    "list": [
                      {
                        "prop": "",
                        "propLabel": "",
                        "operator": "",
                        "operatorLabel": "",
                        "valueType": "value",
                        "valueTypeLabel": "",
                        "value": null,
                        "valueLabel": ""
                      }
                    ]
                  },
                  "body_params": {
                    "list": [
                      {
                        "prop": "",
                        "propLabel": "",
                        "operator": "",
                        "operatorLabel": "",
                        "valueType": "value",
                        "valueTypeLabel": "",
                        "value": null,
                        "valueLabel": ""
                      }
                    ]
                  },
                  "request_params": {
                    "list": [
                      {
                        "prop": "",
                        "propLabel": "",
                        "operator": "",
                        "operatorLabel": "",
                        "valueType": "value",
                        "valueTypeLabel": "",
                        "value": null,
                        "valueLabel": ""
                      }
                    ]
                  },
                  "remote": true,
                  "remoteType": "datasource"
                },
                "remoteFunc": "func_7qiud9pk",
                "remoteOption": "option_7qiud9pk",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "columns": [
                  {
                    "title": "PO Number",
                    "name": "purchase_order_no"
                  },
                  {
                    "title": "Supplier Name",
                    "name": "po_supplier_id"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "pageId": "1922109730956615681"
              },
              "events": {
                "onChange": "4tlscp1c"
              },
              "type": "custom",
              "novalid": {},
              "key": "7qiud9pk",
              "model": "purchase_order_id",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "Testing PO",
              "el": "su-fm-table-select",
              "mainIcon": "数据源",
              "typeIcon": "数据源",
              "group": "Select",
              "groupSort": 4,
              "generate": "part",
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": [],
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "disabled": false,
                "dataBind": true,
                "required": false,
                "validator": "",
                "hideLabel": false,
                "pageSourceId": "1922109730902089729",
                "customProps": {},
                "pagingEnabled": true,
                "multiple": true,
                "placeholder": "",
                "lazyLoad": true,
                "props": {
                  "value": "id",
                  "label": "purchase_order_no",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "datasource": {
                  "source": "Purchase Order:Table:1902776039445217282",
                  "rules": {
                    "collectionId": "1902776039445217282",
                    "list": [
                      {
                        "id": 1747399271872,
                        "parentId": 1747399271871,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "remoteFunc": "func_k0kufxk5",
                "remoteOption": "option_k0kufxk5",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "columns": [
                  {
                    "title": "PO Number",
                    "name": "purchase_order_no",
                    "search_type": "SubstringMatch"
                  }
                ],
                "remote": false,
                "remoteType": "datasource",
                "pageId": "1922109730956615681"
              },
              "events": {
                "onChange": ""
              },
              "type": "custom",
              "novalid": {},
              "key": "k0kufxk5",
              "model": "testing_po",
              "rules": []
            },
            {
              "name": "栅格布局",
              "type": "grid",
              "mainIcon": "栅格布局",
              "typeIcon": "栅格布局",
              "icon": "icon-RectangleCopy",
              "group": "Layout",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "columns": [
                {
                  "type": "col",
                  "options": {
                    "span": 12,
                    "offset": 0,
                    "push": 0,
                    "pull": 0,
                    "xs": 24,
                    "sm": 12,
                    "md": 21,
                    "lg": 12,
                    "xl": 12,
                    "customClass": ""
                  },
                  "list": [
                    {
                      "name": "Supplier",
                      "el": "su-fm-table-select",
                      "mainIcon": "数据源",
                      "typeIcon": "数据源",
                      "group": "Select",
                      "groupSort": 4,
                      "generate": "part",
                      "enableScopes": ["Component", "Table", "Page"],
                      "options": {
                        "defaultValue": [],
                        "customClass": "",
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "disabled": true,
                        "dataBind": true,
                        "required": false,
                        "validator": "",
                        "hideLabel": false,
                        "pageSourceId": "1919662972758073345",
                        "customProps": {},
                        "pagingEnabled": true,
                        "multiple": false,
                        "placeholder": "",
                        "lazyLoad": true,
                        "props": {
                          "value": "id",
                          "label": "supplier_com_name",
                          "cascade": "",
                          "children": "",
                          "image": "",
                          "icon": ""
                        },
                        "datasource": {
                          "source": "Supplier:Table:1901541078662762497",
                          "rules": {
                            "collectionId": "1901541078662762497",
                            "list": [
                              {
                                "id": 1747291967397,
                                "parentId": 1747291967398,
                                "isTop": true,
                                "type": "branch",
                                "operator": "all",
                                "prop": "",
                                "valueType": "",
                                "value": "",
                                "level": 1,
                                "children": [
                                  {
                                    "id": 1747291866260,
                                    "parentId": 1747291967397,
                                    "isTop": false,
                                    "prop": "supplier_status",
                                    "operator": "equal",
                                    "valueType": "value",
                                    "value": "Active",
                                    "type": "leaf",
                                    "level": 2,
                                    "propLabel": "Supplier Status",
                                    "valueLabel": "",
                                    "operatorLabel": "等于",
                                    "valueTypeLabel": "值"
                                  },
                                  {
                                    "id": 1747291967400,
                                    "isTop": false,
                                    "parentId": 1747291967397,
                                    "type": "branch",
                                    "operator": "any",
                                    "level": 2,
                                    "children": [
                                      {
                                        "id": 1747291967399,
                                        "parentId": 1747291967400,
                                        "isTop": false,
                                        "prop": "organization_id",
                                        "operator": "equal",
                                        "valueType": "field",
                                        "value": "{{system:deptIds}}",
                                        "type": "leaf",
                                        "level": 3,
                                        "propLabel": "Organization",
                                        "valueLabel": "",
                                        "operatorLabel": "等于",
                                        "valueTypeLabel": "字段"
                                      },
                                      {
                                        "id": 1747291967401,
                                        "parentId": 1747291967400,
                                        "isTop": false,
                                        "prop": "organization_id",
                                        "operator": "equal",
                                        "valueType": "field",
                                        "value": "{{global:deptParentId}}",
                                        "type": "leaf",
                                        "level": 3,
                                        "propLabel": "Organization",
                                        "valueLabel": "",
                                        "operatorLabel": "等于",
                                        "valueTypeLabel": "值"
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          },
                          "paging_enabled": 0,
                          "paging_way": "Pagination",
                          "page_size": 10,
                          "more_fields": [],
                          "datasource": {
                            "source": null,
                            "rules": {
                              "collectionId": "",
                              "list": [
                                {
                                  "id": 1723795236686,
                                  "parentId": 1723795236685,
                                  "isTop": true,
                                  "prop": "",
                                  "operator": "",
                                  "valueType": "",
                                  "value": "",
                                  "type": "leaf",
                                  "level": 1
                                }
                              ]
                            }
                          },
                          "url_params": {
                            "list": [
                              {
                                "prop": "",
                                "propLabel": "",
                                "operator": "",
                                "operatorLabel": "",
                                "valueType": "value",
                                "valueTypeLabel": "",
                                "value": null,
                                "valueLabel": ""
                              }
                            ]
                          },
                          "body_params": {
                            "list": [
                              {
                                "prop": "",
                                "propLabel": "",
                                "operator": "",
                                "operatorLabel": "",
                                "valueType": "value",
                                "valueTypeLabel": "",
                                "value": null,
                                "valueLabel": ""
                              }
                            ]
                          },
                          "request_params": {
                            "list": [
                              {
                                "prop": "",
                                "propLabel": "",
                                "operator": "",
                                "operatorLabel": "",
                                "valueType": "value",
                                "valueTypeLabel": "",
                                "value": null,
                                "valueLabel": ""
                              }
                            ]
                          },
                          "remote": false,
                          "remoteType": "datasource"
                        },
                        "remoteFunc": "func_ivwr4rhl",
                        "remoteOption": "option_ivwr4rhl",
                        "tableColumn": false,
                        "subform": false,
                        "columns": [
                          {
                            "title": "Supplier Name",
                            "name": "supplier_com_name"
                          },
                          {
                            "title": "Supplier Code",
                            "name": "supplier_code"
                          }
                        ],
                        "paging_enabled": 1,
                        "paging_way": "Pagination",
                        "page_size": 10,
                        "more_fields": [],
                        "url_params": {
                          "list": [
                            {
                              "prop": "",
                              "propLabel": "",
                              "operator": "",
                              "operatorLabel": "",
                              "valueType": "value",
                              "valueTypeLabel": "",
                              "value": null,
                              "valueLabel": ""
                            }
                          ]
                        },
                        "body_params": {
                          "list": [
                            {
                              "prop": "",
                              "propLabel": "",
                              "operator": "",
                              "operatorLabel": "",
                              "valueType": "value",
                              "valueTypeLabel": "",
                              "value": null,
                              "valueLabel": ""
                            }
                          ]
                        },
                        "request_params": {
                          "list": [
                            {
                              "prop": "",
                              "propLabel": "",
                              "operator": "",
                              "operatorLabel": "",
                              "valueType": "value",
                              "valueTypeLabel": "",
                              "value": null,
                              "valueLabel": ""
                            }
                          ]
                        },
                        "remote": true,
                        "remoteType": "innerdatasource",
                        "pageId": "1919662973257195521"
                      },
                      "events": {
                        "onChange": ""
                      },
                      "type": "custom",
                      "novalid": {},
                      "key": "ivwr4rhl",
                      "model": "supplier_name",
                      "rules": []
                    }
                  ],
                  "key": "qy8vo7rn",
                  "rules": []
                },
                {
                  "type": "col",
                  "options": {
                    "span": 12,
                    "offset": 0,
                    "push": 0,
                    "pull": 0,
                    "xs": 24,
                    "sm": 12,
                    "md": 3,
                    "lg": 12,
                    "xl": 12,
                    "customClass": ""
                  },
                  "list": [
                    {
                      "name": "Currency Code",
                      "type": "input",
                      "mainIcon": "单行文本",
                      "typeIcon": "多行文本",
                      "icon": "icon-input",
                      "group": "Text",
                      "groupSort": 1,
                      "enableScopes": ["Component", "Table", "Page"],
                      "el": "fm-input",
                      "options": {
                        "width": "",
                        "defaultValue": "",
                        "required": false,
                        "requiredMessage": "",
                        "dataType": "",
                        "dataTypeCheck": false,
                        "dataTypeMessage": "",
                        "pattern": "",
                        "patternCheck": false,
                        "patternMessage": "",
                        "validatorCheck": false,
                        "validator": "",
                        "placeholder": "",
                        "customClass": "",
                        "disabled": true,
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "dataBind": true,
                        "showPassword": false,
                        "clearable": false,
                        "maxlength": "",
                        "showWordLimit": false,
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_e6eqh8h4",
                        "remoteOption": "option_e6eqh8h4",
                        "tableColumn": false,
                        "subform": false,
                        "hideLabel": true
                      },
                      "events": {
                        "onChange": "",
                        "onFocus": "",
                        "onBlur": ""
                      },
                      "novalid": {},
                      "key": "e6eqh8h4",
                      "model": "currency_code",
                      "rules": []
                    }
                  ],
                  "key": "khws748p"
                }
              ],
              "options": {
                "gutter": 4,
                "justify": "start",
                "align": "top",
                "customClass": "",
                "hidden": false,
                "flex": true,
                "responsive": true,
                "remoteFunc": "func_ictoozgi",
                "remoteOption": "option_ictoozgi",
                "tableColumn": false,
                "subform": false
              },
              "novalid": {},
              "key": "ictoozgi",
              "model": "grid_ictoozgi",
              "rules": []
            },
            {
              "name": "Purchase Order Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_mahixxij",
                "remoteOption": "option_mahixxij",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "mahixxij",
              "model": "purchase_order_number",
              "rules": []
            },
            {
              "name": "Plant",
              "type": "treeselect",
              "mainIcon": "下拉树状单选",
              "typeIcon": "下拉树状单选",
              "icon": "icon-shuxuanzeqi",
              "group": "Select",
              "groupSort": 4,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "width": "",
                "placeholder": "",
                "disabled": true,
                "clearable": false,
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1",
                    "children": [
                      {
                        "value": "Option 1 - children",
                        "label": "Option 1 - children"
                      }
                    ]
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2",
                    "children": [
                      {
                        "value": "Option 2 - children",
                        "label": "Option 2 - children"
                      }
                    ]
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_tqv32qgk",
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "dept_name",
                  "children": "children",
                  "cascade": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_tqv32qgk",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "required": true,
                "validatorCheck": false,
                "validator": "",
                "multiple": false,
                "filterable": true,
                "checkStrictly": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "datasource": {
                  "source": "组织机构(勿删勿改):Table:1789995126399348747",
                  "rules": {
                    "collectionId": "1789995126399348747",
                    "list": [
                      {
                        "id": 1743597825556,
                        "parentId": 1743597825557,
                        "isTop": true,
                        "type": "branch",
                        "operator": "any",
                        "prop": "",
                        "valueType": "",
                        "value": "",
                        "level": 1,
                        "children": [
                          {
                            "id": 1723795236686,
                            "parentId": 1743597825556,
                            "isTop": false,
                            "prop": "id",
                            "operator": "in",
                            "valueType": "formula",
                            "value": "{{system:deptIds}}.split(',')",
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "主键ID",
                            "valueLabel": "",
                            "operatorLabel": "等于任意一个",
                            "valueTypeLabel": "值"
                          },
                          {
                            "id": 1743597825558,
                            "parentId": 1743597825556,
                            "isTop": false,
                            "prop": "parent_id",
                            "operator": "numberEqualAny",
                            "valueType": "formula",
                            "value": "{{system:deptIds}}.split(',')",
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "父主键",
                            "valueLabel": "",
                            "operatorLabel": "等于任一",
                            "valueTypeLabel": "值"
                          }
                        ]
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "paging_enabled": 0,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": []
              },
              "events": {
                "onChange": "zug6defe",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "tqv32qgk",
              "model": "plant_id",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "栅格布局",
              "type": "grid",
              "mainIcon": "栅格布局",
              "typeIcon": "栅格布局",
              "icon": "icon-RectangleCopy",
              "group": "Layout",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "columns": [
                {
                  "type": "col",
                  "options": {
                    "span": 12,
                    "offset": 0,
                    "push": 0,
                    "pull": 0,
                    "xs": 24,
                    "sm": 12,
                    "md": 12,
                    "lg": 12,
                    "xl": 12,
                    "customClass": ""
                  },
                  "list": [
                    {
                      "name": "Name",
                      "type": "input",
                      "mainIcon": "单行文本",
                      "typeIcon": "多行文本",
                      "icon": "icon-input",
                      "group": "Text",
                      "groupSort": 1,
                      "enableScopes": ["Component", "Table", "Page"],
                      "el": "fm-input",
                      "options": {
                        "width": "",
                        "defaultValue": "",
                        "required": false,
                        "requiredMessage": "",
                        "dataType": "",
                        "dataTypeCheck": false,
                        "dataTypeMessage": "",
                        "pattern": "",
                        "patternCheck": false,
                        "patternMessage": "",
                        "validatorCheck": false,
                        "validator": "",
                        "placeholder": "",
                        "customClass": "",
                        "disabled": false,
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "dataBind": true,
                        "showPassword": false,
                        "clearable": false,
                        "maxlength": "",
                        "showWordLimit": false,
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_i53841ci",
                        "remoteOption": "option_i53841ci",
                        "tableColumn": false,
                        "subform": false,
                        "labelWrap": true
                      },
                      "events": {
                        "onChange": "",
                        "onFocus": "",
                        "onBlur": ""
                      },
                      "novalid": {},
                      "key": "i53841ci",
                      "model": "gr_billing_name",
                      "rules": []
                    },
                    {
                      "name": "Billing",
                      "type": "textarea",
                      "mainIcon": "多行文本",
                      "typeIcon": "多行文本(1)",
                      "icon": "icon-diy-com-textarea",
                      "group": "Text",
                      "groupSort": 2,
                      "enableScopes": ["Component", "Table", "Page"],
                      "options": {
                        "width": "",
                        "defaultValue": "",
                        "required": false,
                        "requiredMessage": "",
                        "disabled": true,
                        "pattern": "",
                        "patternMessage": "",
                        "validatorCheck": false,
                        "validator": "",
                        "placeholder": "",
                        "customClass": "",
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "dataBind": true,
                        "clearable": false,
                        "maxlength": "",
                        "showWordLimit": false,
                        "rows": null,
                        "autosize": true,
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_1bv03o6s",
                        "remoteOption": "option_1bv03o6s",
                        "tableColumn": false,
                        "subform": false,
                        "labelWrap": true
                      },
                      "events": {
                        "onChange": "",
                        "onFocus": "",
                        "onBlur": ""
                      },
                      "novalid": {},
                      "key": "1bv03o6s",
                      "model": "gr_billing_address",
                      "rules": []
                    },
                    {
                      "name": "Manage Address",
                      "type": "link",
                      "mainIcon": "链接",
                      "typeIcon": "链接",
                      "icon": "icon-lianjie",
                      "group": "Buttons",
                      "groupSort": 2,
                      "enableScopes": ["Component", "Table", "Page"],
                      "options": {
                        "customClass": "",
                        "disabled": false,
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hideLabel": true,
                        "hidden": false,
                        "linkType": "default",
                        "linkName": "Manage Address",
                        "underline": true,
                        "blank": true,
                        "href": "",
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_vg5ecuit",
                        "remoteOption": "option_vg5ecuit",
                        "tableColumn": false,
                        "subform": false
                      },
                      "events": {
                        "onClick": "d0xf1jbf"
                      },
                      "novalid": {},
                      "key": "vg5ecuit",
                      "model": "link_billing_address",
                      "rules": []
                    }
                  ],
                  "key": "5s64y969"
                },
                {
                  "type": "col",
                  "options": {
                    "span": 12,
                    "offset": 0,
                    "push": 0,
                    "pull": 0,
                    "xs": 24,
                    "sm": 12,
                    "md": 12,
                    "lg": 12,
                    "xl": 12,
                    "customClass": ""
                  },
                  "list": [
                    {
                      "name": "Contact Name",
                      "type": "input",
                      "mainIcon": "单行文本",
                      "typeIcon": "多行文本",
                      "icon": "icon-input",
                      "group": "Text",
                      "groupSort": 1,
                      "enableScopes": ["Component", "Table", "Page"],
                      "el": "fm-input",
                      "options": {
                        "width": "",
                        "defaultValue": "",
                        "required": false,
                        "requiredMessage": "",
                        "dataType": "",
                        "dataTypeCheck": false,
                        "dataTypeMessage": "",
                        "pattern": "",
                        "patternCheck": false,
                        "patternMessage": "",
                        "validatorCheck": false,
                        "validator": "",
                        "placeholder": "",
                        "customClass": "",
                        "disabled": false,
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "dataBind": true,
                        "showPassword": false,
                        "clearable": false,
                        "maxlength": "",
                        "showWordLimit": false,
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_h8gg4f2a",
                        "remoteOption": "option_h8gg4f2a",
                        "tableColumn": false,
                        "subform": false,
                        "labelWrap": true
                      },
                      "events": {
                        "onChange": "",
                        "onFocus": "",
                        "onBlur": ""
                      },
                      "novalid": {},
                      "key": "h8gg4f2a",
                      "model": "gr_billing_cp",
                      "rules": []
                    },
                    {
                      "name": "Shipping",
                      "type": "textarea",
                      "mainIcon": "多行文本",
                      "typeIcon": "多行文本(1)",
                      "icon": "icon-diy-com-textarea",
                      "group": "Text",
                      "groupSort": 2,
                      "enableScopes": ["Component", "Table", "Page"],
                      "options": {
                        "width": "",
                        "defaultValue": "",
                        "required": false,
                        "requiredMessage": "",
                        "disabled": true,
                        "pattern": "",
                        "patternMessage": "",
                        "validatorCheck": false,
                        "validator": "",
                        "placeholder": "",
                        "customClass": "",
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "dataBind": true,
                        "clearable": false,
                        "maxlength": "",
                        "showWordLimit": false,
                        "rows": null,
                        "autosize": true,
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_1bv03o6s",
                        "remoteOption": "option_1bv03o6s",
                        "tableColumn": false,
                        "subform": false,
                        "labelWrap": true
                      },
                      "events": {
                        "onChange": "",
                        "onFocus": "",
                        "onBlur": ""
                      },
                      "novalid": {},
                      "key": "pzx1mq3e",
                      "model": "gr_shipping_address",
                      "rules": []
                    },
                    {
                      "name": "Manage Address",
                      "type": "link",
                      "mainIcon": "链接",
                      "typeIcon": "链接",
                      "icon": "icon-lianjie",
                      "group": "Buttons",
                      "groupSort": 2,
                      "enableScopes": ["Component", "Table", "Page"],
                      "options": {
                        "customClass": "",
                        "disabled": false,
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hideLabel": true,
                        "hidden": false,
                        "linkType": "default",
                        "linkName": "Manage Address",
                        "underline": true,
                        "blank": true,
                        "href": "",
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_vg5ecuit",
                        "remoteOption": "option_vg5ecuit",
                        "tableColumn": false,
                        "subform": false
                      },
                      "events": {
                        "onClick": "ber59qgc"
                      },
                      "novalid": {},
                      "key": "pn5x8iud",
                      "model": "link_shipping_address",
                      "rules": []
                    }
                  ],
                  "key": "714qukfc"
                }
              ],
              "options": {
                "gutter": 12,
                "justify": "start",
                "align": "top",
                "customClass": "",
                "hidden": true,
                "flex": true,
                "responsive": true,
                "remoteFunc": "func_2hrrfnbc",
                "remoteOption": "option_2hrrfnbc",
                "tableColumn": false,
                "subform": false
              },
              "novalid": {},
              "key": "2hrrfnbc",
              "model": "address_grid",
              "rules": []
            },
            {
              "name": "Contact Person",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_ycl5ehq4",
                "remoteOption": "option_ycl5ehq4",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "ycl5ehq4",
              "model": "supplier_contact_person",
              "rules": []
            },
            {
              "name": "Contact Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_ycl5ehq4",
                "remoteOption": "option_ycl5ehq4",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "wbhw60iy",
              "model": "supplier_contact_number",
              "rules": []
            },
            {
              "name": "Email Address",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_ycl5ehq4",
                "remoteOption": "option_ycl5ehq4",
                "tableColumn": false,
                "subform": false,
                "dynamicValueType": "fx",
                "isDynamicValue": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "xofb26wl",
              "model": "supplier_email",
              "rules": []
            },
            {
              "name": "Organization",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_kx4cdvup",
                "remoteOption": "option_kx4cdvup",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "kx4cdvup",
              "model": "organization_id",
              "rules": []
            },
            {
              "name": "dockey",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_om8sir5n",
                "remoteOption": "option_om8sir5n",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "om8sir5n",
              "model": "gr_dockey",
              "rules": []
            }
          ],
          "key": "jnjfn6fq",
          "rules": []
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Reference",
              "type": "fileupload",
              "mainIcon": "文件上传",
              "typeIcon": "文件上传",
              "icon": "icon-wenjianshangchuan",
              "group": "Special",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": [],
                "width": "",
                "tokenFunc": "funcGetToken",
                "token": "",
                "tokenType": "datasource",
                "disabled": false,
                "tip": "",
                "action": "/api/blade-resource/oss/endpoint/put-file",
                "customClass": "",
                "limit": 9,
                "multiple": false,
                "isQiniu": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "headers": [],
                "required": false,
                "validatorCheck": false,
                "validator": "",
                "withCredentials": false,
                "remoteFunc": "func_p5wox5kk",
                "remoteOption": "option_p5wox5kk",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onSelect": "",
                "onUploadSuccess": "",
                "onUploadError": "",
                "onRemove": ""
              },
              "novalid": {},
              "key": "p5wox5kk",
              "model": "reference_doc",
              "rules": []
            }
          ],
          "key": "kotjfh6p",
          "rules": []
        }
      ],
      "options": {
        "gutter": 24,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_vay5pdw1",
        "remoteOption": "option_vay5pdw1",
        "tableColumn": false,
        "subform": false
      },
      "key": "vay5pdw1",
      "model": "grid_vay5pdw1",
      "rules": []
    },
    {
      "name": "卡片",
      "type": "card",
      "mainIcon": "卡片",
      "typeIcon": "卡片",
      "icon": "icon-kapian",
      "group": "Layout",
      "groupSort": 5,
      "enableScopes": ["Component", "Table", "Page"],
      "list": [
        {
          "name": "栅格布局",
          "type": "grid",
          "mainIcon": "栅格布局",
          "typeIcon": "栅格布局",
          "icon": "icon-RectangleCopy",
          "group": "Layout",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "columns": [
            {
              "type": "col",
              "options": {
                "span": 12,
                "offset": 0,
                "push": 0,
                "pull": 0,
                "xs": 24,
                "sm": 12,
                "md": 12,
                "lg": 12,
                "xl": 12,
                "customClass": ""
              },
              "list": [
                {
                  "name": "Good Receiving No",
                  "type": "input",
                  "mainIcon": "单行文本",
                  "typeIcon": "多行文本",
                  "icon": "icon-input",
                  "group": "Text",
                  "groupSort": 1,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-input",
                  "options": {
                    "width": "",
                    "defaultValue": "",
                    "required": true,
                    "requiredMessage": "",
                    "dataType": "",
                    "dataTypeCheck": false,
                    "dataTypeMessage": "",
                    "pattern": "",
                    "patternCheck": false,
                    "patternMessage": "",
                    "validatorCheck": true,
                    "validator": "const page_status = this.getParamsVariables('page_status');\n\nif (page_status === 'View' || !value) {\n    callback();\n    return;\n}\n\ndb.collection(\"goods_receiving\")\n    .where({ gr_no: value })\n    .get()\n    .then(response => {\n        const matchingGRno = response.data || [];\n\n        if (matchingGRno.length === 0) {\n            callback();\n            return;\n        }\n\n        if (page_status === 'Edit') {\n            const currentGRno = this.getParamsVariables('goods_receiving_no');\n            const isSameGRno = matchingGRno.some(gr_no => gr_no.id === currentGRno);\n            callback(isSameGRno ? undefined : 'Good receiving number already exists.');\n        } else {\n            callback('Good receiving number already exists.');\n        }\n    })\n    .catch(error => {\n        console.error(\"Error checking good receiving number:\", error);\n        callback(\"Error validating good receiving number.\");\n    });",
                    "placeholder": "",
                    "customClass": "",
                    "disabled": true,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "showPassword": false,
                    "clearable": false,
                    "maxlength": "",
                    "showWordLimit": false,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_39v1pbs7",
                    "remoteOption": "option_39v1pbs7",
                    "tableColumn": false,
                    "subform": false,
                    "dynamicValueType": "fx",
                    "isDynamicValue": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "39v1pbs7",
                  "model": "gr_no",
                  "rules": [
                    {
                      "required": true,
                      "message": ""
                    },
                    {
                      "func": "const page_status = this.getParamsVariables('page_status');\n\nif (page_status === 'View' || !value) {\n    callback();\n    return;\n}\n\ndb.collection(\"goods_receiving\")\n    .where({ gr_no: value })\n    .get()\n    .then(response => {\n        const matchingGRno = response.data || [];\n\n        if (matchingGRno.length === 0) {\n            callback();\n            return;\n        }\n\n        if (page_status === 'Edit') {\n            const currentGRno = this.getParamsVariables('goods_receiving_no');\n            const isSameGRno = matchingGRno.some(gr_no => gr_no.id === currentGRno);\n            callback(isSameGRno ? undefined : 'Good receiving number already exists.');\n        } else {\n            callback('Good receiving number already exists.');\n        }\n    })\n    .catch(error => {\n        console.error(\"Error checking good receiving number:\", error);\n        callback(\"Error validating good receiving number.\");\n    });"
                    }
                  ]
                },
                {
                  "name": "Received By",
                  "type": "input",
                  "mainIcon": "单行文本",
                  "typeIcon": "多行文本",
                  "icon": "icon-input",
                  "group": "Text",
                  "groupSort": 1,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-input",
                  "options": {
                    "width": "",
                    "defaultValue": "",
                    "required": false,
                    "requiredMessage": "",
                    "dataType": "",
                    "dataTypeCheck": false,
                    "dataTypeMessage": "",
                    "pattern": "",
                    "patternCheck": false,
                    "patternMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "placeholder": "",
                    "customClass": "",
                    "disabled": true,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "showPassword": false,
                    "clearable": false,
                    "maxlength": "",
                    "showWordLimit": false,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_3smiy6bm",
                    "remoteOption": "option_3smiy6bm",
                    "tableColumn": false,
                    "subform": false,
                    "dynamicValueFx": "{{global:nickname}}",
                    "dynamicValueType": "fx",
                    "isDynamicValue": true
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "3smiy6bm",
                  "model": "gr_received_by",
                  "rules": []
                },
                {
                  "name": "Received Date",
                  "type": "date",
                  "mainIcon": "日期",
                  "typeIcon": "日期",
                  "icon": "icon-date",
                  "group": "DateTime",
                  "groupSort": 1,
                  "enableScopes": ["Component", "Table", "Page"],
                  "options": {
                    "defaultValue": "",
                    "readonly": false,
                    "disabled": false,
                    "editable": false,
                    "clearable": true,
                    "placeholder": "",
                    "startPlaceholder": "",
                    "endPlaceholder": "",
                    "type": "timestamp",
                    "timeStampType": "timestamp",
                    "format": "YYYY-MM-DD",
                    "timestamp": false,
                    "required": true,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "width": "100%",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_doxroj2i",
                    "remoteOption": "option_doxroj2i",
                    "tableColumn": false,
                    "subform": false,
                    "dynamicValueFx": "new Date().toISOString().split('T')[0];",
                    "dynamicValueType": "fx",
                    "isDynamicValue": true
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "doxroj2i",
                  "model": "gr_date",
                  "rules": [
                    {
                      "required": true,
                      "message": ""
                    }
                  ]
                }
              ],
              "key": "orqnw7rn"
            }
          ],
          "options": {
            "gutter": 0,
            "justify": "start",
            "align": "top",
            "customClass": "",
            "hidden": false,
            "flex": true,
            "responsive": true,
            "remoteFunc": "func_hwezjncd",
            "remoteOption": "option_hwezjncd",
            "tableColumn": false,
            "subform": false,
            "dynamicValueType": "fx",
            "isDynamicValue": false,
            "defaultValue": ""
          },
          "key": "hwezjncd",
          "model": "grid_hwezjncd",
          "rules": []
        }
      ],
      "options": {
        "title": "Good Receiving Details",
        "showHeader": true,
        "bordered": true,
        "customClass": "",
        "shadow": "always",
        "width": "",
        "padding": "10px",
        "hidden": false,
        "remoteFunc": "func_k2y22vqc",
        "remoteOption": "option_k2y22vqc",
        "tableColumn": false,
        "subform": false
      },
      "key": "k2y22vqc",
      "model": "card_good_receiving",
      "rules": []
    },
    {
      "name": "Item Table",
      "type": "table",
      "mainIcon": "子表单",
      "typeIcon": "子表单",
      "icon": "icon-table",
      "group": "Container",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": [],
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": false,
        "dataBind": true,
        "disabled": false,
        "required": false,
        "validatorCheck": false,
        "validator": "",
        "paging": false,
        "pageSize": 5,
        "isAdd": false,
        "isDelete": true,
        "showControl": true,
        "virtualTable": true,
        "sortable": true,
        "tip": "",
        "remoteFunc": "func_eg6l4ywi",
        "remoteOption": "option_eg6l4ywi",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onRowAdd": "",
        "onRowRemove": "",
        "onPageChange": ""
      },
      "tableColumns": [
        {
          "name": "PO Number",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_buo2261t",
            "remoteOption": "option_buo2261t",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "buo2261t",
          "model": "line_po_no",
          "rules": []
        },
        {
          "name": "Item Name",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": true,
            "clearable": false,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_rz61wg7i",
            "filterable": false,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "id",
              "label": "material_name",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_rz61wg7i",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "Item:Table:1901546842240438273",
              "rules": {
                "collectionId": "1901546842240438273",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            }
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "rz61wg7i",
          "model": "item_id",
          "rules": []
        },
        {
          "name": "Item Description",
          "type": "textarea",
          "mainIcon": "多行文本",
          "typeIcon": "多行文本(1)",
          "icon": "icon-diy-com-textarea",
          "group": "Text",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "disabled": true,
            "pattern": "",
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "rows": 1,
            "autosize": true,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_do8s9z7n",
            "remoteOption": "option_do8s9z7n",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "do8s9z7n",
          "model": "item_desc",
          "rules": []
        },
        {
          "name": "Ordered Qty",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_buo2261t",
            "remoteOption": "option_buo2261t",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "55xg6m76",
          "model": "ordered_qty",
          "rules": []
        },
        {
          "name": "To Received Qty",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_va8vtvdu",
            "remoteOption": "option_va8vtvdu",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "va8vtvdu",
          "model": "to_received_qty",
          "rules": []
        },
        {
          "name": "Received Qty",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": true,
            "validator": "\nconst { table_gr } = this.getValues()\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[1];\n\nconst materialId = table_gr[index].item_id\n\nconst to_received_qty = parseFloat(table_gr[index].to_received_qty || 0);\n\nif (!window.validationState) {\n  window.validationState = {};\n}\n\nconst parsedValue = parseFloat(value);\n\n(async()=>{\n  console.log('materialid',materialId)\n  if(materialId){\n    const {data} = await db.collection('Item').where({id:materialId}).get()\n    console.log('data',data)\n    if(( to_received_qty*(100 +data[0].over_receive_tolerance)/100)<parsedValue){\n      window.validationState[index] = false;\n      callback(\"Quantity is not enough to receive\");\n      return\n    }\n    \n  }\n  window.validationState[index] = true;\n  callback();\n})()\n ",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": false,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 3,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_jjn7k5zf",
            "remoteOption": "option_jjn7k5zf",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "jjn7k5zf",
          "model": "received_qty",
          "rules": [
            {
              "func": "\nconst { table_gr } = this.getValues()\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[1];\n\nconst materialId = table_gr[index].item_id\n\nconst to_received_qty = parseFloat(table_gr[index].to_received_qty || 0);\n\nif (!window.validationState) {\n  window.validationState = {};\n}\n\nconst parsedValue = parseFloat(value);\n\n(async()=>{\n  console.log('materialid',materialId)\n  if(materialId){\n    const {data} = await db.collection('Item').where({id:materialId}).get()\n    console.log('data',data)\n    if(( to_received_qty*(100 +data[0].over_receive_tolerance)/100)<parsedValue){\n      window.validationState[index] = false;\n      callback(\"Quantity is not enough to receive\");\n      return\n    }\n    \n  }\n  window.validationState[index] = true;\n  callback();\n})()\n "
            }
          ]
        },
        {
          "name": "UOM",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": true,
            "clearable": true,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_j4mfie3c",
            "filterable": true,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "id",
              "label": "uom_name",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_j4mfie3c",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "UOM:Table:1901805375573839874",
              "rules": {
                "collectionId": "1901805375573839874",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "value",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "hideLabel": true
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "j4mfie3c",
          "model": "item_uom",
          "rules": []
        },
        {
          "name": "Target Location",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": false,
            "clearable": false,
            "placeholder": "",
            "required": true,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_lcknt0vr",
            "filterable": false,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "id",
              "label": "bin_location_combine",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_lcknt0vr",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 0,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "Bin Location:Table:1902282127538507778",
              "rules": {
                "collectionId": "1902282127538507778",
                "list": [
                  {
                    "id": 1746164924902,
                    "parentId": 1746164924903,
                    "isTop": true,
                    "type": "branch",
                    "operator": "all",
                    "prop": "",
                    "valueType": "",
                    "value": "",
                    "level": 1,
                    "children": [
                      {
                        "id": 1746164933958,
                        "parentId": 1746164924902,
                        "isTop": false,
                        "prop": "plant_id",
                        "operator": "numberEqual",
                        "valueType": "field",
                        "value": "{{value:plant_id}}",
                        "type": "leaf",
                        "level": 2,
                        "propLabel": "Plant",
                        "valueLabel": "",
                        "operatorLabel": "等于",
                        "valueTypeLabel": "字段"
                      },
                      {
                        "id": 1746164924904,
                        "parentId": 1746164924902,
                        "isTop": false,
                        "prop": "bin_status",
                        "operator": "numberEqual",
                        "valueType": "value",
                        "value": 1,
                        "type": "leaf",
                        "level": 2,
                        "propLabel": "Active",
                        "valueLabel": "",
                        "operatorLabel": "等于",
                        "valueTypeLabel": "值"
                      }
                    ]
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "hideLabel": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "xz4g12yl",
          "model": "location_id",
          "rules": [
            {
              "required": true,
              "message": ""
            }
          ]
        },
        {
          "name": "Batch Number",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": true,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": true,
            "validator": "db.collection(\"batch\")\n  .where({\n    batch_number: value\n  })\n  .get()\n  .then(response => {\n    const matchingBatches = response.data || [];\n    console.log(\"Matching batches:\", matchingBatches);\n    \n    if (matchingBatches.length > 0 && value) {\n      callback('Batch number already exists');\n    } else {\n      callback();\n    }\n  })\n  .catch(error => {\n    console.error(\"Error checking batch number:\", error);\n    callback('Error checking batch number');\n  });",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_5anrlkf1",
            "remoteOption": "option_5anrlkf1",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "5anrlkf1",
          "model": "item_batch_no",
          "rules": [
            {
              "required": true,
              "message": ""
            },
            {
              "func": "db.collection(\"batch\")\n  .where({\n    batch_number: value\n  })\n  .get()\n  .then(response => {\n    const matchingBatches = response.data || [];\n    console.log(\"Matching batches:\", matchingBatches);\n    \n    if (matchingBatches.length > 0 && value) {\n      callback('Batch number already exists');\n    } else {\n      callback();\n    }\n  })\n  .catch(error => {\n    console.error(\"Error checking batch number:\", error);\n    callback('Error checking batch number');\n  });"
            }
          ]
        },
        {
          "name": "Inventory Category",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": false,
            "clearable": false,
            "placeholder": "",
            "required": true,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_h7mic9uc",
            "filterable": false,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "dict_key",
              "label": "dict_key",
              "cascade": "",
              "children": "children",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_h7mic9uc",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "系统字典(勿删):Table:1897577528487428098",
              "rules": {
                "collectionId": "1897577528487428098",
                "list": [
                  {
                    "id": 1745926507011,
                    "parentId": 1745926507012,
                    "isTop": true,
                    "type": "branch",
                    "operator": "all",
                    "prop": "",
                    "valueType": "",
                    "value": "",
                    "level": 1,
                    "children": [
                      {
                        "id": 1723795236686,
                        "parentId": 1745926507011,
                        "isTop": false,
                        "prop": "parent_id",
                        "operator": "numberEqual",
                        "valueType": "value",
                        "value": "1915303560812322818",
                        "type": "leaf",
                        "level": 2,
                        "propLabel": "父主键",
                        "valueLabel": "",
                        "operatorLabel": "等于",
                        "valueTypeLabel": "值"
                      },
                      {
                        "id": 1745926507013,
                        "parentId": 1745926507011,
                        "isTop": false,
                        "prop": "dict_key",
                        "operator": "notEqual",
                        "valueType": "value",
                        "value": "In Transit",
                        "type": "leaf",
                        "level": 2,
                        "propLabel": "字典值",
                        "valueLabel": "",
                        "operatorLabel": "不等于",
                        "valueTypeLabel": "值"
                      },
                      {
                        "id": 1745926507014,
                        "parentId": 1745926507011,
                        "isTop": false,
                        "prop": "dict_key",
                        "operator": "notEqual",
                        "valueType": "value",
                        "value": "Reserved",
                        "type": "leaf",
                        "level": 2,
                        "propLabel": "字典值",
                        "valueLabel": "",
                        "operatorLabel": "不等于",
                        "valueTypeLabel": "值"
                      }
                    ]
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            }
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "h7mic9uc",
          "model": "inv_category",
          "rules": [
            {
              "required": true,
              "message": ""
            }
          ]
        },
        {
          "name": "PO ID",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_buo2261t",
            "remoteOption": "option_buo2261t",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "aqefadi5",
          "model": "line_po_id",
          "rules": []
        },
        {
          "name": "Unit Price",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": false,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "precision": 2,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_k32j6oqa",
            "remoteOption": "option_k32j6oqa",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "k32j6oqa",
          "model": "unit_price",
          "rules": []
        },
        {
          "name": "Total Price",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": false,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "precision": 2,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_k32j6oqa",
            "remoteOption": "option_k32j6oqa",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "mb7csj2e",
          "model": "total_price",
          "rules": []
        },
        {
          "name": "Base Qty",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": false,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_k32j6oqa",
            "remoteOption": "option_k32j6oqa",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "4lpm647k",
          "model": "base_qty",
          "rules": []
        },
        {
          "name": "Base UOM",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": false,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_k32j6oqa",
            "remoteOption": "option_k32j6oqa",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "h67hgchr",
          "model": "base_uom_id",
          "rules": []
        },
        {
          "name": "Costing Method",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_2f7t6dzd",
            "remoteOption": "option_2f7t6dzd",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "2f7t6dzd",
          "model": "item_costing_method",
          "rules": []
        },
        {
          "name": "Return Quantity",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": false,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_k32j6oqa",
            "remoteOption": "option_k32j6oqa",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "wubjj96n",
          "model": "return_quantity",
          "rules": []
        }
      ],
      "key": "eg6l4ywi",
      "model": "table_gr",
      "rules": []
    },
    {
      "name": "自动布局",
      "type": "flex",
      "el": "su-fm-flex",
      "mainIcon": "自动布局",
      "typeIcon": "自动布局",
      "icon": "icon-zhediemianban",
      "group": "Design",
      "groupSort": 6,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "title": "布局",
        "customClass": "",
        "hidden": false,
        "recursive": false,
        "recursiveStyleFx": "",
        "slotTarget": "",
        "defaultValue": "",
        "flexDirection": "column",
        "flexWrap": "nowrap",
        "alignItems": "flex-end",
        "justifyContent": "flex-end",
        "hGap": "",
        "vGap": "",
        "grid": {
          "row": {
            "value": "",
            "visible": true
          },
          "col": {
            "value": "",
            "visible": true
          },
          "use": false
        },
        "padding": ["10px", "", "", ""],
        "margin": ["", "", "", ""],
        "boxSizing": "border-box",
        "width": "",
        "height": "70px",
        "radius": ["", "", "", ""],
        "position": "",
        "positions": ["", "", "", ""],
        "zIndex": "",
        "flex": "",
        "flexGrow": "",
        "flexShrink": "",
        "fills": [
          {
            "type": "color",
            "value": "#ffffffff",
            "mode": "aspectFill",
            "rotate": "",
            "visible": true
          }
        ],
        "borders": [],
        "effects": [],
        "states": [],
        "hoverClass": "",
        "overflow": "",
        "styleFx": "",
        "behave": "",
        "remoteFunc": "func_edmgvqrs",
        "remoteOption": "option_edmgvqrs",
        "tableColumn": false,
        "subform": false,
        "props": {},
        "datasource": {
          "source": null,
          "rules": {
            "collectionId": "",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "remote": true,
        "remoteType": "datasource",
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        }
      },
      "list": [],
      "events": {
        "onClick": ""
      },
      "key": "2ha7wvip",
      "model": "flex_2ha7wvip",
      "rules": []
    },
    {
      "name": "自动布局",
      "type": "flex",
      "el": "su-fm-flex",
      "mainIcon": "自动布局",
      "typeIcon": "自动布局",
      "icon": "icon-zhediemianban",
      "group": "Design",
      "groupSort": 6,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "title": "布局",
        "customClass": "fixbutton",
        "hidden": false,
        "recursive": false,
        "recursiveStyleFx": "",
        "slotTarget": "",
        "defaultValue": "",
        "flexDirection": "row",
        "flexWrap": "nowrap",
        "alignItems": "flex-end",
        "justifyContent": "flex-end",
        "hGap": "",
        "vGap": "",
        "grid": {
          "row": {
            "value": "",
            "visible": true
          },
          "col": {
            "value": "",
            "visible": true
          },
          "use": false
        },
        "padding": ["10px", "", "", ""],
        "margin": ["", "", "", ""],
        "boxSizing": "border-box",
        "width": "60%",
        "height": "",
        "radius": ["", "", "", ""],
        "position": "",
        "positions": ["", "", "", ""],
        "zIndex": "",
        "flex": "",
        "flexGrow": "",
        "flexShrink": "",
        "fills": [
          {
            "type": "color",
            "value": "#ffffffff",
            "mode": "aspectFill",
            "rotate": "",
            "visible": true
          }
        ],
        "borders": [],
        "effects": [],
        "states": [],
        "hoverClass": "",
        "overflow": "",
        "styleFx": "",
        "behave": "",
        "remoteFunc": "func_edmgvqrs",
        "remoteOption": "option_edmgvqrs",
        "tableColumn": false,
        "subform": false,
        "props": {},
        "datasource": {
          "source": null,
          "rules": {
            "collectionId": "",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "remote": true,
        "remoteType": "datasource",
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "paging_enabled": 0,
        "paging_way": "Pagination",
        "page_size": 10,
        "more_fields": []
      },
      "list": [
        {
          "name": "Draft",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "margin",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": false,
            "buttonSize": "default",
            "buttonType": "info",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Save as Draft",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_3se4gyp7",
            "remoteOption": "option_3se4gyp7",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": "plc4vfy4"
          },
          "key": "bzxb5j8w",
          "model": "button_save_as_draft",
          "rules": []
        },
        {
          "name": "Completed",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "margin marginright",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": false,
            "buttonSize": "default",
            "buttonType": "success",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Completed",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_3se4gyp7",
            "remoteOption": "option_3se4gyp7",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": "qdf0q1le"
          },
          "key": "3se4gyp7",
          "model": "button_save_as_comp",
          "rules": []
        }
      ],
      "events": {
        "onClick": ""
      },
      "key": "edmgvqrs",
      "model": "flex_button",
      "rules": []
    },
    {
      "name": "Address",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_gc1c0jar",
        "remoteOption": "option_gc1c0jar",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "tnqld4bo",
      "model": "billing_address_line_1",
      "rules": []
    },
    {
      "name": "Address Line 2",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_gc1c0jar",
        "remoteOption": "option_gc1c0jar",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "1dbwrvtp",
      "model": "billing_address_line_2",
      "rules": []
    },
    {
      "name": "Address Line 3",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_gc1c0jar",
        "remoteOption": "option_gc1c0jar",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "u8ph1gav",
      "model": "billing_address_line_3",
      "rules": []
    },
    {
      "name": "Address Line 4",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_gc1c0jar",
        "remoteOption": "option_gc1c0jar",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "vcgn2mxu",
      "model": "billing_address_line_4",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "City",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1aixnh29",
                "remoteOption": "option_1aixnh29",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "9v3crvjv",
              "model": "billing_address_city",
              "rules": []
            },
            {
              "name": "Postal Code",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1aixnh29",
                "remoteOption": "option_1aixnh29",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "vpjd1dai",
              "model": "billing_postal_code",
              "rules": []
            }
          ],
          "key": "ig92q6s6"
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "State",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1aixnh29",
                "remoteOption": "option_1aixnh29",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "fip786vw",
              "model": "billing_address_state",
              "rules": []
            },
            {
              "name": "Country / Region",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1aixnh29",
                "remoteOption": "option_1aixnh29",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "9obxxry8",
              "model": "billing_address_country",
              "rules": []
            }
          ],
          "key": "ydggvwie"
        }
      ],
      "options": {
        "gutter": 0,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_05c4x2br",
        "remoteOption": "option_05c4x2br",
        "tableColumn": false,
        "subform": false
      },
      "key": "dkbeo4gf",
      "model": "grid_dkbeo4gf",
      "rules": []
    },
    {
      "name": "Address",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_gc1c0jar",
        "remoteOption": "option_gc1c0jar",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "60zzypbv",
      "model": "shipping_address_line_1",
      "rules": []
    },
    {
      "name": "Address Line 2",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_gc1c0jar",
        "remoteOption": "option_gc1c0jar",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "k940oxnv",
      "model": "shipping_address_line_2",
      "rules": []
    },
    {
      "name": "Address Line 3",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_gc1c0jar",
        "remoteOption": "option_gc1c0jar",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "58s2nw54",
      "model": "shipping_address_line_3",
      "rules": []
    },
    {
      "name": "Address Line 4",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_gc1c0jar",
        "remoteOption": "option_gc1c0jar",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "8pwtfrwe",
      "model": "shipping_address_line_4",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "City",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1aixnh29",
                "remoteOption": "option_1aixnh29",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "it3xxyd1",
              "model": "shipping_address_city",
              "rules": []
            },
            {
              "name": "Postal Code",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1aixnh29",
                "remoteOption": "option_1aixnh29",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "n6j5bdwc",
              "model": "shipping_postal_code",
              "rules": []
            }
          ],
          "key": "jecrpiaj",
          "rules": []
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "State",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1aixnh29",
                "remoteOption": "option_1aixnh29",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "9208wmzc",
              "model": "shipping_address_state",
              "rules": []
            },
            {
              "name": "Country / Region",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1aixnh29",
                "remoteOption": "option_1aixnh29",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "sxa4a34c",
              "model": "shipping_address_country",
              "rules": []
            }
          ],
          "key": "zxb1z2zp"
        }
      ],
      "options": {
        "gutter": 0,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_05c4x2br",
        "remoteOption": "option_05c4x2br",
        "tableColumn": false,
        "subform": false
      },
      "key": "hvvrzsme",
      "model": "grid_hvvrzsme",
      "rules": []
    }
  ],
  "config": {
    "labelWidth": 160,
    "labelPosition": "left",
    "size": "default",
    "customClass": "padding",
    "ui": "element",
    "layout": "horizontal",
    "width": "100%",
    "hideLabel": false,
    "hideErrorMessage": false,
    "eventScript": [
      {
        "key": "onFormChange",
        "name": "onFormChange",
        "type": "js",
        "func": ""
      },
      {
        "key": "mounted",
        "name": "mounted",
        "func": "const generatePrefix = (runNumber, now, prefixData) => {\n    let generated = prefixData.current_prefix_config;\n    generated = generated.replace(\"prefix\", prefixData.prefix_value);\n    generated = generated.replace(\"suffix\", prefixData.suffix_value);\n    generated = generated.replace(\"month\", String(now.getMonth() + 1).padStart(2, \"0\"));\n    generated = generated.replace(\"day\", String(now.getDate()).padStart(2, '0'));\n    generated = generated.replace(\"year\", now.getFullYear());\n    generated = generated.replace(\"running_number\", String(runNumber).padStart(prefixData.padding_zeroes, '0'));\n    return generated;\n};\n\nconst checkUniqueness = async (generatedPrefix) => {\n    const existingDoc = await db.collection(\"goods_receiving\")\n        .where({gr_no: generatedPrefix})\n        .get();\n    return existingDoc.data[0] ? false : true;\n};\n\nconst findUniquePrefix = async (prefixData) => {\n    const now = new Date();\n    let prefixToShow;\n    let runningNumber = prefixData.running_number;\n    let isUnique = false;\n    let maxAttempts = 10;\n    let attempts = 0;\n\n    while (!isUnique && attempts < maxAttempts) {\n        attempts++;\n        prefixToShow = await generatePrefix(runningNumber, now, prefixData);\n        isUnique = await checkUniqueness(prefixToShow);\n        if (!isUnique) {\n            runningNumber++;\n        }\n    }\n    \n    if (!isUnique) {\n        throw new Error(\"Could not generate a unique Goods Receiving number after maximum attempts\");\n    }\n    return { prefixToShow, runningNumber };\n};\n\nconst setPrefix = async (organizationId) => {\n    const prefixData = await getPrefixData(organizationId);\n\n    const { prefixToShow } = await findUniquePrefix(prefixData);\n\n    this.setData({ 'gr_no': prefixToShow });\n}\n\nconst getPrefixData = async (organizationId) => {\n    const prefixEntry = await db.collection(\"prefix_configuration\").where({ document_types: \"Goods Receiving\" , is_deleted: 0, organization_id: organizationId}).get()\n    const prefixData = await prefixEntry.data[0];\n\n    if(prefixData.is_active === 0){\n        this.disabled(['gr_no'], false)\n    }\n\n    return prefixData;\n}\n\nconst displayAddress = async () => {\n    const data = this.getValues();\n\n    if(data.gr_billing_name || data.gr_billing_cp || data.gr_billing_address || data.gr_shipping_address ){\n        this.display('address_grid');\n    }\n}\n\nconst showStatusHTML = async (status) => {\n    switch(status) {\n        case 'Draft':\n            this.display([\n                'draft_status'\n            ])\n            break;\n        case 'Completed':\n            this.display([\n                'completed_status'\n            ])\n            break;\n    }\n}\n\nconst isViewMode = async () => {\n    this.hide([\n        'link_billing_address', \n        'link_shipping_address',\n        'button_save_as_draft',\n        'button_save_as_comp',\n        'purchase_order_id'\n    ]);\n\n    this.display(['purchase_order_number']);\n}\n\n(async () => {\n    try {\n        const status = await this.getValue('gr_status');\n    \n        const pageStatus = this.isAdd ? 'Add' :\n        this.isEdit ? 'Edit' :\n        this.isView ? 'View' :\n        (() => { throw new Error('Invalid page status') })();\n    \n        let organizationId = this.getVarGlobal('deptParentId');\n        if(organizationId === '0'){\n            organizationId = this.getVarSystem('deptIds').split(',')[0];\n        }\n    \n        this.setData({'organization_id': organizationId, 'page_status': pageStatus});\n    \n    \n        switch(pageStatus){\n            case 'Add':\n                this.display(['draft_status']);\n                await setPrefix(organizationId);\n                break;\n            \n            case \"Edit\":\n                await getPrefixData(organizationId);\n                await displayAddress();\n                await showStatusHTML(status);\n                break;\n    \n            case \"View\":\n                await displayAddress();\n                await showStatusHTML(status);\n                await isViewMode();\n                break;\n        }\n    } catch (error) {\n        this.$message.error(error)\n    }\n\n})();",
        "type": "js"
      },
      {
        "key": "refresh",
        "name": "refresh",
        "func": ""
      },
      {
        "key": "onBeforeAdd",
        "name": "onBeforeAdd",
        "func": ""
      },
      {
        "key": "onAfterAdd",
        "name": "onAfterAdd",
        "func": "",
        "type": "js"
      },
      {
        "key": "onBeforeUpdate",
        "name": "onBeforeUpdate",
        "func": ""
      },
      {
        "key": "onAfterUpdate",
        "name": "onAfterUpdate",
        "func": ""
      },
      {
        "key": "4tlscp1c",
        "name": "GRLineItem",
        "func": "console.log(\"arguments\", arguments[0]);\nconst page_status = this.getValue(\"page_status\");\n\n// Check if data is ready and contains purchase_order_id\nconst checkAndProcessData = () => {\n  console.log(\"checkAndProcessData\");\n  const data = this.getValues();\n\n  // If no data or purchase_order_id yet, try again after a short delay\n  if (!data || !data.purchase_order_id) {\n    setTimeout(checkAndProcessData, 500);\n    return;\n  }\n\n  // Once we have the purchase_order_id, proceed with processing\n  const purchaseOrderIds = Array.isArray(data.purchase_order_id)\n    ? data.purchase_order_id\n    : [data.purchase_order_id];\n\n  const goodsReceivingId = this.getValue(\"id\");\n\n  // Now call the main processing function\n  processGoodsReceiving(purchaseOrderIds, goodsReceivingId);\n};\n\n// Main function to check PO change and load data\nconst processGoodsReceiving = async (purchaseOrderIds, goodsReceivingId) => {\n  try {\n    console.log(\"Processing Purchase Order IDs:\", purchaseOrderIds);\n\n    let hasPOChanged = true;\n    let existingGRData = null;\n\n    // Check if this is an existing GR and if PO has changed\n    if (goodsReceivingId) {\n      try {\n        const result = await db\n          .collection(\"goods_receiving\")\n          .where({ id: goodsReceivingId })\n          .get();\n\n        if (result.data && result.data.length > 0) {\n          existingGRData = result.data[0];\n\n          // Check if PO list has changed\n          const existingPOIds = Array.isArray(existingGRData.purchase_order_id)\n            ? existingGRData.purchase_order_id\n            : [existingGRData.purchase_order_id];\n\n          // Check if arrays have same length and same elements (order doesn't matter)\n          hasPOChanged =\n            existingPOIds.length !== purchaseOrderIds.length ||\n            !existingPOIds.every((id) => purchaseOrderIds.includes(id));\n\n          console.log(`PO changed: ${hasPOChanged ? \"Yes\" : \"No\"}`);\n\n          // If we're in Edit mode and have existing data, we'll use existing data\n          if (!hasPOChanged) {\n            console.log(\"Using existing GR data\");\n          }\n        } else {\n          console.warn(\n            \"Goods Receiving record not found with ID:\",\n            goodsReceivingId\n          );\n        }\n      } catch (error) {\n        console.error(\"Error checking existing goods receiving:\", error);\n        // Continue as if PO has changed for safety\n        hasPOChanged = true;\n      }\n    }\n\n    // Fetch all PO numbers for the multiple POs\n    const poNumbersPromises = purchaseOrderIds.map(async (poId) => {\n      try {\n        const poResult = await db\n          .collection(\"purchase_order\")\n          .where({ id: poId })\n          .get();\n\n        if (poResult.data && poResult.data.length > 0) {\n          return poResult.data[0].purchase_order_no;\n        }\n        return null;\n      } catch (error) {\n        console.error(`Error fetching PO number for ${poId}:`, error);\n        return null;\n      }\n    });\n\n    const poNumbers = await Promise.all(poNumbersPromises);\n    const validPoNumbers = poNumbers.filter(Boolean);\n\n    // Set the combined PO numbers in purchase_order_number field\n    if (validPoNumbers.length > 0) {\n      this.setData({\n        purchase_order_number: validPoNumbers.join(\", \"),\n      });\n    }\n\n    // Only proceed if this is a new record or PO has changed\n    if (hasPOChanged) {\n      await this.setData({ table_gr: [] });\n\n      // Build the final table items array\n      let allGrItems = [];\n\n      // Process each PO ID sequentially to ensure proper data handling\n      for (const purchaseOrderId of purchaseOrderIds) {\n        console.log(`Processing PO ID: ${purchaseOrderId}`);\n\n        // Get all existing goods receiving data for this purchase order\n        const grResult = await db\n          .collection(\"goods_receiving\")\n          .where({\n            purchase_order_id: purchaseOrderId,\n            gr_status: \"Completed\",\n          })\n          .get();\n\n        const GRData = grResult.data || [];\n\n        // Get source items from the purchase order\n        let sourceItems = [];\n        let purchaseOrderNo = \"\";\n        // Fetch PO data to get line items\n        try {\n          const poResult = await db\n            .collection(\"purchase_order\")\n            .where({ id: purchaseOrderId })\n            .get();\n\n          if (poResult.data && poResult.data.length > 0) {\n            sourceItems = poResult.data[0].table_po || [];\n            purchaseOrderNo = poResult.data[0].purchase_order_no;\n          } else {\n            console.warn(`Purchase order with ID ${purchaseOrderId} not found`);\n            continue; // Skip to next PO\n          }\n        } catch (error) {\n          console.error(`Error fetching PO ${purchaseOrderId}:`, error);\n          continue; // Skip to next PO\n        }\n\n        if (!Array.isArray(sourceItems) || sourceItems.length === 0) {\n          console.warn(\n            `No source items found in purchase order ${purchaseOrderId}`\n          );\n          continue; // Skip to next PO\n        }\n\n        // Calculate accumulated received quantities for each item\n        const accumulatedQty = {};\n\n        // First initialize quantities for all items\n        sourceItems.forEach((item) => {\n          if (item && item.item_id) {\n            accumulatedQty[item.item_id] = 0;\n          }\n        });\n\n        // Then accumulate from all GRs\n        GRData.forEach((grRecord) => {\n          if (Array.isArray(grRecord.table_gr)) {\n            grRecord.table_gr.forEach((grItem) => {\n              const itemId = grItem.item_id;\n              if (itemId && accumulatedQty.hasOwnProperty(itemId)) {\n                const qty = parseFloat(grItem.received_qty || 0);\n                if (!isNaN(qty)) {\n                  accumulatedQty[itemId] += qty;\n                }\n              }\n            });\n          }\n        });\n\n        console.log(\n          `Accumulated quantities for PO ${purchaseOrderId}:`,\n          accumulatedQty\n        );\n\n        // Process all items for this PO concurrently\n        const itemPromises = sourceItems.map(async (sourceItem) => {\n          const itemId = sourceItem.item_id || \"\";\n          if (!itemId) return null;\n\n          try {\n            const orderedQty = parseFloat(sourceItem.quantity || 0);\n            const receivedSoFar = accumulatedQty[itemId] || 0;\n            const remainingQty = Math.max(0, orderedQty - receivedSoFar);\n\n            // Check item properties\n            const res = await db.collection(\"Item\").where({ id: itemId }).get();\n\n            const itemData = res.data && res.data[0];\n\n            if (\n              itemData &&\n              itemData.stock_control !== 0 &&\n              (itemData.show_receiving !== 0 || !itemData.show_receiving)\n            ) {\n              // Generate a stable key to avoid unnecessary UI refreshes\n              const stableKey = `${purchaseOrderId}-${itemId}-${Date.now()\n                .toString(36)\n                .substr(0, 4)}`;\n\n              const batchManagementEnabled =\n                itemData.item_batch_management === 1 ||\n                itemData.item_batch_management === true ||\n                itemData.item_batch_management === \"1\";\n\n              let batch_number = \"\";\n\n              if (batchManagementEnabled) {\n                batch_number = \"\";\n              } else {\n                batch_number = \"-\";\n              }\n\n              return {\n                line_po_no: purchaseOrderNo,\n                line_po_id: purchaseOrderId,\n                item_id: itemId,\n                item_desc: sourceItem.item_desc || \"\",\n                ordered_qty: orderedQty,\n                to_received_qty: remainingQty,\n                received_qty: 0,\n                item_uom: sourceItem.quantity_uom || \"\",\n                unit_price: sourceItem.unit_price || 0,\n                total_price: sourceItem.po_amount || 0,\n                fm_key: stableKey,\n                item_costing_method: itemData.material_costing_method,\n                item_batch_no: batch_number,\n                inv_category: \"Unrestricted\",\n                po_line_item:\n                  sourceItem.line_item || sourceItem.po_line_item || null,\n              };\n            }\n\n            return null;\n          } catch (error) {\n            console.error(\n              `Error processing item ${itemId} from PO ${purchaseOrderId}:`,\n              error\n            );\n            return null;\n          }\n        });\n\n        // Wait for all item processing to complete for this PO\n        const processedItems = await Promise.all(itemPromises);\n        const filteredItems = processedItems.filter((item) => item !== null);\n\n        // Add processed items from this PO to the all items array\n        allGrItems = [...allGrItems, ...filteredItems];\n      }\n\n      // Build the final table\n      const newTableGr = allGrItems.map((item) => ({\n        line_po_no: item.line_po_no,\n        line_po_id: item.line_po_id,\n        item_id: item.item_id,\n        item_desc: item.item_desc,\n        ordered_qty: item.ordered_qty,\n        to_received_qty: item.to_received_qty,\n        received_qty: item.received_qty,\n        item_uom: item.item_uom,\n        unit_price: item.unit_price,\n        total_price: item.total_price,\n        fm_key: item.fm_key,\n        item_costing_method: item.item_costing_method,\n        item_batch_no: item.item_batch_no,\n        inv_category: \"Unrestricted\",\n        po_line_item: item.po_line_item,\n      }));\n\n      console.log(\"Final table_gr data:\", newTableGr);\n\n      // Update the table once with all processed items\n      await this.setData({\n        table_gr: newTableGr,\n      });\n\n      setTimeout(() => {\n        const table_gr = this.getValue(\"table_gr\");\n        table_gr.forEach((gr, index) => {\n          const path = `table_gr.${index}.item_batch_no`;\n          this.disabled(path, gr.item_batch_no !== \"\");\n        });\n      }, 100);\n    } else {\n      console.log(\"Skipping table_gr update as PO hasn't changed\");\n    }\n  } catch (error) {\n    console.error(\"Error in goods receiving process:\", error);\n  }\n};\n\nconst fake_purchase_order_id = this.getValue(\"fake_purchase_order_id\");\n\nif (fake_purchase_order_id && !Array.isArray(fake_purchase_order_id)) {\n  checkAndProcessData();\n}\n",
        "type": "js"
      },
      {
        "key": "8gaux35b",
        "name": "onChange_item",
        "func": "const page_status = this.getValue(\"page_status\");\nconst fieldData = arguments[0];\nconst rowIndex = fieldData.rowIndex;\n\ndb.collection(\"Item\")\n  .where({ id: fieldData.value })\n  .get()\n  .then((res) => {\n    console.log(\"res Junaaaa\", res);\n    const itemData = res.data[0];\n    if (itemData) {\n      const batchManagementEnabled =\n        itemData.item_batch_management === 1 ||\n        itemData.item_batch_management === true ||\n        itemData.item_batch_management === \"1\";\n\n      if (batchManagementEnabled) {\n        this.disabled(`table_gr.${rowIndex}.item_batch_no`, false);\n        if (page_status === \"Add\") {\n          this.setData({ [`table_gr.${rowIndex}.item_batch_no`]: \"\" });\n        }\n      } else {\n        this.disabled(`table_gr.${rowIndex}.item_batch_no`, true);\n        this.setData({[`table_gr.${rowIndex}.item_batch_no`]:\"-\"});\n      }\n      this.setData({\n        [`table_gr.${rowIndex}.item_costing_method`]:\n          itemData.material_costing_method,\n      });\n    } else {\n      this.disabled(`table_gr.${rowIndex}.item_batch_no`, true);\n      this.setData({[`table_gr.${rowIndex}.item_batch_no`]:\"-\"});\n    }\n  });",
        "type": "js"
      },
      {
        "key": "ber59qgc",
        "name": "onClick_manage_shipping_addr",
        "func": "const data = this.getValues();\n\nthis.routeLocation(\n    {\n    routeMode: \"dialog\",\n        routeInfo: {\n            source_id: \"1905102178127777793\",\n            name:\"Address\",\t\n        },\n    },\n    {   'address_purpose': 'Shipping',\n        'address_line1': data.shipping_address_line_1,\n        'address_line2': data.shipping_address_line_2,\n        'address_line3': data.shipping_address_line_3,\n        'address_line4': data.shipping_address_line_4,\n        'city': data.shipping_address_city,\n        'postal_code': data.shipping_postal_code,\n        'state': data.shipping_address_state,\n        'country': data.shipping_address_country,\n        'moduleName': 'gr'\n    }\n);\n",
        "type": "js",
        "rules": []
      },
      {
        "key": "dzx3ygtu",
        "name": "onChange_address",
        "func": "const data = this.getValues();\n\n// Reusable function to format address (now properly returning a Promise)\nconst formatAddress = (addressData, countryId, stateId) => {\n    return Promise.all([  // Added return here\n      db.collection('country').where({ id: countryId }).get(),\n      db.collection('state').where({ id: stateId }).get(),\n    ])\n    .then(([resCountry, resState]) => {\n        const countryName = resCountry?.data[0]?.country_name || '';\n        const stateName = resState?.data[0]?.state_name || '';\n    \n        const addressComponents = [\n          addressData.line1,\n          addressData.line2,\n          addressData.line3,\n          addressData.line4,\n          addressData.city,\n          addressData.postalCode,\n          stateName,\n          countryName,\n        ].filter(component => component && component.trim() !== '');\n    \n        return addressComponents.join(',\\n');\n    });\n};\n\n// Process both addresses in parallel\nPromise.all([\n  formatAddress(\n    {\n      line1: data.shipping_address_line_1,\n      line2: data.shipping_address_line_2,\n      line3: data.shipping_address_line_3,\n      line4: data.shipping_address_line_4,\n      city: data.shipping_address_city,\n      postalCode: data.shipping_postal_code,\n    },\n    data.shipping_address_country,\n    data.shipping_address_state\n  ),\n  formatAddress(\n    {\n      line1: data.billing_address_line_1,\n      line2: data.billing_address_line_2,\n      line3: data.billing_address_line_3,\n      line4: data.billing_address_line_4,\n      city: data.billing_address_city,\n      postalCode: data.billing_postal_code,\n    },\n    data.billing_address_country,\n    data.billing_address_state\n  ),\n])\n.then(([shippingAddress, billingAddress]) => {\n  // Set both addresses at once\n  this.setData({\n    'gr_shipping_address': shippingAddress,\n    'gr_billing_address': billingAddress\n  });\n})\n.catch(err => {\n  console.error('Error processing addresses:', err);\n});",
        "type": "js"
      },
      {
        "key": "d0xf1jbf",
        "name": "onClick_manage_billing_addr",
        "func": "const data = this.getValues();\n\nthis.routeLocation(\n    {\n    routeMode: \"dialog\",\n        routeInfo: {\n            source_id: \"1905102178127777793\",\n            name:\"Address\",\t\n        },\n    },\n    {   'address_purpose': 'Billing',\n        'address_line1': data.billing_address_line_1,\n        'address_line2': data.billing_address_line_2,\n        'address_line3': data.billing_address_line_3,\n        'address_line4': data.billing_address_line_4,\n        'city': data.billing_address_city,\n        'postal_code': data.billing_postal_code,\n        'state': data.billing_address_state,\n        'country': data.billing_address_country,\n        'moduleName': 'gr'\n    }\n);",
        "type": "js"
      },
      {
        "key": "plc4vfy4",
        "name": "onClick_save_as_draft",
        "func": "const closeDialog = () => {\n  if (this.parentGenerateForm) {\n    this.parentGenerateForm.$refs.SuPageDialogRef.hide();\n    this.parentGenerateForm.refresh();\n    this.hideLoading();\n  }\n};\n\nconst validateForm = (data, requiredFields) => {\n  const missingFields = [];\n\n  requiredFields.forEach((field) => {\n    const value = data[field.name];\n\n    // Handle non-array fields (unchanged)\n    if (!field.isArray) {\n      if (validateField(value, field)) {\n        missingFields.push(field.label);\n      }\n      return;\n    }\n\n    // Handle array fields\n    if (!Array.isArray(value)) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    if (value.length === 0) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    // Check each item in the array\n    if (field.arrayType === \"object\" && field.arrayFields) {\n      value.forEach((item, index) => {\n        field.arrayFields.forEach((subField) => {\n          const subValue = item[subField.name];\n          if (validateField(subValue, subField)) {\n            missingFields.push(\n              `${subField.label} (in ${field.label} #${index + 1})`\n            );\n          }\n        });\n      });\n    }\n  });\n\n  return missingFields;\n};\n\nconst validateField = (value, field) => {\n  if (value === undefined || value === null) return true;\n  if (typeof value === \"string\") return value.trim() === \"\";\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === \"object\") return Object.keys(value).length === 0;\n  return !value;\n};\n\nconst getPrefixData = async (organizationId) => {\n  const prefixEntry = await db\n    .collection(\"prefix_configuration\")\n    .where({\n      document_types: \"Goods Receiving\",\n      is_deleted: 0,\n      organization_id: organizationId,\n      is_active: 1,\n    })\n    .get();\n\n  const prefixData = await prefixEntry.data[0];\n\n  return prefixData;\n};\n\nconst generateDraftPrefix = async (organizationId) => {\n  try {\n    const prefixData = await getPrefixData(organizationId);\n    const currDraftNum = parseInt(prefixData.draft_number) + 1;\n    const newPrefix = \"DRAFT-GR-\" + currDraftNum;\n\n    db.collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Goods Receiving\",\n        organization_id: organizationId,\n      })\n      .update({ draft_number: currDraftNum });\n\n    return newPrefix;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n\n(async () => {\n  try {\n    this.showLoading();\n    const data = this.getValues();\n    const requiredFields = [{ name: \"purchase_order_id\", label: \"PO Number\" }];\n\n    const missingFields = await validateForm(data, requiredFields);\n\n    if (missingFields.length === 0) {\n      const page_status = this.getValue(\"page_status\");\n\n      let organizationId = this.getVarGlobal(\"deptParentId\");\n      if (organizationId === \"0\") {\n        organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n      }\n\n      const {\n        fake_purchase_order_id,\n        purchase_order_id,\n        purchase_order_number,\n        gr_billing_name,\n        gr_billing_cp,\n        gr_billing_address,\n        gr_shipping_address,\n        supplier_name,\n        supplier_contact_person,\n        supplier_contact_number,\n        supplier_email,\n        currency_code,\n        gr_no,\n        gr_received_by,\n        gr_date,\n        table_gr,\n        billing_address_line_1,\n        billing_address_line_2,\n        billing_address_line_3,\n        billing_address_line_4,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_line_3,\n        shipping_address_line_4,\n        billing_address_city,\n        shipping_address_city,\n        billing_postal_code,\n        shipping_postal_code,\n        billing_address_state,\n        shipping_address_state,\n        billing_address_country,\n        shipping_address_country,\n        plant_id,\n        organization_id,\n      } = data;\n\n      const entry = {\n        gr_status: \"Draft\",\n        fake_purchase_order_id,\n        purchase_order_id,\n        purchase_order_number,\n        gr_billing_name,\n        gr_billing_cp,\n        gr_billing_address,\n        gr_shipping_address,\n        supplier_name,\n        supplier_contact_person,\n        supplier_contact_number,\n        supplier_email,\n        currency_code,\n        gr_no,\n        gr_received_by,\n        gr_date,\n        table_gr,\n        billing_address_line_1,\n        billing_address_line_2,\n        billing_address_line_3,\n        billing_address_line_4,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_line_3,\n        shipping_address_line_4,\n        billing_address_city,\n        shipping_address_city,\n        billing_postal_code,\n        shipping_postal_code,\n        billing_address_state,\n        shipping_address_state,\n        billing_address_country,\n        shipping_address_country,\n        plant_id,\n        organization_id,\n      };\n\n      if (page_status === \"Add\") {\n        const newPrefix = await generateDraftPrefix(organizationId);\n        entry.gr_no = newPrefix;\n        await db.collection(\"goods_receiving\").add(entry);\n        this.$message.success(\"Add successfully\");\n        closeDialog();\n      } else if (page_status === \"Edit\") {\n        await db\n          .collection(\"goods_receiving\")\n          .doc(goodsReceivingId)\n          .update(entry);\n        this.$message.success(\"Update successfully\");\n        closeDialog();\n      }\n    } else {\n      this.hideLoading();\n      this.$message.error(`Missing fields: ${missingFields.join(\", \")}`);\n    }\n  } catch (error) {\n    this.$message.error(error);\n  }\n})();\n",
        "type": "js"
      },
      {
        "key": "qdf0q1le",
        "name": "onClick_save_as_completed",
        "func": "// For quantities - 3 decimal places\nconst roundQty = (value) => {\n  return parseFloat(parseFloat(value || 0).toFixed(3));\n};\n\n// For prices - 4 decimal places\nconst roundPrice = (value) => {\n  return parseFloat(parseFloat(value || 0).toFixed(4));\n};\n\nconst closeDialog = () => {\n  if (this.parentGenerateForm) {\n    this.parentGenerateForm.$refs.SuPageDialogRef.hide();\n    this.parentGenerateForm.refresh();\n    this.hideLoading();\n  }\n};\n\nconst addInventory = (data, plantId, organizationId) => {\n  const items = data.table_gr;\n\n  if (!Array.isArray(items) || items.length === 0) {\n    console.log(\"No items to process\");\n    return Promise.resolve();\n  }\n\n  const processedItemPromises = items.map((item, itemIndex) => {\n    return new Promise(async (resolve) => {\n      console.log(`Processing item ${itemIndex + 1}/${items.length}`);\n\n      // Input validation\n      if (\n        !item.item_id ||\n        !item.received_qty ||\n        isNaN(parseFloat(item.received_qty)) ||\n        parseFloat(item.received_qty) < 0\n      ) {\n        console.error(`Invalid item data for index ${itemIndex}:`, item);\n        resolve();\n        return;\n      }\n\n      const calculateCostPrice = (itemData, conversion) => {\n        if (!conversion || conversion <= 0 || !isFinite(conversion)) {\n          console.warn(\n            `Invalid conversion factor (${conversion}) for item ${itemData.item_id}, using 1.0`\n          );\n          conversion = 1.0;\n        }\n\n        const relevantPoId =\n          itemData.line_po_id ||\n          itemData.po_id ||\n          (Array.isArray(data.purchase_order_id)\n            ? data.purchase_order_id[0]\n            : data.purchase_order_id);\n\n        if (!relevantPoId) {\n          console.error(\"No relevant PO ID found for cost calculation\");\n          return roundPrice(itemData.unit_price);\n        }\n\n        return db\n          .collection(\"purchase_order\")\n          .where({ id: relevantPoId })\n          .get()\n          .then((poResponse) => {\n            if (!poResponse.data || !poResponse.data.length) {\n              console.log(`No purchase order found for ${relevantPoId}`);\n              return roundPrice(itemData.unit_price);\n            }\n\n            const poData = poResponse.data[0];\n\n            const exchangeRate = poData.exchange_rate;\n            let poQuantity = 0;\n            let totalAmount = 0;\n\n            for (const poItem of poData.table_po) {\n              if (poItem.item_id === itemData.item_id) {\n                poQuantity = roundQty(parseFloat(poItem.quantity) || 0);\n                totalAmount = roundPrice(parseFloat(poItem.po_amount) || 0);\n                break;\n              }\n            }\n\n            const pricePerUnit = roundPrice(totalAmount / poQuantity);\n            const costPrice = roundPrice(\n              (pricePerUnit / conversion) * exchangeRate\n            );\n            console.log(\"costPrice\", costPrice);\n\n            return costPrice;\n          })\n          .catch((error) => {\n            console.error(`Error calculating cost price: ${error.message}`);\n            return roundPrice(itemData.unit_price);\n          });\n      };\n\n      // Function to process FIFO for batch\n      const processFifoForBatch = (itemData, baseQty, batchId) => {\n        return db\n          .collection(\"fifo_costing_history\")\n          .where({ material_id: itemData.item_id, batch_id: batchId })\n          .get()\n          .then((fifoResponse) => {\n            // Get the highest existing sequence number and add 1\n            let sequenceNumber = 1;\n            if (\n              fifoResponse.data &&\n              Array.isArray(fifoResponse.data) &&\n              fifoResponse.data.length > 0\n            ) {\n              const existingSequences = fifoResponse.data.map((doc) =>\n                parseInt(doc.fifo_sequence || 0)\n              );\n              sequenceNumber = Math.max(...existingSequences, 0) + 1;\n            }\n\n            return calculateCostPrice(\n              itemData,\n              roundQty(baseQty / parseFloat(itemData.received_qty))\n            ).then((costPrice) => {\n              const fifoData = {\n                fifo_cost_price: roundPrice(costPrice),\n                fifo_initial_quantity: roundQty(baseQty),\n                fifo_available_quantity: roundQty(baseQty),\n                material_id: itemData.item_id,\n                batch_id: batchId,\n                fifo_sequence: sequenceNumber,\n                plant_id: plantId,\n                organization_id: organizationId,\n              };\n\n              return db\n                .collection(\"fifo_costing_history\")\n                .add(fifoData)\n                .then(() => {\n                  console.log(\n                    `Successfully processed FIFO for item ${itemData.item_id} with batch ${batchId}`\n                  );\n                  return Promise.resolve();\n                });\n            });\n          });\n      };\n\n      // Function to process FIFO for non-batch\n      const processFifoForNonBatch = (itemData, baseQty) => {\n        return db\n          .collection(\"fifo_costing_history\")\n          .where({ material_id: itemData.item_id })\n          .get()\n          .then((fifoResponse) => {\n            // Get the highest existing sequence number and add 1\n            let sequenceNumber = 1;\n            if (\n              fifoResponse.data &&\n              Array.isArray(fifoResponse.data) &&\n              fifoResponse.data.length > 0\n            ) {\n              const existingSequences = fifoResponse.data.map((doc) =>\n                parseInt(doc.fifo_sequence || 0)\n              );\n              sequenceNumber = Math.max(...existingSequences, 0) + 1;\n            }\n\n            return calculateCostPrice(\n              itemData,\n              roundQty(baseQty / parseFloat(itemData.received_qty))\n            ).then((costPrice) => {\n              const fifoData = {\n                fifo_cost_price: roundPrice(costPrice),\n                fifo_initial_quantity: roundQty(baseQty),\n                fifo_available_quantity: roundQty(baseQty),\n                material_id: itemData.item_id,\n                fifo_sequence: sequenceNumber,\n                plant_id: plantId,\n                organization_id: organizationId,\n              };\n\n              return db\n                .collection(\"fifo_costing_history\")\n                .add(fifoData)\n                .then(() => {\n                  console.log(\n                    `Successfully processed FIFO for item ${itemData.item_id}`\n                  );\n                  return Promise.resolve();\n                });\n            });\n          });\n      };\n\n      const processWeightedAverageForBatch = (item, baseQty, batchId) => {\n        return calculateCostPrice(\n          item,\n          roundQty(baseQty / parseFloat(item.received_qty))\n        ).then((costPrice) => {\n          return db\n            .collection(\"wa_costing_method\")\n            .add({\n              material_id: item.item_id,\n              batch_id: batchId,\n              plant_id: plantId,\n              organization_id: organizationId,\n              wa_quantity: roundQty(baseQty),\n              wa_cost_price: roundPrice(costPrice),\n              created_at: new Date(),\n            })\n            .then(() => {\n              console.log(\n                `Successfully processed Weighted Average for item ${item.item_id} with batch ${batchId}`\n              );\n              return Promise.resolve();\n            })\n            .catch((error) => {\n              console.error(\n                `Error processing Weighted Average for item ${item.item_id} with batch ${batchId}:`,\n                error\n              );\n              return Promise.reject(error);\n            });\n        });\n      };\n\n      const processWeightedAverageForNonBatch = (item, baseQty) => {\n        return db\n          .collection(\"wa_costing_method\")\n          .where({ material_id: item.item_id })\n          .get()\n          .then((waResponse) => {\n            const waData = waResponse.data;\n            console.log(\"waData\", waData);\n            if (waData && waData.length) {\n              waData.sort((a, b) => {\n                if (a.created_at && b.created_at) {\n                  return new Date(b.created_at) - new Date(a.created_at);\n                }\n                return 0;\n              });\n              const latestWa = waData[0];\n              console.log(\"latestWa\", latestWa);\n              const waCostPrice = roundPrice(latestWa.wa_cost_price);\n              const waQuantity = roundQty(latestWa.wa_quantity);\n              const newWaQuantity = roundQty(waQuantity + baseQty);\n              return calculateCostPrice(\n                item,\n                roundQty(baseQty / parseFloat(item.received_qty))\n              ).then((costPrice) => {\n                const calculatedWaCostPrice = roundPrice(\n                  (waCostPrice * waQuantity + costPrice * baseQty) /\n                    newWaQuantity\n                );\n                const newWaCostPrice = roundPrice(calculatedWaCostPrice);\n                console.log(\"newWaCostPrice\", newWaCostPrice);\n\n                return db\n                  .collection(\"wa_costing_method\")\n                  .doc(latestWa.id)\n                  .update({\n                    wa_quantity: newWaQuantity,\n                    wa_cost_price: newWaCostPrice,\n                    plant_id: plantId,\n                    organization_id: organizationId,\n                    updated_at: new Date(),\n                  })\n                  .then(() => {\n                    console.log(\n                      `Successfully processed Weighted Average for item ${item.item_id}`\n                    );\n                    return Promise.resolve();\n                  })\n                  .catch((error) => {\n                    console.error(\n                      `Error processing Weighted Average for item ${item.item_id}:`,\n                      error\n                    );\n                  });\n              });\n            } else {\n              return calculateCostPrice(\n                item,\n                roundQty(baseQty / parseFloat(item.received_qty))\n              ).then((costPrice) => {\n                return db\n                  .collection(\"wa_costing_method\")\n                  .add({\n                    material_id: item.item_id,\n                    wa_quantity: roundQty(baseQty),\n                    wa_cost_price: roundPrice(costPrice),\n                    plant_id: plantId,\n                    organization_id: organizationId,\n                    created_at: new Date(),\n                  })\n                  .then(() => {\n                    console.log(\n                      `Successfully processed Weighted Average for item ${item.item_id}`\n                    );\n                    return Promise.resolve();\n                  })\n                  .catch((error) => {\n                    console.error(\n                      `Error processing Weighted Average for item ${item.item_id}:`,\n                      error\n                    );\n                  });\n              });\n            }\n          })\n          .catch((error) => {\n            console.error(\n              `Error processing Weighted Average for item ${item.item_id}:`,\n              error\n            );\n            return Promise.reject(error);\n          });\n      };\n\n      // Function to get Fixed Cost price\n      const getFixedCostPrice = async (materialId) => {\n        const query = db.collection(\"Item\").where({ id: materialId });\n        const response = await query.get();\n        const result = response.data;\n        return roundPrice(parseFloat(result[0].purchase_unit_price || 0));\n      };\n\n      try {\n        // First check if this item should be processed based on stock_control\n        const itemRes = await db\n          .collection(\"Item\")\n          .where({ id: item.item_id })\n          .get();\n\n        if (!itemRes.data || !itemRes.data.length) {\n          console.error(`Item not found: ${item.item_id}`);\n          resolve();\n          return;\n        }\n\n        const itemData = itemRes.data[0];\n        if (itemData.stock_control === 0) {\n          console.log(\n            `Skipping inventory update for item ${item.item_id} (stock_control=0)`\n          );\n          resolve();\n          return;\n        }\n\n        // UOM Conversion\n        let altQty = roundQty(parseFloat(item.received_qty));\n        let baseQty = altQty;\n        let altUOM = item.item_uom;\n        let baseUOM = itemData.based_uom;\n\n        if (\n          Array.isArray(itemData.table_uom_conversion) &&\n          itemData.table_uom_conversion.length > 0\n        ) {\n          console.log(`Checking UOM conversions for item ${item.item_id}`);\n\n          const uomConversion = itemData.table_uom_conversion.find(\n            (conv) => conv.alt_uom_id === altUOM\n          );\n\n          if (uomConversion) {\n            console.log(\n              `Found UOM conversion: 1 ${uomConversion.alt_uom_id} = ${uomConversion.base_qty} ${uomConversion.base_uom_id}`\n            );\n\n            baseQty = roundQty(altQty * uomConversion.base_qty);\n\n            console.log(\n              `Converted ${altQty} ${altUOM} to ${baseQty} ${baseUOM}`\n            );\n          } else {\n            console.log(`No conversion found for UOM ${altUOM}, using as-is`);\n          }\n        } else {\n          console.log(\n            `No UOM conversion table for item ${item.item_id}, using received quantity as-is`\n          );\n        }\n\n        let unitPrice = roundPrice(item.unit_price);\n        let totalPrice = roundPrice(item.unit_price * baseQty);\n\n        const costingMethod = itemData.material_costing_method;\n\n        if (\n          costingMethod === \"First In First Out\" ||\n          costingMethod === \"Weighted Average\"\n        ) {\n          const fifoCostPrice = await calculateCostPrice(\n            item,\n            roundQty(baseQty / parseFloat(item.received_qty))\n          );\n          unitPrice = roundPrice(fifoCostPrice);\n          totalPrice = roundPrice(fifoCostPrice * baseQty);\n        } else if (costingMethod === \"Fixed Cost\") {\n          const fixedCostPrice = await getFixedCostPrice(item.item_id);\n          unitPrice = roundPrice(fixedCostPrice);\n          totalPrice = roundPrice(fixedCostPrice * baseQty);\n        }\n\n        // Create inventory_movement record\n        const inventoryMovementData = {\n          transaction_type: \"GRN\",\n          trx_no: data.gr_no,\n          parent_trx_no: item.line_po_no,\n          movement: \"IN\",\n          unit_price: roundPrice(unitPrice),\n          total_price: roundPrice(totalPrice),\n          quantity: roundQty(altQty),\n          item_id: item.item_id,\n          inventory_category: item.inv_category,\n          uom_id: altUOM,\n          base_qty: roundQty(baseQty),\n          base_uom_id: baseUOM,\n          bin_location_id: item.location_id,\n          batch_number_id: item.item_batch_no,\n          costing_method_id: item.item_costing_method,\n          plant_id: plantId,\n          organization_id: organizationId,\n        };\n\n        await db.collection(\"inventory_movement\").add(inventoryMovementData);\n\n        // Update purchase order\n        const poResponse = await db\n          .collection(\"on_order_purchase_order\")\n          .where({\n            purchase_order_number: data.purchase_order_number,\n            material_id: item.item_id,\n          })\n          .get();\n\n        if (\n          poResponse.data &&\n          Array.isArray(poResponse.data) &&\n          poResponse.data.length > 0\n        ) {\n          const doc = poResponse.data[0];\n          if (doc && doc.id) {\n            const existingReceived = roundQty(\n              parseFloat(doc.received_qty || 0)\n            );\n            const openQuantity = roundQty(parseFloat(doc.open_qty || 0));\n            const newReceived = roundQty(\n              existingReceived + parseFloat(baseQty || 0)\n            );\n            let newOpenQuantity = roundQty(\n              openQuantity - parseFloat(baseQty || 0)\n            );\n\n            if (newOpenQuantity < 0) {\n              newOpenQuantity = 0;\n            }\n\n            await db.collection(\"on_order_purchase_order\").doc(doc.id).update({\n              received_qty: newReceived,\n              open_qty: newOpenQuantity,\n            });\n          }\n        }\n\n        // Setup inventory category quantities\n        const itemBalanceParams = {\n          material_id: item.item_id,\n          location_id: item.location_id,\n        };\n\n        let block_qty = 0,\n          reserved_qty = 0,\n          unrestricted_qty = 0,\n          qualityinsp_qty = 0,\n          intransit_qty = 0;\n\n        const receivedQty = roundQty(parseFloat(baseQty || 0));\n\n        if (item.inv_category === \"Blocked\") {\n          block_qty = receivedQty;\n        } else if (item.inv_category === \"Reserved\") {\n          reserved_qty = receivedQty;\n        } else if (item.inv_category === \"Unrestricted\") {\n          unrestricted_qty = receivedQty;\n        } else if (item.inv_category === \"Quality Inspection\") {\n          qualityinsp_qty = receivedQty;\n        } else if (item.inv_category === \"In Transit\") {\n          intransit_qty = receivedQty;\n        } else {\n          unrestricted_qty = receivedQty;\n        }\n\n        if (item.item_batch_no !== \"-\") {\n          // Batch item processing\n          return db\n            .collection(\"batch\")\n            .add({\n              batch_number: item.item_batch_no,\n              material_id: item.item_id,\n              initial_quantity: baseQty,\n              goods_receiving_no: data.gr_no,\n              goods_receiving_id: data.id || \"\",\n              plant_id: plantId,\n              organization_id: organizationId,\n            })\n            .then(() => {\n              return new Promise((resolve) => setTimeout(resolve, 300));\n            })\n            .then(() => {\n              return db\n                .collection(\"batch\")\n                .where({\n                  batch_number: item.item_batch_no,\n                  material_id: item.item_id,\n                  goods_receiving_no: data.gr_no,\n                })\n                .get();\n            })\n            .then((response) => {\n              const batchResult = response.data;\n              if (\n                !batchResult ||\n                !Array.isArray(batchResult) ||\n                !batchResult.length\n              ) {\n                this.$message.error(\"Batch not found after creation\");\n              }\n\n              const batchId = batchResult[0].id;\n\n              // Create new balance record\n              balance_quantity =\n                block_qty +\n                reserved_qty +\n                unrestricted_qty +\n                qualityinsp_qty +\n                intransit_qty;\n\n              const newBalanceData = {\n                material_id: item.item_id,\n                location_id: item.location_id,\n                batch_id: batchId,\n                block_qty: block_qty,\n                reserved_qty: reserved_qty,\n                unrestricted_qty: unrestricted_qty,\n                qualityinsp_qty: qualityinsp_qty,\n                intransit_qty: intransit_qty,\n                balance_quantity: balance_quantity,\n                plant_id: plantId,\n                organization_id: organizationId,\n              };\n\n              return db\n                .collection(\"item_batch_balance\")\n                .add(newBalanceData)\n                .then(() => {\n                  console.log(\"Successfully added item_batch_balance record\");\n                  return { batchId };\n                })\n                .catch((error) => {\n                  console.error(\n                    `Error creating item_batch_balance: ${error.message}`\n                  );\n                  resolve();\n                });\n            })\n            .then(({ batchId }) => {\n              if (costingMethod === \"First In First Out\") {\n                return processFifoForBatch(item, baseQty, batchId);\n              } else if (costingMethod === \"Weighted Average\") {\n                return processWeightedAverageForBatch(item, baseQty, batchId);\n              } else {\n                return Promise.resolve();\n              }\n            })\n            .then(() => {\n              console.log(\n                `Successfully completed processing for batch item ${item.item_id}`\n              );\n              resolve();\n            })\n            .catch((error) => {\n              console.error(\n                `Error in batch processing chain: ${error.message}`\n              );\n              resolve();\n            });\n        } else {\n          // Non-batch item processing with async/await\n          try {\n            const balanceResponse = await db\n              .collection(\"item_balance\")\n              .where(itemBalanceParams)\n              .get();\n\n            const hasExistingBalance =\n              balanceResponse.data &&\n              Array.isArray(balanceResponse.data) &&\n              balanceResponse.data.length > 0;\n            const existingDoc = hasExistingBalance\n              ? balanceResponse.data[0]\n              : null;\n\n            let balance_quantity;\n\n            if (existingDoc && existingDoc.id) {\n              // Update existing balance\n              const updatedBlockQty = roundQty(\n                parseFloat(existingDoc.block_qty || 0) + block_qty\n              );\n              const updatedReservedQty = roundQty(\n                parseFloat(existingDoc.reserved_qty || 0) + reserved_qty\n              );\n              const updatedUnrestrictedQty = roundQty(\n                parseFloat(existingDoc.unrestricted_qty || 0) + unrestricted_qty\n              );\n              const updatedQualityInspQty = roundQty(\n                parseFloat(existingDoc.qualityinsp_qty || 0) + qualityinsp_qty\n              );\n              const updatedIntransitQty = roundQty(\n                parseFloat(existingDoc.intransit_qty || 0) + intransit_qty\n              );\n              balance_quantity =\n                updatedBlockQty +\n                updatedReservedQty +\n                updatedUnrestrictedQty +\n                updatedQualityInspQty +\n                updatedIntransitQty;\n\n              await db\n                .collection(\"item_balance\")\n                .doc(existingDoc.id)\n                .update({\n                  block_qty: updatedBlockQty,\n                  reserved_qty: updatedReservedQty,\n                  unrestricted_qty: updatedUnrestrictedQty,\n                  qualityinsp_qty: updatedQualityInspQty,\n                  intransit_qty: updatedIntransitQty,\n                  balance_quantity: balance_quantity,\n                })\n                .catch((error) => {\n                  console.error(\n                    `Error updating item_balance: ${error.message}`\n                  );\n                  resolve();\n                });\n            } else {\n              // Create new balance record\n              balance_quantity =\n                block_qty +\n                reserved_qty +\n                unrestricted_qty +\n                qualityinsp_qty +\n                intransit_qty;\n\n              const newBalanceData = {\n                material_id: item.item_id,\n                location_id: item.location_id,\n                block_qty: block_qty,\n                reserved_qty: reserved_qty,\n                unrestricted_qty: unrestricted_qty,\n                qualityinsp_qty: qualityinsp_qty,\n                intransit_qty: intransit_qty,\n                balance_quantity: balance_quantity,\n                plant_id: plantId,\n                organization_id: organizationId,\n              };\n\n              await db\n                .collection(\"item_balance\")\n                .add(newBalanceData)\n                .catch((error) => {\n                  console.error(\n                    `Error creating item_balance: ${error.message}`\n                  );\n                  resolve();\n                });\n            }\n\n            const costingMethod = itemData.material_costing_method;\n\n            if (costingMethod === \"First In First Out\") {\n              await processFifoForNonBatch(item, baseQty);\n            } else if (costingMethod === \"Weighted Average\") {\n              await processWeightedAverageForNonBatch(item, baseQty);\n            } else {\n              return Promise.resolve();\n            }\n\n            console.log(\n              `Successfully processed non-batch item ${item.item_id}`\n            );\n            resolve();\n          } catch (nonBatchError) {\n            console.error(\n              `Error processing non-batch item: ${nonBatchError.message}`\n            );\n            resolve();\n          }\n        }\n      } catch (error) {\n        console.error(`Error processing item ${item.item_id}:`, error);\n        console.log(`Error encountered for item ${item.item_id}`);\n        resolve();\n      }\n    });\n  });\n\n  // Return a promise that resolves when all items are processed\n  return Promise.all(processedItemPromises);\n};\n\n// Enhanced PO status update with proper error handling\nconst updatePurchaseOrderStatus = async (purchaseOrderIds) => {\n  const poIds = Array.isArray(purchaseOrderIds)\n    ? purchaseOrderIds\n    : [purchaseOrderIds];\n  try {\n    // Fetch purchase order and related goods receiving documents in parallel\n    const updatePromises = poIds.map(async (purchaseOrderId) => {\n      try {\n        // Fetch purchase order and related goods receiving documents in parallel\n        const [resGR, resPO] = await Promise.all([\n          db\n            .collection(\"goods_receiving\")\n            .where({ purchase_order_id: purchaseOrderId })\n            .get(),\n          db.collection(\"purchase_order\").where({ id: purchaseOrderId }).get(),\n        ]);\n\n        // Validate purchase order exists\n        if (!resPO.data || !resPO.data.length) {\n          console.warn(`Purchase order ${purchaseOrderId} not found`);\n          return;\n        }\n\n        const poDoc = resPO.data[0];\n        const originalPOStatus = poDoc.po_status;\n        const poItems = poDoc.table_po || [];\n\n        // Validate PO has items\n        if (!poItems.length) {\n          console.warn(`No items found in purchase order ${purchaseOrderId}`);\n          return;\n        }\n\n        const allGRs = resGR.data || [];\n\n        // Initialize tracking objects\n        const receivedQtyMap = {};\n        let totalOrderedQty = 0;\n        let totalReceivedQty = 0;\n\n        // Create a copy of the PO items to update later\n        const updatedPoItems = JSON.parse(JSON.stringify(poItems));\n\n        // Initialize with zeros and calculate total ordered quantity\n        poItems.forEach((item) => {\n          const itemId = item.item_id;\n          const orderedQty = parseFloat(item.quantity || 0);\n\n          receivedQtyMap[itemId] = 0;\n          totalOrderedQty += orderedQty;\n        });\n\n        // Sum received quantities from all GRs\n        allGRs.forEach((gr) => {\n          (gr.table_gr || []).forEach((grItem) => {\n            const itemId = grItem.item_id;\n            if (receivedQtyMap.hasOwnProperty(itemId)) {\n              const qty = parseFloat(grItem.received_qty || 0);\n              receivedQtyMap[itemId] += qty;\n              totalReceivedQty += qty;\n            }\n          });\n        });\n\n        // Update received quantities in PO items\n        updatedPoItems.forEach((item) => {\n          const itemId = item.item_id;\n          item.received_qty = receivedQtyMap[itemId] || 0;\n        });\n\n        // Check item completion status\n        let allItemsComplete = true;\n        let anyItemProcessing = false;\n\n        poItems.forEach((item) => {\n          const orderedQty = parseFloat(item.quantity || 0);\n          const receivedQty = receivedQtyMap[item.item_id] || 0;\n\n          if (receivedQty < orderedQty) {\n            allItemsComplete = false;\n            if (receivedQty > 0) {\n              anyItemProcessing = true;\n            }\n          }\n        });\n\n        // Determine new status\n        let newPOStatus = poDoc.po_status;\n        let newGRStatus = poDoc.gr_status;\n\n        if (allItemsComplete) {\n          newPOStatus = \"Completed\";\n          newGRStatus = \"Fully Received\";\n        } else if (anyItemProcessing) {\n          newPOStatus = \"Processing\";\n          newGRStatus = \"Partially Received\";\n        }\n\n        // Format the pending/ordered quantity\n        const pendingOrderedQty = `${totalReceivedQty} / ${totalOrderedQty}`;\n\n        // Prepare a single update operation with all changes\n        const updateData = {\n          table_po: updatedPoItems,\n          pending_ordered_qty: pendingOrderedQty,\n        };\n\n        // Only include status changes if needed\n        if (newPOStatus !== poDoc.po_status) {\n          updateData.po_status = newPOStatus;\n        }\n\n        if (newGRStatus !== poDoc.gr_status) {\n          updateData.gr_status = newGRStatus;\n        }\n\n        // Execute a single database update\n        await db.collection(\"purchase_order\").doc(poDoc.id).update(updateData);\n\n        // Log the status change if it occurred\n        if (newPOStatus !== originalPOStatus) {\n          console.log(\n            `Updated PO ${purchaseOrderId} status from ${originalPOStatus} to ${newPOStatus}`\n          );\n        }\n      } catch (error) {\n        console.error(\n          `Error updating purchase order ${purchaseOrderId} status:`,\n          error\n        );\n      }\n    });\n\n    await Promise.all(updatePromises);\n    return { success: true };\n  } catch (error) {\n    console.error(`Error in update purchase order status process:`, error);\n    return {\n      success: false,\n      error: error.message,\n    };\n  }\n};\n\nconst validateForm = (data, requiredFields) => {\n  const missingFields = [];\n\n  requiredFields.forEach((field) => {\n    const value = data[field.name];\n\n    // Handle non-array fields (unchanged)\n    if (!field.isArray) {\n      if (validateField(value, field)) {\n        missingFields.push(field.label);\n      }\n      return;\n    }\n\n    // Handle array fields\n    if (!Array.isArray(value)) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    if (value.length === 0) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    // Check each item in the array\n    if (field.arrayType === \"object\" && field.arrayFields) {\n      value.forEach((item, index) => {\n        field.arrayFields.forEach((subField) => {\n          const subValue = item[subField.name];\n          if (validateField(subValue, subField)) {\n            missingFields.push(\n              `${subField.label} (in ${field.label} #${index + 1})`\n            );\n          }\n        });\n      });\n    }\n  });\n\n  return missingFields;\n};\n\nconst validateField = (value, field) => {\n  if (value === undefined || value === null) return true;\n  if (typeof value === \"string\") return value.trim() === \"\";\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === \"object\") return Object.keys(value).length === 0;\n  return !value;\n};\n\nconst getPrefixData = async (organizationId) => {\n  const prefixEntry = await db\n    .collection(\"prefix_configuration\")\n    .where({\n      document_types: \"Goods Receiving\",\n      is_deleted: 0,\n      organization_id: organizationId,\n      is_active: 1,\n    })\n    .get();\n\n  const prefixData = await prefixEntry.data[0];\n\n  return prefixData;\n};\n\nconst updatePrefix = async (organizationId, runningNumber) => {\n  try {\n    await db\n      .collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Goods Receiving\",\n        is_deleted: 0,\n        organization_id: organizationId,\n      })\n      .update({ running_number: parseInt(runningNumber) + 1, has_record: 1 });\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\nconst generatePrefix = (runNumber, now, prefixData) => {\n  let generated = prefixData.current_prefix_config;\n  generated = generated.replace(\"prefix\", prefixData.prefix_value);\n  generated = generated.replace(\"suffix\", prefixData.suffix_value);\n  generated = generated.replace(\n    \"month\",\n    String(now.getMonth() + 1).padStart(2, \"0\")\n  );\n  generated = generated.replace(\"day\", String(now.getDate()).padStart(2, \"0\"));\n  generated = generated.replace(\"year\", now.getFullYear());\n  generated = generated.replace(\n    \"running_number\",\n    String(runNumber).padStart(prefixData.padding_zeroes, \"0\")\n  );\n  return generated;\n};\n\nconst checkUniqueness = async (generatedPrefix) => {\n  const existingDoc = await db\n    .collection(\"goods_receiving\")\n    .where({ gr_no: generatedPrefix })\n    .get();\n  return existingDoc.data[0] ? false : true;\n};\n\nconst findUniquePrefix = async (prefixData) => {\n  const now = new Date();\n  let prefixToShow;\n  let runningNumber = prefixData.running_number;\n  let isUnique = false;\n  let maxAttempts = 10;\n  let attempts = 0;\n\n  while (!isUnique && attempts < maxAttempts) {\n    attempts++;\n    prefixToShow = await generatePrefix(runningNumber, now, prefixData);\n    isUnique = await checkUniqueness(prefixToShow);\n    if (!isUnique) {\n      runningNumber++;\n    }\n  }\n\n  if (!isUnique) {\n    this.$message.error(\n      \"Could not generate a unique Goods Receiving number after maximum attempts\"\n    );\n  }\n\n  return { prefixToShow, runningNumber };\n};\n\nconst addEntry = async (organizationId, entry) => {\n  try {\n    const prefixData = await getPrefixData(organizationId);\n    if (prefixData.length !== 0) {\n      await updatePrefix(organizationId, prefixData.running_number);\n      await db\n        .collection(\"goods_receiving\")\n        .add(entry)\n        .then(() => {\n          this.runWorkflow(\n            \"1917412667253141505\",\n            { gr_no: entry.gr_no },\n            async (res) => {\n              console.log(\"成功结果：\", res);\n            },\n            (err) => {\n              this.$message.error(\"Workflow execution failed\");\n              console.error(\"失败结果：\", err);\n              closeDialog();\n            }\n          );\n        });\n      await addInventory(entry, entry.plant_id, organizationId);\n\n      const purchaseOrderIds = Array.isArray(entry.purchase_order_id)\n        ? entry.purchase_order_id\n        : [entry.purchase_order_id];\n\n      await updatePurchaseOrderStatus(purchaseOrderIds);\n      this.$message.success(\"Add successfully\");\n      closeDialog();\n    }\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\nconst updateEntry = async (organizationId, entry, goodsReceivingId) => {\n  try {\n    const prefixData = await getPrefixData(organizationId);\n\n    if (prefixData.length !== 0) {\n      const { prefixToShow, runningNumber } = await findUniquePrefix(\n        prefixData\n      );\n\n      await updatePrefix(organizationId, runningNumber);\n\n      entry.gr_no = prefixToShow;\n      await db\n        .collection(\"goods_receiving\")\n        .doc(goodsReceivingId)\n        .update(entry)\n        .then(() => {\n          this.runWorkflow(\n            \"1917412667253141505\",\n            { gr_no: entry.gr_no },\n            async (res) => {\n              console.log(\"成功结果：\", res);\n            },\n            (err) => {\n              alert();\n              console.error(\"失败结果：\", err);\n              closeDialog();\n            }\n          );\n        });\n      await addInventory(entry, entry.plant_id, organizationId);\n      const purchaseOrderIds = Array.isArray(entry.purchase_order_id)\n        ? entry.purchase_order_id\n        : [entry.purchase_order_id];\n\n      await updatePurchaseOrderStatus(purchaseOrderIds);\n      this.$message.success(\"Update successfully\");\n      await closeDialog();\n    }\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\n(async () => {\n  try {\n    const data = this.getValues();\n    this.showLoading();\n\n    const requiredFields = [\n      { name: \"purchase_order_id\", label: \"PO Number\" },\n      { name: \"gr_no\", label: \"GR Number\" },\n      { name: \"gr_date\", label: \"GR Date\" },\n      {\n        name: \"table_gr\",\n        label: \"GR Items\",\n        isArray: true,\n        arrayType: \"object\",\n        arrayFields: [\n          { name: \"location_id\", label: \"Target Location\" },\n          { name: \"item_batch_no\", label: \"Batch Number\" },\n          { name: \"inv_category\", label: \"Inventory Category\" },\n        ],\n      },\n    ];\n\n    const missingFields = await validateForm(data, requiredFields);\n\n    if (missingFields.length === 0) {\n      const page_status = this.getValue(\"page_status\");\n\n      let organizationId = this.getVarGlobal(\"deptParentId\");\n      if (organizationId === \"0\") {\n        organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n      }\n\n      const {\n        fake_purchase_order_id,\n        purchase_order_id,\n        plant_id,\n        currency_code,\n        organization_id,\n        purchase_order_number,\n        gr_billing_name,\n        gr_billing_cp,\n        gr_billing_address,\n        gr_shipping_address,\n        supplier_name,\n        supplier_contact_person,\n        supplier_contact_number,\n        supplier_email,\n        gr_no,\n        gr_received_by,\n        gr_date,\n        table_gr,\n        billing_address_line_1,\n        billing_address_line_2,\n        billing_address_line_3,\n        billing_address_line_4,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_line_3,\n        shipping_address_line_4,\n        billing_address_city,\n        shipping_address_city,\n        billing_postal_code,\n        shipping_postal_code,\n        billing_address_state,\n        shipping_address_state,\n        billing_address_country,\n        shipping_address_country,\n      } = data;\n\n      const entry = {\n        gr_status: \"Completed\",\n        fake_purchase_order_id,\n        purchase_order_id,\n        plant_id,\n        currency_code,\n        organization_id,\n        purchase_order_number,\n        gr_billing_name,\n        gr_billing_cp,\n        gr_billing_address,\n        gr_shipping_address,\n        supplier_name,\n        supplier_contact_person,\n        supplier_contact_number,\n        supplier_email,\n        gr_no,\n        gr_received_by,\n        gr_date,\n        table_gr,\n        billing_address_line_1,\n        billing_address_line_2,\n        billing_address_line_3,\n        billing_address_line_4,\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_line_3,\n        shipping_address_line_4,\n        billing_address_city,\n        shipping_address_city,\n        billing_postal_code,\n        shipping_postal_code,\n        billing_address_state,\n        shipping_address_state,\n        billing_address_country,\n        shipping_address_country,\n      };\n\n      if (page_status === \"Add\") {\n        await addEntry(organizationId, entry);\n        closeDialog();\n      } else if (page_status === \"Edit\") {\n        const goodsReceivingId = this.getValue(\"id\");\n        await updateEntry(organizationId, entry, goodsReceivingId);\n        closeDialog();\n      }\n    } else {\n      this.hideLoading();\n      this.$message.error(`Missing fields: ${missingFields.join(\", \")}`);\n    }\n  } catch (error) {\n    this.hideLoading();\n    this.$message.error(error);\n  }\n})();\n",
        "type": "js"
      },
      {
        "key": "j8wra669",
        "name": "onChange_Supplier",
        "func": "(async () => {\n  const supplierId = arguments[0]?.value;\n  const supplierChangeId = this.getValue(\"supplier_change_id\");\n\n  const supplierContactData = arguments[0]?.fieldModel?.item.contact_list[0];\n\n  if (\n    supplierId &&\n    (!supplierChangeId || supplierChangeId !== supplierId) &&\n    !Array.isArray(supplierId)\n  ) {\n    await this.setData({ supplier_change_id: supplierId });\n    await this.setData({\n      supplier_contact_person: supplierContactData.person_name,\n      supplier_contact_number: supplierContactData.mobile_number,\n      supplier_email: supplierContactData.person_email,\n    });\n  }\n})();\n",
        "type": "js"
      },
      {
        "key": "zug6defe",
        "name": "onChange_plant",
        "func": "(async () => {\n  const plant = arguments[0]?.value;\n  const table_gr = this.getValue(\"table_gr\");\n  const po_numbers = this.getValue(\"purchase_order_id\");\n\n  let organizationId = this.getVarGlobal(\"deptParentId\");\n  if (organizationId === \"0\") {\n    organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n  }\n\n  await this.setData({\n    organization_id: organizationId,\n  });\n\n  // First, set the bin location for items\n  if (plant && po_numbers && po_numbers.length > 0) {\n    const resBinLocation = await db\n      .collection(\"bin_location\")\n      .where({\n        plant_id: plant,\n        is_default: true,\n      })\n      .get();\n\n    let binLocation;\n\n    if (resBinLocation.data && resBinLocation.data.length > 0) {\n      binLocation = resBinLocation.data[0].id;\n    } else {\n      console.warn(\"No default bin location found for plant:\", plant);\n    }\n\n    if (table_gr && table_gr.length > 0) {\n      for (let i = 0; i < table_gr.length; i++) {\n        this.setData({\n          [`table_gr.${i}.location_id`]: binLocation,\n        });\n      }\n    }\n  }\n})();\n",
        "type": "js"
      },
      {
        "key": "drpaq3gc",
        "name": "FakeGRLineItem",
        "func": "console.log(\"arguments\", arguments[0]);\nconst page_status = this.getValue(\"page_status\");\n\n// Check if data is ready and contains purchase_order_id\nconst checkAndProcessData = async () => {\n  console.log(\"checkAndProcessData for Fake PO\");\n  const data = this.getValues();\n\n  const purchaseOrderId = this.getValue(\"fake_purchase_order_id\");\n\n  if (!data || !purchaseOrderId) {\n    setTimeout(checkAndProcessData, 500);\n    return;\n  }\n\n  console.log(\"purchaseOrderId JN\", purchaseOrderId);\n\n  if (purchaseOrderId && !Array.isArray(purchaseOrderId)) {\n    const supplierData = await db\n      .collection(\"supplier_head\")\n      .where({ id: arguments[0].fieldModel.item.po_supplier_id })\n      .get();\n\n    const supplierContactData = supplierData.data[0].contact_list[0];\n\n    if (supplierContactData) {\n      const supplier_contact_person = supplierContactData.person_name;\n      const supplier_contact_number = supplierContactData.mobile_number;\n      const supplier_email = supplierContactData.person_email;\n\n      await this.setData({\n        supplier_contact_person: supplier_contact_person,\n        supplier_contact_number: supplier_contact_number,\n        supplier_email: supplier_email,\n      });\n    }\n\n    const poArray = [purchaseOrderId];\n\n    await this.setData({\n      currency_code: arguments[0].fieldModel.item.po_currency,\n      supplier_id: arguments[0].fieldModel.item.po_supplier_id,\n      purchase_order_id: poArray,\n      testing_po: poArray,\n    });\n\n    await this.display(\"purchase_order_id\");\n    await this.hide(\"fake_purchase_order_id\");\n    await this.disabled(\"plant_id\", false);\n\n    await processAddressInformation();\n  }\n};\n\nconst formatAddress = (address, state, country) => {\n  const addressComponents = [\n    address.address_line_1,\n    address.address_line_2,\n    address.address_line_3,\n    address.address_line_4,\n    address.address_city,\n    address.address_postal_code,\n    state.state_name,\n    country.country_name,\n  ];\n\n  return addressComponents\n    .filter(Boolean)\n    .join(\",\\n\")\n    .replace(/([^,])\\n/g, \"$1,\\n\");\n};\n\n// Extract address processing to a separate function\nconst processAddressInformation = async () => {\n  try {\n    this.display(\"address_grid\");\n\n    // Reset address fields\n    this.setData({\n      gr_billing_name: \"\",\n      gr_billing_cp: \"\",\n      gr_billing_address: \"\",\n      gr_shipping_address: \"\",\n      billing_address_line_1: \"\",\n      billing_address_line_2: \"\",\n      billing_address_line_3: \"\",\n      billing_address_line_4: \"\",\n      billing_address_city: \"\",\n      billing_address_state: \"\",\n      billing_postal_code: \"\",\n      billing_address_country: \"\",\n      shipping_address_line_1: \"\",\n      shipping_address_line_2: \"\",\n      shipping_address_line_3: \"\",\n      shipping_address_line_4: \"\",\n      shipping_address_city: \"\",\n      shipping_address_state: \"\",\n      shipping_postal_code: \"\",\n      shipping_address_country: \"\",\n    });\n\n    // If not found, try from arguments\n    supplierIdFromPO = arguments[0]?.fieldModel?.item?.po_supplier_id;\n\n    console.log(\"Using supplier ID for address:\", supplierIdFromPO);\n\n    // Get shipping purpose and supplier data concurrently\n    const [resShipping, resSupplier] = await Promise.all([\n      db\n        .collection(\"address_purpose\")\n        .where({ purpose_name: \"Shipping\" })\n        .get(),\n      db.collection(\"supplier_head\").where({ id: supplierIdFromPO }).get(),\n    ]);\n\n    if (\n      !resSupplier.data ||\n      !resSupplier.data.length ||\n      !resShipping.data ||\n      !resShipping.data.length\n    ) {\n      console.warn(\"Missing supplier or shipping purpose data\");\n      return;\n    }\n\n    const supplierData = resSupplier.data[0];\n    const shippingAddrId = resShipping.data[0].id;\n\n    // Check contact list exists\n    if (!supplierData.contact_list || !supplierData.contact_list.length) {\n      console.warn(\"Supplier has no contact information\");\n    } else {\n      this.setData({\n        supplier_contact_person: `${\n          supplierData.contact_list[0].person_name || \"\"\n        } ${supplierData.contact_list[0].person_last_name || \"\"}`.trim(),\n        supplier_contact_number:\n          supplierData.contact_list[0].phone_number || \"\",\n        supplier_email: supplierData.contact_list[0].person_email || \"\",\n      });\n    }\n\n    // Set supplier details\n    this.setData({\n      purchase_order_number: arguments[0]?.fieldModel?.item?.purchase_order_no,\n      supplier_name: supplierData.id,\n    });\n\n    // Process addresses\n    const addresses =\n      supplierData.address_list?.filter(\n        (address) => address.switch_save_as_default\n      ) || [];\n\n    // If no addresses found, log a warning\n    if (!addresses.length) {\n      console.warn(\"No default addresses found for supplier\");\n      return;\n    }\n\n    console.log(`Found ${addresses.length} addresses for supplier`);\n\n    addresses.forEach((address) => {\n      Promise.all([\n        db\n          .collection(\"country\")\n          .where({ id: address.address_country_id })\n          .get(),\n        db.collection(\"state\").where({ id: address.adddress_state }).get(),\n      ]).then(([resCountry, resState]) => {\n        const isShipping = address.address_purpose_id === shippingAddrId;\n        const addressType = isShipping ? \"shipping\" : \"billing\";\n        const country = resCountry.data[0];\n        const state = resState.data[0];\n        // Set address fields\n        this.setData({\n          [`${addressType}_address_line_1`]: address.address_line_1,\n          [`${addressType}_address_line_2`]: address.address_line_2,\n          [`${addressType}_address_line_3`]: address.address_line_3,\n          [`${addressType}_address_line_4`]: address.address_line_4,\n          [`${addressType}_address_city`]: address.address_city,\n          [`${addressType}_address_state`]: state.id,\n          [`${addressType}_postal_code`]: address.address_postal_code,\n          [`${addressType}_address_country`]: country.id,\n          [`gr_${addressType}_address`]: formatAddress(address, state, country),\n        });\n\n        // Set billing-specific fields\n        if (addressType === \"billing\") {\n          this.setData({\n            gr_billing_name: address.address_name || \"\",\n            gr_billing_cp: address.address_phone || \"\",\n          });\n        }\n      });\n    });\n  } catch (error) {\n    this.$message.error(\"Error processing address information:\", error);\n  }\n};\n\n// Start the process with a check for data readiness\ncheckAndProcessData();\n",
        "type": "js"
      }
    ],
    "uniqueGroup": [],
    "params": [
      {
        "key": "l9qmk0sd",
        "name": "page_status",
        "title": "",
        "description": "",
        "bsonType": "string",
        "isExpand": false,
        "children": []
      },
      {
        "key": "ej5aeima",
        "name": "goods_receiving_no",
        "title": "",
        "description": "",
        "bsonType": "string",
        "isExpand": false,
        "children": []
      }
    ],
    "deps": {},
    "paramsDeps": {},
    "styleSheets": ".padding{\n  padding:20px\n}\n\n.margin{\n  margin-left: 15px\n}\n\n.marginright{\n  margin-right: 20px;\n  margin-top : 3px;\n}\n\n.fixbutton{\n  position: fixed;\n  bottom: 0;\n  right: 0;\n}\n\n",
    "dataSource": []
  }
}
