(async () => {
  try {
    // Input validation
    const args = arguments[0];
    if (!args) {
      console.error("No arguments provided");
      return;
    }

    const { row: lineItemData, rowIndex } = args;

    // Validate required data
    if (!lineItemData) {
      console.error("Line item data is missing");
      return;
    }

    if (rowIndex === undefined || rowIndex === null) {
      console.error("Row index is missing");
      return;
    }

    console.log("Processing line item data:", lineItemData);

    // Extract and validate required fields
    const materialId = lineItemData.item_selection;
    const baseUOMid = lineItemData.received_quantity_uom;
    const serialNumberDataRaw = lineItemData.serial_number_data;

    // Validate required fields
    if (!materialId) {
      console.error("Material ID is missing");
      return;
    }

    if (!baseUOMid) {
      console.warn("Base UOM ID is missing, using empty string");
    }

    // Parse serial number data with error handling
    let existingSerialData = null;
    let serialNumberTableData = [];

    if (serialNumberDataRaw) {
      try {
        const parsed = JSON.parse(serialNumberDataRaw);
        if (parsed && typeof parsed === "object") {
          existingSerialData = parsed;
          // Use existing table data if available
          if (
            parsed.table_serial_number &&
            Array.isArray(parsed.table_serial_number)
          ) {
            serialNumberTableData = parsed.table_serial_number;
          }
          console.log("Found existing serial number data:", existingSerialData);
        }
      } catch (parseError) {
        console.error("Error parsing serial number data:", parseError);
        console.warn("Will create new serial number data");
      }
    }

    // Validate database connection
    if (typeof db === "undefined" || !db.collection) {
      console.error("Database connection is not available");
      return;
    }

    // Fetch item data with improved error handling
    try {
      const response = await db
        .collection("Item")
        .where({
          id: materialId,
        })
        .get();

      console.log("Database response:", response);

      // Validate response structure
      if (!response || !response.data || !Array.isArray(response.data)) {
        console.error("Invalid response structure from database");
        return;
      }

      if (response.data.length === 0) {
        console.error(`No item found with ID: ${materialId}`);
        return;
      }

      const itemData = response.data[0];
      console.log(
        "Item data serial number management:",
        itemData.serial_number_management
      );

      if (itemData.serial_number_management !== 1) {
        this.$message.error("Item is not a serialized item");
        return;
      }

      // Validate item data structure
      if (!itemData) {
        console.error("Item data is null or undefined");
        return;
      }

      // Validate this context
      if (typeof this.setData !== "function") {
        console.error("setData method is not available in current context");
        return;
      }

      const baseUOM = await db
        .collection("unit_of_measurement")
        .where({ id: baseUOMid })
        .get()
        .then((res) => {
          return res.data[0].uom_name;
        });

      const isSNAutoGenerated =
        itemData.serial_no_generate_rule === "According To System Settings";

      // Prepare dialog data - use existing data if available, otherwise use fresh data
      let dialogData = {};

      if (existingSerialData) {
        // Use existing serial number data
        console.log("Using existing serial number data");
        dialogData = {
          [`dialog_serial_number.item_id`]:
            existingSerialData.item_id || materialId,
          [`dialog_serial_number.item_code`]:
            existingSerialData.item_code || itemData.material_code || "",
          [`dialog_serial_number.item_name`]:
            existingSerialData.item_name || itemData.material_name || "",
          [`dialog_serial_number.row_index`]:
            existingSerialData.row_index || rowIndex,
          [`dialog_serial_number.serial_number_qty`]:
            existingSerialData.serial_number_qty || 0,
          [`dialog_serial_number.is_auto`]:
            existingSerialData.is_auto !== undefined
              ? existingSerialData.is_auto
              : isSNAutoGenerated
              ? 1
              : 0,
          [`dialog_serial_number.is_single`]:
            existingSerialData.is_single !== undefined
              ? existingSerialData.is_single
              : itemData.is_single_unit_serial,
          [`dialog_serial_number.total_quantity_uom_id`]:
            existingSerialData.total_quantity_uom_id || baseUOMid || "",
          [`dialog_serial_number.total_quantity_uom`]:
            existingSerialData.total_quantity_uom || baseUOM || "",
          [`dialog_serial_number.total_qty_display`]:
            existingSerialData.total_qty_display || 0,
          [`dialog_serial_number.new_rows`]: existingSerialData.new_rows || 0,
          [`dialog_serial_number.table_serial_number`]: serialNumberTableData,
        };

        // Handle image data
        if (
          existingSerialData.item_image_url &&
          existingSerialData.item_image_url !== ""
        ) {
          dialogData[`dialog_serial_number.item_image_url`] =
            existingSerialData.item_image_url;
        } else if (itemData.item_image) {
          dialogData[`dialog_serial_number.item_image_url`] =
            itemData.item_image;
        }
      } else {
        // Create fresh dialog data
        console.log("Creating fresh serial number data");
        dialogData = {
          [`dialog_serial_number.item_id`]: itemData.id || materialId,
          [`dialog_serial_number.item_code`]: itemData.material_code || "",
          [`dialog_serial_number.item_name`]: itemData.material_name || "",
          [`dialog_serial_number.row_index`]: rowIndex,
          [`dialog_serial_number.serial_number_qty`]: 0,
          [`dialog_serial_number.is_auto`]: isSNAutoGenerated ? 1 : 0,
          [`dialog_serial_number.is_single`]: itemData.is_single_unit_serial,
          [`dialog_serial_number.total_quantity_uom_id`]: baseUOMid || "",
          [`dialog_serial_number.total_quantity_uom`]: baseUOM || "",
          [`dialog_serial_number.new_rows`]: 0,
          [`dialog_serial_number.table_serial_number`]: [],
        };

        // Handle image data for fresh data
        if (itemData.item_image) {
          dialogData[`dialog_serial_number.item_image_url`] =
            itemData.item_image;
        }
      }

      // Display image if available
      if (dialogData[`dialog_serial_number.item_image_url`]) {
        await this.display("dialog_serial_number.item_image");
        console.log(
          "Item image set:",
          dialogData[`dialog_serial_number.item_image_url`]
        );
      }

      await this.setData(dialogData);
      this.openDialog("dialog_serial_number");

      console.log("Dialog data set successfully:", dialogData);
    } catch (dbError) {
      console.error("Database operation failed:", dbError);

      // Optional: Set minimal data even if DB fetch fails
      if (typeof this.setData === "function") {
        const fallbackData = {
          [`dialog_serial_number.item_id`]: materialId,
          [`dialog_serial_number.row_index`]: rowIndex,
          [`dialog_serial_number.serial_number_qty`]:
            existingSerialData?.serial_number_qty || 0,
          [`dialog_serial_number.total_quantity_uom`]:
            existingSerialData?.total_quantity_uom || "",
          [`dialog_serial_number.table_serial_number`]: serialNumberTableData,
        };

        await this.setData(fallbackData);
        this.openDialog("dialog_serial_number");
        console.log("Set minimal dialog data due to database error");
      }
    }
  } catch (error) {
    console.error("Unexpected error in serial number handler:", error);

    // Log stack trace for debugging
    if (error.stack) {
      console.error("Stack trace:", error.stack);
    }
  }
})();
