{
  "list": [
    {
      "name": "Flex",
      "type": "flex",
      "el": "su-fm-flex",
      "mainIcon": "自动布局",
      "typeIcon": "自动布局",
      "icon": "icon-zhediemianban",
      "group": "Design",
      "groupSort": 6,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "title": "布局",
        "customClass": "",
        "hidden": false,
        "recursive": false,
        "recursiveStyleFx": "",
        "slotTarget": "",
        "defaultValue": "",
        "flexDirection": "row",
        "flexWrap": "nowrap",
        "alignItems": "",
        "justifyContent": "",
        "hGap": "",
        "vGap": "",
        "grid": {
          "row": {
            "value": "",
            "visible": true
          },
          "col": {
            "value": "",
            "visible": true
          },
          "use": false
        },
        "padding": ["", "", "", ""],
        "margin": ["", "", "", ""],
        "boxSizing": "border-box",
        "width": "",
        "height": "",
        "radius": ["", "", "", ""],
        "position": "",
        "positions": ["", "", "", ""],
        "zIndex": "",
        "flex": "",
        "flexGrow": "",
        "flexShrink": "",
        "fills": [],
        "borders": [],
        "effects": [],
        "states": [],
        "hoverClass": "",
        "overflow": "",
        "styleFx": "",
        "behave": "",
        "remoteFunc": "func_2det1nd2",
        "remoteOption": "option_2det1nd2",
        "tableColumn": false,
        "subform": false,
        "props": {},
        "datasource": {
          "source": null,
          "rules": {
            "collectionId": "",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "remote": false,
        "remoteType": "datasource",
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "dynamicValueType": "fx",
        "isDynamicValue": false,
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        }
      },
      "list": [
        {
          "name": "",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Stock Movement",
            "customClass": "marginright",
            "hidden": false,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "",
            "color": "#333333",
            "fontSize": "24px",
            "fontWeight": "700",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_7dy5bu8v",
            "remoteOption": "option_7dy5bu8v",
            "tableColumn": false,
            "subform": false,
            "dynamicValueType": "fx",
            "isDynamicValue": false,
            "dynamicValueFx": ""
          },
          "events": {
            "onClick": ""
          },
          "key": "7dy5bu8v",
          "model": "stock_movement_tittle",
          "rules": []
        },
        {
          "name": "Issued Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Issued Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .issued-button {\n            padding: 0 20px;\n            border: 2px solid #1FAA7D;\n            background-color: #A9FAEB;\n            color: #OA7659;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"issued-button\">Issued</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_q5beasd4",
            "remoteOption": "option_q5beasd4",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true,
            "customClass": "",
            "dynamicValueType": "fx",
            "isDynamicValue": false
          },
          "events": {
            "onChange": ""
          },
          "key": "q5beasd4",
          "model": "issued_status",
          "rules": []
        },
        {
          "name": "Draft Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Draft Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .draft-button {\n            padding: 0 20px;\n            border: 2px solid #8C95A4;\n            background-color: #D0D5DD;\n            color: #4D5A74;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"draft-button\">Draft</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_x1z9chx8",
            "remoteOption": "option_x1z9chx8",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true,
            "customClass": ""
          },
          "events": {
            "onChange": ""
          },
          "key": "x1z9chx8",
          "model": "draft_status",
          "rules": []
        },
        {
          "name": "Processing Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Processing Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .processing-button {\n            padding: 0 20px;\n            border: 2px solid #FFBB00;\n            background-color: #FFFCDD;\n            color: #8F6A04;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"processing-button\">Processing</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_h1v59g0w",
            "remoteOption": "option_h1v59g0w",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true,
            "customClass": ""
          },
          "events": {
            "onChange": ""
          },
          "key": "h1v59g0w",
          "model": "processing_status",
          "rules": []
        },
        {
          "name": "Created Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Draft Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #C6DFFF;\n        }\n\n        .created-button {\n            padding: 0 20px;\n            border: 2px solid #036DF8;\n            background-color: #C6DFFF;\n            color: #4D5A74;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"created-button\">Created</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_h1v59g0w",
            "remoteOption": "option_h1v59g0w",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true,
            "customClass": ""
          },
          "events": {
            "onChange": ""
          },
          "key": "tz3v79xg",
          "model": "created_status",
          "rules": []
        },
        {
          "name": "Completed Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Completed Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .completed-button {\n            padding: 0 20px;\n            border: 2px solid #00AE00;\n            background-color: #C5F5C5;\n            color: #016701;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"completed-button\">Completed</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_cgsksd6l",
            "remoteOption": "option_cgsksd6l",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true,
            "customClass": ""
          },
          "events": {
            "onChange": ""
          },
          "key": "cgsksd6l",
          "model": "completed_status",
          "rules": []
        },
        {
          "name": "Fully Posted Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Fully Posted Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .fullyposted-button {\n            padding: 0 20px;\n            border: 2px solid #00AE00;\n            background-color: #C5F5C5;\n            color: #016701;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"fullyposted-button\">Fully Posted</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_cgsksd6l",
            "remoteOption": "option_cgsksd6l",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true,
            "customClass": ""
          },
          "events": {
            "onChange": ""
          },
          "key": "7jaqmoww",
          "model": "fullyposted_status",
          "rules": []
        }
      ],
      "events": {
        "onClick": ""
      },
      "key": "2det1nd2",
      "model": "flex_2det1nd2",
      "rules": []
    },
    {
      "name": "Stock Movement Status",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_z6tj798w",
        "remoteOption": "option_z6tj798w",
        "tableColumn": false,
        "subform": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "z6tj798w",
      "model": "stock_movement_status",
      "rules": []
    },
    {
      "name": "Posted Status",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_z6tj798w",
        "remoteOption": "option_z6tj798w",
        "tableColumn": false,
        "subform": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "ox3wrmoo",
      "model": "posted_status",
      "rules": []
    },
    {
      "name": "Page Status",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_z6tj798w",
        "remoteOption": "option_z6tj798w",
        "tableColumn": false,
        "subform": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "n8hu0kme",
      "model": "page_status",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Issue Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": true,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_btdx1wqm",
                "remoteOption": "option_btdx1wqm",
                "tableColumn": false,
                "subform": false,
                "labelWrap": false,
                "dynamicValueFx": "new Date().toISOString().split('T')[0];",
                "dynamicValueType": "fx",
                "isDynamicValue": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "btdx1wqm",
              "model": "issue_date",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "Stock Movement No.",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": true,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "Stock Movement Number (Auto Generated)",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_oj6ry78r",
                "remoteOption": "option_oj6ry78r",
                "tableColumn": false,
                "subform": false,
                "dynamicValueFx": "",
                "dynamicValueType": "fx",
                "isDynamicValue": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "oj6ry78r",
              "model": "stock_movement_no",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "Movement Type",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": "{{{{value:movement_id}}}}",
                "clearable": true,
                "placeholder": "Select a movement type",
                "required": true,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_aqszvkof",
                "filterable": false,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "dict_key",
                  "label": "dict_key",
                  "cascade": "",
                  "children": "children",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_aqszvkof",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "系统字典(勿删):Table:1897577528487428098",
                  "rules": {
                    "collectionId": "1897577528487428098",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "parent_id",
                        "operator": "numberEqual",
                        "valueType": "value",
                        "value": "1914243537100414977",
                        "type": "leaf",
                        "level": 1,
                        "propLabel": "父主键",
                        "valueLabel": "",
                        "operatorLabel": "等于",
                        "valueTypeLabel": "值"
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "dynamicValueType": "fx",
                "isDynamicValue": false
              },
              "events": {
                "onChange": "bsbctavk",
                "onFocus": "0ehtz1od",
                "onBlur": ""
              },
              "novalid": {},
              "key": "aqszvkof",
              "model": "movement_type",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "Movement Type ID",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_w8ew1vu5",
                "remoteOption": "option_w8ew1vu5",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "w8ew1vu5",
              "model": "movement_type_id",
              "rules": []
            },
            {
              "name": "Movement Reason",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": "{{{{value:movement_id}}}}",
                "clearable": true,
                "placeholder": "Select a movement reason",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_aqszvkof",
                "filterable": false,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "dict_key",
                  "label": "dict_key",
                  "cascade": "CASCADE",
                  "children": "children",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_aqszvkof",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "系统字典(勿删):Table:1897577528487428098",
                  "rules": {
                    "collectionId": "1897577528487428098",
                    "list": [
                      {
                        "id": 1746506110381,
                        "parentId": 1746506110380,
                        "isTop": true,
                        "prop": "parent_id",
                        "operator": "numberEqual",
                        "valueType": "field",
                        "value": "{{value:movement_type_id}}",
                        "type": "leaf",
                        "level": 1,
                        "propLabel": "父主键",
                        "valueLabel": "",
                        "operatorLabel": "等于",
                        "valueTypeLabel": "字段"
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "dynamicValueType": "fx",
                "isDynamicValue": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "dk8idbew",
              "model": "movement_reason",
              "rules": []
            },
            {
              "name": "Issued By",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_zowopncq",
                "remoteOption": "option_zowopncq",
                "tableColumn": false,
                "subform": false,
                "dynamicValueType": "fx",
                "isDynamicValue": true,
                "dynamicValueFx": "{{global:nickname}}"
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "zowopncq",
              "model": "issued_by",
              "rules": []
            },
            {
              "name": "Plant",
              "type": "treeselect",
              "mainIcon": "下拉树状单选",
              "typeIcon": "下拉树状单选",
              "icon": "icon-shuxuanzeqi",
              "group": "Select",
              "groupSort": 4,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "width": "",
                "placeholder": "",
                "disabled": false,
                "clearable": false,
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1",
                    "children": [
                      {
                        "value": "Option 1 - children",
                        "label": "Option 1 - children"
                      }
                    ]
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2",
                    "children": [
                      {
                        "value": "Option 2 - children",
                        "label": "Option 2 - children"
                      }
                    ]
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_d4051zkj",
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "dept_name",
                  "children": "children",
                  "cascade": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_d4051zkj",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "required": true,
                "validatorCheck": false,
                "validator": "",
                "multiple": false,
                "filterable": false,
                "checkStrictly": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 0,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "组织机构(勿删勿改):Table:1789995126399348747",
                  "rules": {
                    "collectionId": "1789995126399348747",
                    "list": [
                      {
                        "id": 1746500776233,
                        "parentId": 1746500776234,
                        "isTop": true,
                        "type": "branch",
                        "operator": "any",
                        "prop": "",
                        "valueType": "",
                        "value": "",
                        "level": 1,
                        "children": [
                          {
                            "id": 1723795236686,
                            "parentId": 1746500776233,
                            "isTop": false,
                            "prop": "parent_id",
                            "operator": "numberEqualAny",
                            "valueType": "formula",
                            "value": "{{system:deptIds}}.split(',')",
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "父主键",
                            "valueLabel": "",
                            "operatorLabel": "等于任一",
                            "valueTypeLabel": "公式"
                          },
                          {
                            "id": 1746500776235,
                            "parentId": 1746500776233,
                            "isTop": false,
                            "prop": "id",
                            "operator": "in",
                            "valueType": "formula",
                            "value": "{{system:deptIds}}.split(',')",
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "主键ID",
                            "valueLabel": "",
                            "operatorLabel": "等于任意一个",
                            "valueTypeLabel": "公式"
                          }
                        ]
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "dynamicValueType": "fx",
                "isDynamicValue": false
              },
              "events": {
                "onChange": "fgivan7v",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "d4051zkj",
              "model": "issuing_operation_faci",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "Remarks",
              "type": "textarea",
              "mainIcon": "多行文本",
              "typeIcon": "多行文本(1)",
              "icon": "icon-diy-com-textarea",
              "group": "Text",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "disabled": false,
                "pattern": "",
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "rows": 2,
                "autosize": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_zq62c1v9",
                "remoteOption": "option_zq62c1v9",
                "tableColumn": false,
                "subform": false,
                "labelWrap": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "zq62c1v9",
              "model": "remarks",
              "rules": []
            },
            {
              "name": "Delivery Method",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "Select a delivery method",
                "required": true,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_6hqoyzoy",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "delivery_mthd_name",
                  "label": "delivery_mthd_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_6hqoyzoy",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Delivery Method:Table:1901980427804069890",
                  "rules": {
                    "collectionId": "1901980427804069890",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "value",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "mpv8l5hi",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "6hqoyzoy",
              "model": "delivery_method",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            }
          ],
          "key": "gf2ci2tp",
          "rules": []
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Reference Documents",
              "type": "fileupload",
              "mainIcon": "文件上传",
              "typeIcon": "文件上传",
              "icon": "icon-wenjianshangchuan",
              "group": "Special",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "width": "",
                "tokenFunc": "funcGetToken",
                "token": "",
                "tokenType": "datasource",
                "disabled": false,
                "tip": "",
                "action": "/api/blade-resource/oss/endpoint/put-file",
                "customClass": "",
                "limit": 9,
                "multiple": false,
                "isQiniu": false,
                "labelWidth": 140,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "headers": [],
                "required": false,
                "validatorCheck": false,
                "validator": "",
                "withCredentials": false,
                "remoteFunc": "func_av25y6lh",
                "remoteOption": "option_av25y6lh",
                "tableColumn": false,
                "subform": false,
                "dynamicValueType": "fx",
                "isDynamicValue": false
              },
              "events": {
                "onChange": "",
                "onSelect": "",
                "onUploadSuccess": "",
                "onUploadError": "",
                "onRemove": ""
              },
              "key": "av25y6lh",
              "model": "reference_documents",
              "rules": [],
              "novalid": {}
            },
            {
              "name": "Receiving Plant",
              "type": "treeselect",
              "mainIcon": "下拉树状单选",
              "typeIcon": "下拉树状单选",
              "icon": "icon-shuxuanzeqi",
              "group": "Select",
              "groupSort": 4,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "width": "",
                "placeholder": "",
                "disabled": false,
                "clearable": false,
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1",
                    "children": [
                      {
                        "value": "Option 1 - children",
                        "label": "Option 1 - children"
                      }
                    ]
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2",
                    "children": [
                      {
                        "value": "Option 2 - children",
                        "label": "Option 2 - children"
                      }
                    ]
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_d4051zkj",
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "dept_name",
                  "children": "children",
                  "cascade": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_d4051zkj",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "required": true,
                "validatorCheck": false,
                "validator": "",
                "multiple": false,
                "filterable": false,
                "checkStrictly": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 0,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "组织机构(勿删勿改):Table:1789995126399348747",
                  "rules": {
                    "collectionId": "1789995126399348747",
                    "list": [
                      {
                        "id": 1746500776233,
                        "parentId": 1746500776234,
                        "isTop": true,
                        "type": "branch",
                        "operator": "any",
                        "prop": "",
                        "valueType": "",
                        "value": "",
                        "level": 1,
                        "children": [
                          {
                            "id": 1723795236686,
                            "parentId": 1746500776233,
                            "isTop": false,
                            "prop": "parent_id",
                            "operator": "numberEqualAny",
                            "valueType": "formula",
                            "value": "{{system:deptIds}}.split(',')",
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "父主键",
                            "valueLabel": "",
                            "operatorLabel": "等于任一",
                            "valueTypeLabel": "公式"
                          },
                          {
                            "id": 1746500776235,
                            "parentId": 1746500776233,
                            "isTop": false,
                            "prop": "id",
                            "operator": "in",
                            "valueType": "formula",
                            "value": "{{system:deptIds}}.split(',')",
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "主键ID",
                            "valueLabel": "",
                            "operatorLabel": "等于任意一个",
                            "valueTypeLabel": "公式"
                          }
                        ]
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "4n2aboey",
              "model": "receiving_operation_faci",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "movement id",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_ml2wl5g8",
                "remoteOption": "option_ml2wl5g8",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "ml2wl5g8",
              "model": "movement_id",
              "rules": []
            },
            {
              "name": "Organization ID",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_ml2wl5g8",
                "remoteOption": "option_ml2wl5g8",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "atit8lbk",
              "model": "organization_id",
              "rules": []
            },
            {
              "name": "Link to Production Order",
              "type": "switch",
              "mainIcon": "开关",
              "typeIcon": "开关",
              "icon": "icon-switch",
              "group": "Select",
              "groupSort": 8,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": 0,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "disabled": true,
                "customClass": "",
                "labelWidth": 120,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "width": "",
                "customProps": {},
                "tip": "",
                "booleanValueMode": false,
                "alignright": false,
                "checkboxMode": false,
                "remoteFunc": "func_tnup46pu",
                "remoteOption": "option_tnup46pu",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "fbiujspl"
              },
              "key": "tnup46pu",
              "model": "is_production_order",
              "rules": [],
              "novalid": {}
            },
            {
              "name": "Production Order No",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": true,
                "clearable": false,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_h36q4612",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "production_order_no",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_h36q4612",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Production Order:Table:1902698051772989442",
                  "rules": {
                    "collectionId": "1902698051772989442",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "h36q4612",
              "model": "production_order_id",
              "rules": []
            }
          ],
          "key": "x1guu5dg",
          "rules": []
        }
      ],
      "options": {
        "gutter": 16,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_x46134mc",
        "remoteOption": "option_x46134mc",
        "tableColumn": false,
        "subform": false,
        "dynamicValueType": "fx",
        "isDynamicValue": false,
        "defaultValue": ""
      },
      "key": "x46134mc",
      "model": "grid_x46134mc",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Driver Name",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_vhtnjjmf",
                "remoteOption": "option_vhtnjjmf",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "vhtnjjmf",
              "model": "driver_name",
              "rules": []
            },
            {
              "name": "Driver Contact No",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_lzxe0dhw",
                "remoteOption": "option_lzxe0dhw",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "lzxe0dhw",
              "model": "driver_contact_no",
              "rules": []
            }
          ],
          "key": "5qc2nyre"
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Vehicle Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_y6y5dijo",
                "remoteOption": "option_y6y5dijo",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "y6y5dijo",
              "model": "vehicle_no",
              "rules": []
            },
            {
              "name": "Pickup Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_up4jtjtr",
                "remoteOption": "option_up4jtjtr",
                "tableColumn": false,
                "subform": false,
                "dynamicValueType": "fx",
                "isDynamicValue": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "up4jtjtr",
              "model": "pickup_date",
              "rules": []
            }
          ],
          "key": "rjsyuq2f"
        }
      ],
      "options": {
        "gutter": 16,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_j93rq82y",
        "remoteOption": "option_j93rq82y",
        "tableColumn": false,
        "subform": false,
        "defaultValue": ""
      },
      "key": "j93rq82y",
      "model": "self_pickup",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Courier Company",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_0qhi116p",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "courier_name",
                  "label": "courier_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_0qhi116p",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Courier Company:Table:1901984960940724226",
                  "rules": {
                    "collectionId": "1901984960940724226",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "0qhi116p",
              "model": "courier_company",
              "rules": []
            },
            {
              "name": "Shipping Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_up4jtjtr",
                "remoteOption": "option_up4jtjtr",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "icogvifv",
              "model": "shipping_date",
              "rules": []
            },
            {
              "name": "Freight Charges",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_lzxe0dhw",
                "remoteOption": "option_lzxe0dhw",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "4jq65hp2",
              "model": "freight_charges",
              "rules": []
            }
          ],
          "key": "hmkw3emc"
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Tracking Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_y6y5dijo",
                "remoteOption": "option_y6y5dijo",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "yq3scl97",
              "model": "tracking_number",
              "rules": []
            },
            {
              "name": "Est. Arrival Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_up4jtjtr",
                "remoteOption": "option_up4jtjtr",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "5xqzaimy",
              "model": "est_arrival_date",
              "rules": []
            }
          ],
          "key": "8lz7n7u4"
        }
      ],
      "options": {
        "gutter": 16,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_j93rq82y",
        "remoteOption": "option_j93rq82y",
        "tableColumn": false,
        "subform": false,
        "defaultValue": ""
      },
      "key": "quc9iwrp",
      "model": "courier_service",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Driver Name",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_vhtnjjmf",
                "remoteOption": "option_vhtnjjmf",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "to8e5cog",
              "model": "driver_name",
              "rules": []
            },
            {
              "name": "Driver Contact No.",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_vhtnjjmf",
                "remoteOption": "option_vhtnjjmf",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "6q72hxko",
              "model": "driver_contact_no",
              "rules": []
            },
            {
              "name": "Delivery Cost",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_lzxe0dhw",
                "remoteOption": "option_lzxe0dhw",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "x3pfv8kk",
              "model": "delivery_cost",
              "rules": []
            }
          ],
          "key": "aq5jjbok"
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Vehicle Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_y6y5dijo",
                "remoteOption": "option_y6y5dijo",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "d8rno998",
              "model": "vehicle_no",
              "rules": []
            },
            {
              "name": "Est. Delivery Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_up4jtjtr",
                "remoteOption": "option_up4jtjtr",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "4bbzihnm",
              "model": "est_delivery_date",
              "rules": []
            }
          ],
          "key": "hgmrp2nm"
        }
      ],
      "options": {
        "gutter": 16,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_j93rq82y",
        "remoteOption": "option_j93rq82y",
        "tableColumn": false,
        "subform": false,
        "defaultValue": ""
      },
      "key": "cybuitmp",
      "model": "company_truck",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Shipping Company",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_0qhi116p",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "courier_name",
                  "label": "courier_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_0qhi116p",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Courier Company:Table:1901984960940724226",
                  "rules": {
                    "collectionId": "1901984960940724226",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "wis09jc9",
              "model": "shipping_company",
              "rules": []
            },
            {
              "name": "Shipping Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_up4jtjtr",
                "remoteOption": "option_up4jtjtr",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "qn0dl3t6",
              "model": "date_qn0dl3t6",
              "rules": []
            },
            {
              "name": "Freight Charges",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_lzxe0dhw",
                "remoteOption": "option_lzxe0dhw",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "77h4nsq8",
              "model": "input_77h4nsq8",
              "rules": []
            }
          ],
          "key": "v1n6mdnr"
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Shipping Method",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_0qhi116p",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "shipping_method_name",
                  "label": "shipping_method_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_0qhi116p",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Shipping Method:Table:1902675462858063873",
                  "rules": {
                    "collectionId": "1902675462858063873",
                    "list": [
                      {
                        "id": 1746501328151,
                        "parentId": 1746501328150,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "ofsqij3n",
              "model": "shipping_method",
              "rules": []
            },
            {
              "name": "Est. Arrival Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_up4jtjtr",
                "remoteOption": "option_up4jtjtr",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "5my2j6v4",
              "model": "est_arrival_date",
              "rules": []
            },
            {
              "name": "Tracking Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_y6y5dijo",
                "remoteOption": "option_y6y5dijo",
                "tableColumn": false,
                "subform": false,
                "labelWrap": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "eb7qeldt",
              "model": "tracking_no",
              "rules": []
            }
          ],
          "key": "s4ax0m38",
          "rules": []
        }
      ],
      "options": {
        "gutter": 16,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_j93rq82y",
        "remoteOption": "option_j93rq82y",
        "tableColumn": false,
        "subform": false,
        "defaultValue": ""
      },
      "key": "987o9p2j",
      "model": "shipping_service",
      "rules": []
    },
    {
      "name": "标签页",
      "type": "tabs",
      "mainIcon": "标签页",
      "typeIcon": "标签页",
      "icon": "icon-tabs",
      "group": "Layout",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "tabs": [
        {
          "label": "Stock Movement",
          "name": "tab_stock_movement",
          "list": [
            {
              "name": "Stock movement",
              "type": "table",
              "mainIcon": "子表单",
              "typeIcon": "子表单",
              "icon": "icon-table",
              "group": "Container",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": [],
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "disabled": false,
                "required": false,
                "validatorCheck": false,
                "validator": "",
                "paging": false,
                "pageSize": 5,
                "isAdd": true,
                "isDelete": true,
                "showControl": true,
                "virtualTable": true,
                "sortable": true,
                "tip": "",
                "remoteFunc": "func_d2c7o1jd",
                "remoteOption": "option_d2c7o1jd",
                "tableColumn": false,
                "subform": false,
                "hideLabel": true
              },
              "events": {
                "onChange": "",
                "onRowAdd": "",
                "onRowRemove": "",
                "onPageChange": ""
              },
              "tableColumns": [
                {
                  "name": "Item",
                  "el": "su-fm-table-select",
                  "mainIcon": "数据源",
                  "typeIcon": "数据源",
                  "group": "Select",
                  "groupSort": 4,
                  "generate": "part",
                  "enableScopes": ["Component", "Table", "Page"],
                  "options": {
                    "defaultValue": [],
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "disabled": false,
                    "dataBind": true,
                    "required": false,
                    "validator": "",
                    "hideLabel": false,
                    "pageSourceId": "1921600217086271489",
                    "customProps": {},
                    "pagingEnabled": true,
                    "multiple": false,
                    "placeholder": "Select Item",
                    "lazyLoad": true,
                    "props": {
                      "value": "id",
                      "label": "material_name",
                      "cascade": "",
                      "children": "",
                      "image": "",
                      "icon": ""
                    },
                    "datasource": {
                      "source": "Item:Table:1901546842240438273",
                      "rules": {
                        "collectionId": "1901546842240438273",
                        "list": [
                          {
                            "id": 1747191887447,
                            "parentId": 1747191887446,
                            "isTop": true,
                            "prop": "",
                            "operator": "",
                            "valueType": "",
                            "value": "",
                            "type": "leaf",
                            "level": 1
                          }
                        ]
                      },
                      "paging_enabled": 0,
                      "paging_way": "Pagination",
                      "page_size": 10,
                      "more_fields": [],
                      "datasource": {
                        "source": null,
                        "rules": {
                          "collectionId": "",
                          "list": [
                            {
                              "id": 1723795236686,
                              "parentId": 1723795236685,
                              "isTop": true,
                              "prop": "",
                              "operator": "",
                              "valueType": "",
                              "value": "",
                              "type": "leaf",
                              "level": 1
                            }
                          ]
                        }
                      },
                      "url_params": {
                        "list": [
                          {
                            "prop": "",
                            "propLabel": "",
                            "operator": "",
                            "operatorLabel": "",
                            "valueType": "value",
                            "valueTypeLabel": "",
                            "value": null,
                            "valueLabel": ""
                          }
                        ]
                      },
                      "body_params": {
                        "list": [
                          {
                            "prop": "",
                            "propLabel": "",
                            "operator": "",
                            "operatorLabel": "",
                            "valueType": "value",
                            "valueTypeLabel": "",
                            "value": null,
                            "valueLabel": ""
                          }
                        ]
                      },
                      "request_params": {
                        "list": [
                          {
                            "prop": "",
                            "propLabel": "",
                            "operator": "",
                            "operatorLabel": "",
                            "valueType": "value",
                            "valueTypeLabel": "",
                            "value": null,
                            "valueLabel": ""
                          }
                        ]
                      }
                    },
                    "remoteFunc": "func_1umnwyzh",
                    "remoteOption": "option_1umnwyzh",
                    "tableColumn": true,
                    "subform": false,
                    "paging_enabled": 1,
                    "paging_way": "Pagination",
                    "page_size": 10,
                    "more_fields": [],
                    "url_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    },
                    "body_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    },
                    "request_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    },
                    "columns": [
                      {
                        "title": "Item Name",
                        "name": "material_name"
                      },
                      {
                        "title": "Item Code",
                        "name": "material_code"
                      }
                    ],
                    "remote": true,
                    "remoteType": "innerdatasource",
                    "pageId": "1921600217140797441"
                  },
                  "events": {
                    "onChange": "llytn27o"
                  },
                  "type": "custom",
                  "novalid": {},
                  "key": "1umnwyzh",
                  "model": "item_selection",
                  "rules": []
                },
                {
                  "name": "Transfer Stock",
                  "type": "link",
                  "mainIcon": "链接",
                  "typeIcon": "链接",
                  "icon": "icon-lianjie",
                  "group": "Buttons",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "options": {
                    "customClass": "",
                    "disabled": false,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hideLabel": false,
                    "hidden": false,
                    "linkType": "default",
                    "linkName": "Select Stock",
                    "underline": true,
                    "blank": true,
                    "href": "",
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_6kvpbga8",
                    "remoteOption": "option_6kvpbga8",
                    "tableColumn": true,
                    "subform": false,
                    "dynamicValueType": "fx",
                    "isDynamicValue": false
                  },
                  "events": {
                    "onClick": "evhzkk8e"
                  },
                  "novalid": {},
                  "key": "6kvpbga8",
                  "model": "transfer_stock",
                  "rules": []
                },
                {
                  "name": "View Stock",
                  "type": "link",
                  "mainIcon": "链接",
                  "typeIcon": "链接",
                  "icon": "icon-lianjie",
                  "group": "Buttons",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "options": {
                    "customClass": "",
                    "disabled": false,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hideLabel": false,
                    "hidden": false,
                    "linkType": "default",
                    "linkName": "View Stock",
                    "underline": true,
                    "blank": true,
                    "href": "",
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_tixn4k35",
                    "remoteOption": "option_tixn4k35",
                    "tableColumn": true,
                    "subform": false
                  },
                  "events": {
                    "onClick": "19uhebdu"
                  },
                  "novalid": {},
                  "key": "tixn4k35",
                  "model": "view_stock",
                  "rules": []
                },
                {
                  "name": "Edit Stock",
                  "type": "link",
                  "mainIcon": "链接",
                  "typeIcon": "链接",
                  "icon": "icon-lianjie",
                  "group": "Buttons",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "options": {
                    "customClass": "",
                    "disabled": false,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hideLabel": false,
                    "hidden": false,
                    "linkType": "default",
                    "linkName": "Edit Stock",
                    "underline": true,
                    "blank": true,
                    "href": "",
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_mtydos3l",
                    "remoteOption": "option_mtydos3l",
                    "tableColumn": true,
                    "subform": false
                  },
                  "events": {
                    "onClick": "wx6qvi6y"
                  },
                  "novalid": {},
                  "key": "mtydos3l",
                  "model": "edit_stock",
                  "rules": []
                },
                {
                  "name": "Requested Quantity",
                  "type": "number",
                  "icon": "icon-number",
                  "mainIcon": "数字",
                  "typeIcon": "数字",
                  "group": "Number",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-number",
                  "options": {
                    "width": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "defaultValue": 0,
                    "min": 0,
                    "step": 1,
                    "disabled": true,
                    "controls": false,
                    "controlsPosition": "",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": true,
                    "dataBind": true,
                    "precision": 0,
                    "customProps": {
                      "progressColor": "",
                      "dividingNumber": "",
                      "showNumber": "",
                      "viewMode": "",
                      "format": "rmb",
                      "cacheProp": true
                    },
                    "tip": "",
                    "remoteFunc": "func_ctr4vwvd",
                    "remoteOption": "option_ctr4vwvd",
                    "tableColumn": true,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "ctr4vwvd",
                  "model": "requested_qty",
                  "rules": []
                },
                {
                  "name": "Total quantity",
                  "type": "number",
                  "icon": "icon-number",
                  "mainIcon": "数字",
                  "typeIcon": "数字",
                  "group": "Number",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-number",
                  "options": {
                    "width": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "defaultValue": 0,
                    "min": 0,
                    "step": 1,
                    "disabled": true,
                    "controls": false,
                    "controlsPosition": "",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "precision": 0,
                    "customProps": {
                      "progressColor": "",
                      "dividingNumber": "",
                      "showNumber": "",
                      "viewMode": "",
                      "format": "rmb",
                      "cacheProp": true
                    },
                    "tip": "",
                    "remoteFunc": "func_p1ff57tx",
                    "remoteOption": "option_p1ff57tx",
                    "tableColumn": true,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "u9g4y1dw",
                  "model": "total_quantity",
                  "rules": []
                },
                {
                  "name": "Received",
                  "type": "number",
                  "icon": "icon-number",
                  "mainIcon": "数字",
                  "typeIcon": "数字",
                  "group": "Number",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-number",
                  "options": {
                    "width": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "defaultValue": 0,
                    "min": 0,
                    "step": 1,
                    "disabled": true,
                    "controls": false,
                    "controlsPosition": "",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "precision": 0,
                    "customProps": {
                      "progressColor": "",
                      "dividingNumber": "",
                      "showNumber": "",
                      "viewMode": "",
                      "format": "rmb",
                      "cacheProp": true
                    },
                    "tip": "",
                    "remoteFunc": "func_u7v6iq2q",
                    "remoteOption": "option_u7v6iq2q",
                    "tableColumn": true,
                    "subform": false,
                    "bigint": 0
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "u7v6iq2q",
                  "model": "to_recv_qty",
                  "rules": []
                },
                {
                  "name": "Receive quantity",
                  "type": "number",
                  "icon": "icon-number",
                  "mainIcon": "数字",
                  "typeIcon": "数字",
                  "group": "Number",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-number",
                  "options": {
                    "width": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "defaultValue": 0,
                    "min": 0,
                    "step": 1,
                    "disabled": false,
                    "controls": false,
                    "controlsPosition": "",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "precision": 0,
                    "customProps": {
                      "progressColor": "",
                      "dividingNumber": "",
                      "showNumber": "",
                      "viewMode": "",
                      "format": "rmb",
                      "cacheProp": true
                    },
                    "tip": "",
                    "remoteFunc": "func_p1ff57tx",
                    "remoteOption": "option_p1ff57tx",
                    "tableColumn": true,
                    "subform": false
                  },
                  "events": {
                    "onChange": "27cag30p",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "p1ff57tx",
                  "model": "received_quantity",
                  "rules": []
                },
                {
                  "name": "Received quantity (UOM)",
                  "type": "select",
                  "mainIcon": "下拉单选",
                  "typeIcon": "下拉单选",
                  "icon": "icon-select",
                  "group": "Select",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-select",
                  "options": {
                    "defaultValue": "",
                    "multiple": false,
                    "disabled": false,
                    "clearable": true,
                    "placeholder": "Select UOM",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "width": "",
                    "options": [
                      {
                        "value": "Option 1",
                        "label": "Option 1"
                      },
                      {
                        "value": "Option 2",
                        "label": "Option 2"
                      },
                      {
                        "value": "Option 3",
                        "label": "Option 3"
                      }
                    ],
                    "remote": true,
                    "remoteType": "innerdatasource",
                    "remoteOption": "option_rqmu1xxi",
                    "filterable": true,
                    "pagingEnabled": true,
                    "remoteOptions": [],
                    "props": {
                      "value": "id",
                      "label": "uom_name",
                      "cascade": "",
                      "children": "",
                      "image": "",
                      "icon": ""
                    },
                    "remoteFunc": "func_rqmu1xxi",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "customProps": {},
                    "tip": "",
                    "tableColumn": true,
                    "subform": false,
                    "paging_enabled": 0,
                    "paging_way": "Pagination",
                    "page_size": 10,
                    "more_fields": [],
                    "datasource": {
                      "source": "UOM:Table:1901805375573839874",
                      "rules": {
                        "collectionId": "1901805375573839874",
                        "list": [
                          {
                            "id": 1723795236686,
                            "parentId": 1723795236685,
                            "isTop": true,
                            "prop": "",
                            "operator": "",
                            "valueType": "",
                            "value": "",
                            "type": "leaf",
                            "level": 1
                          }
                        ]
                      }
                    },
                    "url_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    },
                    "body_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    },
                    "request_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    }
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "rqmu1xxi",
                  "model": "received_quantity_uom",
                  "rules": []
                },
                {
                  "name": "Unit Price",
                  "type": "number",
                  "icon": "icon-number",
                  "mainIcon": "数字",
                  "typeIcon": "数字",
                  "group": "Number",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-number",
                  "options": {
                    "width": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "defaultValue": 0,
                    "min": 0,
                    "step": 1,
                    "disabled": false,
                    "controls": false,
                    "controlsPosition": "",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "precision": 4,
                    "customProps": {
                      "progressColor": "",
                      "dividingNumber": "",
                      "showNumber": "",
                      "viewMode": "",
                      "format": "rmb",
                      "cacheProp": true
                    },
                    "tip": "",
                    "remoteFunc": "func_p1ff57tx",
                    "remoteOption": "option_p1ff57tx",
                    "tableColumn": true,
                    "subform": false
                  },
                  "events": {
                    "onChange": "qkhz7mo9",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "2s39nfxc",
                  "model": "unit_price",
                  "rules": []
                },
                {
                  "name": "Amount",
                  "type": "number",
                  "icon": "icon-number",
                  "mainIcon": "数字",
                  "typeIcon": "数字",
                  "group": "Number",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-number",
                  "options": {
                    "width": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "defaultValue": 0,
                    "min": 0,
                    "step": 1,
                    "disabled": true,
                    "controls": false,
                    "controlsPosition": "",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": false,
                    "precision": 4,
                    "customProps": {
                      "progressColor": "",
                      "dividingNumber": "",
                      "showNumber": "",
                      "viewMode": "",
                      "format": "rmb",
                      "cacheProp": true
                    },
                    "tip": "",
                    "remoteFunc": "func_p1ff57tx",
                    "remoteOption": "option_p1ff57tx",
                    "tableColumn": true,
                    "subform": false,
                    "select-card_n7ge7fmb": []
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "oubfvgjk",
                  "model": "amount",
                  "rules": []
                },
                {
                  "name": "Target Location",
                  "type": "select",
                  "mainIcon": "下拉单选",
                  "typeIcon": "下拉单选",
                  "icon": "icon-select",
                  "group": "Select",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-select",
                  "options": {
                    "defaultValue": "",
                    "multiple": false,
                    "disabled": false,
                    "clearable": true,
                    "placeholder": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "width": "",
                    "options": [
                      {
                        "value": "Option 1",
                        "label": "Option 1"
                      },
                      {
                        "value": "Option 2",
                        "label": "Option 2"
                      },
                      {
                        "value": "Option 3",
                        "label": "Option 3"
                      }
                    ],
                    "remote": true,
                    "remoteType": "innerdatasource",
                    "remoteOption": "option_em4nswid",
                    "filterable": true,
                    "pagingEnabled": true,
                    "remoteOptions": [],
                    "props": {
                      "value": "id",
                      "label": "bin_location_combine",
                      "cascade": "",
                      "children": "",
                      "image": "",
                      "icon": ""
                    },
                    "remoteFunc": "func_em4nswid",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "customProps": {},
                    "tip": "",
                    "tableColumn": true,
                    "subform": false,
                    "paging_enabled": 1,
                    "paging_way": "Pagination",
                    "page_size": 10,
                    "more_fields": [],
                    "datasource": {
                      "source": "Bin Location:Table:1902282127538507778",
                      "rules": {
                        "collectionId": "1902282127538507778",
                        "list": [
                          {
                            "id": 1746501590537,
                            "parentId": 1746501590536,
                            "isTop": true,
                            "prop": "plant_id",
                            "operator": "numberEqual",
                            "valueType": "field",
                            "value": "{{value:issuing_operation_faci}}",
                            "type": "leaf",
                            "level": 1,
                            "propLabel": "Plant",
                            "valueLabel": "",
                            "operatorLabel": "等于",
                            "valueTypeLabel": "值"
                          }
                        ]
                      }
                    },
                    "url_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    },
                    "body_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    },
                    "request_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    }
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "e0ebdr9t",
                  "model": "location_id",
                  "rules": []
                },
                {
                  "name": "Batch Number",
                  "type": "input",
                  "mainIcon": "单行文本",
                  "typeIcon": "多行文本",
                  "icon": "icon-input",
                  "group": "Text",
                  "groupSort": 1,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-input",
                  "options": {
                    "width": "",
                    "defaultValue": "-",
                    "required": true,
                    "requiredMessage": "",
                    "dataType": "",
                    "dataTypeCheck": false,
                    "dataTypeMessage": "",
                    "pattern": "",
                    "patternCheck": false,
                    "patternMessage": "",
                    "validatorCheck": true,
                    "validator": "db.collection(\"batch\")\n  .where({\n    batch_number: value\n  })\n  .get()\n  .then(response => {\n    const matchingBatches = response.data || [];\n    console.log(\"Matching batches:\", matchingBatches);\n    \n    if (matchingBatches.length > 0 && value) {\n      callback('Batch number already exists');\n    } else {\n      callback();\n    }\n  })\n  .catch(error => {\n    console.error(\"Error checking batch number:\", error);\n    callback('Error checking batch number');\n  });",
                    "placeholder": "",
                    "customClass": "",
                    "disabled": false,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "showPassword": false,
                    "clearable": false,
                    "maxlength": "",
                    "showWordLimit": false,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_s7dws2o6",
                    "remoteOption": "option_s7dws2o6",
                    "tableColumn": true,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "s7dws2o6",
                  "model": "batch_id",
                  "rules": [
                    {
                      "required": true,
                      "message": ""
                    },
                    {
                      "func": "db.collection(\"batch\")\n  .where({\n    batch_number: value\n  })\n  .get()\n  .then(response => {\n    const matchingBatches = response.data || [];\n    console.log(\"Matching batches:\", matchingBatches);\n    \n    if (matchingBatches.length > 0 && value) {\n      callback('Batch number already exists');\n    } else {\n      callback();\n    }\n  })\n  .catch(error => {\n    console.error(\"Error checking batch number:\", error);\n    callback('Error checking batch number');\n  });"
                    }
                  ]
                },
                {
                  "name": "Select Category",
                  "type": "select",
                  "mainIcon": "下拉单选",
                  "typeIcon": "下拉单选",
                  "icon": "icon-select",
                  "group": "Select",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-select",
                  "options": {
                    "defaultValue": "",
                    "multiple": false,
                    "disabled": false,
                    "clearable": true,
                    "placeholder": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "width": "",
                    "options": [
                      {
                        "value": "Option 1",
                        "label": "Option 1"
                      },
                      {
                        "value": "Option 2",
                        "label": "Option 2"
                      },
                      {
                        "value": "Option 3",
                        "label": "Option 3"
                      }
                    ],
                    "remote": true,
                    "remoteType": "innerdatasource",
                    "remoteOption": "option_438vr08m",
                    "filterable": true,
                    "pagingEnabled": true,
                    "remoteOptions": [],
                    "props": {
                      "value": "inventory_category_name",
                      "label": "inventory_category_name",
                      "cascade": "",
                      "children": "",
                      "image": "",
                      "icon": ""
                    },
                    "remoteFunc": "func_438vr08m",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "customProps": {},
                    "tip": "",
                    "tableColumn": true,
                    "subform": false,
                    "paging_enabled": 0,
                    "paging_way": "Pagination",
                    "page_size": 10,
                    "more_fields": [],
                    "datasource": {
                      "source": "Inventory Category:Table:1902909580332601345",
                      "rules": {
                        "collectionId": "1902909580332601345",
                        "list": [
                          {
                            "id": 1723795236686,
                            "parentId": 1723795236685,
                            "isTop": true,
                            "prop": "",
                            "operator": "",
                            "valueType": "",
                            "value": "",
                            "type": "leaf",
                            "level": 1
                          }
                        ]
                      }
                    },
                    "url_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    },
                    "body_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    },
                    "request_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "value": null,
                          "valueLabel": ""
                        }
                      ]
                    }
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "438vr08m",
                  "model": "category",
                  "rules": []
                },
                {
                  "name": "balance_id",
                  "type": "input",
                  "mainIcon": "单行文本",
                  "typeIcon": "多行文本",
                  "icon": "icon-input",
                  "group": "Text",
                  "groupSort": 1,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-input",
                  "options": {
                    "width": "",
                    "defaultValue": "",
                    "required": false,
                    "requiredMessage": "",
                    "dataType": "",
                    "dataTypeCheck": false,
                    "dataTypeMessage": "",
                    "pattern": "",
                    "patternCheck": false,
                    "patternMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "placeholder": "",
                    "customClass": "",
                    "disabled": false,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": true,
                    "dataBind": true,
                    "showPassword": false,
                    "clearable": false,
                    "maxlength": "",
                    "showWordLimit": false,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_89ot4v44",
                    "remoteOption": "option_89ot4v44",
                    "tableColumn": true,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "89ot4v44",
                  "model": "balance_id",
                  "rules": []
                },
                {
                  "name": "Temporary Data",
                  "type": "textarea",
                  "mainIcon": "多行文本",
                  "typeIcon": "多行文本(1)",
                  "icon": "icon-diy-com-textarea",
                  "group": "Text",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "options": {
                    "width": "",
                    "defaultValue": "",
                    "required": false,
                    "requiredMessage": "",
                    "disabled": true,
                    "pattern": "",
                    "patternMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "placeholder": "",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": true,
                    "dataBind": true,
                    "clearable": false,
                    "maxlength": "",
                    "showWordLimit": false,
                    "rows": 2,
                    "autosize": false,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_l8crw54u",
                    "remoteOption": "option_l8crw54u",
                    "tableColumn": true,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "l8crw54u",
                  "model": "temp_qty_data",
                  "rules": []
                }
              ],
              "key": "d2c7o1jd",
              "model": "stock_movement",
              "rules": []
            }
          ]
        }
      ],
      "options": {
        "type": "",
        "tabPosition": "top",
        "customClass": "",
        "hidden": false,
        "remoteFunc": "func_1hr9mvse",
        "remoteOption": "option_1hr9mvse",
        "tableColumn": false,
        "subform": false,
        "elementFxCurrent": "tab_stock_movement"
      },
      "key": "1hr9mvse",
      "model": "stock_movement_tab",
      "rules": []
    },
    {
      "name": "Flex",
      "type": "flex",
      "el": "su-fm-flex",
      "mainIcon": "自动布局",
      "typeIcon": "自动布局",
      "icon": "icon-zhediemianban",
      "group": "Design",
      "groupSort": 6,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "title": "布局",
        "customClass": "fixbutton",
        "hidden": false,
        "recursive": false,
        "recursiveStyleFx": "",
        "slotTarget": "",
        "defaultValue": "",
        "flexDirection": "row",
        "flexWrap": "nowrap",
        "alignItems": "flex-end",
        "justifyContent": "flex-end",
        "hGap": "",
        "vGap": "",
        "grid": {
          "row": {
            "value": "",
            "visible": true
          },
          "col": {
            "value": "",
            "visible": true
          },
          "use": false
        },
        "padding": ["", "", "", ""],
        "margin": ["", "", "", ""],
        "boxSizing": "border-box",
        "width": "",
        "height": "",
        "radius": ["", "", "", ""],
        "position": "",
        "positions": ["", "", "", ""],
        "zIndex": "",
        "flex": "",
        "flexGrow": "",
        "flexShrink": "",
        "fills": [
          {
            "type": "color",
            "value": "#ffffffff",
            "mode": "aspectFill",
            "rotate": "",
            "visible": true
          }
        ],
        "borders": [],
        "effects": [],
        "states": [],
        "hoverClass": "",
        "overflow": "",
        "styleFx": "",
        "behave": "",
        "remoteFunc": "func_t6y2yh5r",
        "remoteOption": "option_t6y2yh5r",
        "tableColumn": false,
        "subform": false,
        "props": {},
        "datasource": {
          "source": null,
          "rules": {
            "collectionId": "",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "remote": false,
        "remoteType": "datasource",
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "value": null,
              "valueLabel": ""
            }
          ]
        }
      },
      "list": [
        {
          "name": "Save as Draft",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "marginright",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": true,
            "buttonSize": "default",
            "buttonType": "info",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Save as Draft",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_zja5sqll",
            "remoteOption": "option_zja5sqll",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": "2wtacbjy"
          },
          "key": "zja5sqll",
          "model": "button_save_as_draft",
          "rules": []
        },
        {
          "name": "Issued",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "marginright",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": true,
            "buttonSize": "default",
            "buttonType": "success",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Issued",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_zja5sqll",
            "remoteOption": "option_zja5sqll",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": "ehri9x1i"
          },
          "key": "yv8x29uf",
          "model": "button_issued_ift",
          "rules": []
        },
        {
          "name": "In Progress",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "marginright",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": true,
            "buttonSize": "default",
            "buttonType": "primary",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "In Progress",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_gie6smjc",
            "remoteOption": "option_gie6smjc",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": "ide756fa"
          },
          "key": "gie6smjc",
          "model": "button_inprogress_ift",
          "rules": []
        },
        {
          "name": "Completed",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "marginright",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": true,
            "buttonSize": "default",
            "buttonType": "success",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Completed",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_zja5sqll",
            "remoteOption": "option_zja5sqll",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": "8tfs6pc3"
          },
          "key": "dxpzlyqp",
          "model": "button_completed",
          "rules": []
        },
        {
          "name": "Complete Receive",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "marginright",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": true,
            "buttonSize": "default",
            "buttonType": "success",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Complete Receive",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_q9kimb0v",
            "remoteOption": "option_q9kimb0v",
            "tableColumn": false,
            "subform": false,
            "dynamicValueType": "fx",
            "isDynamicValue": false
          },
          "events": {
            "onClick": "0rcda5nq"
          },
          "key": "q9kimb0v",
          "model": "button_complete_receive",
          "rules": []
        },
        {
          "name": "Complete & Post",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "marginright",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": true,
            "buttonSize": "default",
            "buttonType": "success",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Complete & Post",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_lnfr8gna",
            "remoteOption": "option_lnfr8gna",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": "opst8ztv"
          },
          "key": "lnfr8gna",
          "model": "comp_post_button",
          "rules": []
        },
        {
          "name": "post",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "marginright",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": true,
            "buttonSize": "default",
            "buttonType": "success",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Post",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_tujc2l3o",
            "remoteOption": "option_tujc2l3o",
            "tableColumn": false,
            "subform": false,
            "shadow": "default"
          },
          "events": {
            "onClick": "qcb8dogc"
          },
          "key": "tujc2l3o",
          "model": "button_post",
          "rules": []
        }
      ],
      "events": {
        "onClick": ""
      },
      "key": "t6y2yh5r",
      "model": "flex_t6y2yh5r",
      "rules": []
    },
    {
      "name": "对话框",
      "type": "dialog",
      "mainIcon": "对话框",
      "typeIcon": "对话框",
      "icon": "icon-Dialog",
      "group": "Container",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": {},
        "visible": false,
        "drawerMode": false,
        "customClass": "",
        "title": "Confirm Inventory",
        "width": "",
        "top": "15vh",
        "center": false,
        "cancelText": "Cancel",
        "showClose": true,
        "okText": "Confirm",
        "showCancel": true,
        "showOk": true,
        "confirmLoading": false,
        "dataBind": true,
        "remoteFunc": "func_mbk6uo73",
        "remoteOption": "option_mbk6uo73",
        "tableColumn": false,
        "subform": false
      },
      "list": [
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "The system suggests goods issuance based on the inventory's earliest created date as below.",
            "customClass": "",
            "hidden": false,
            "isRich": true,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "20px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_jsf4r5iw",
            "remoteOption": "option_jsf4r5iw",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "jsf4r5iw",
          "model": "utext_jsf4r5iw",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Manual selection will override the system selection",
            "customClass": "",
            "hidden": false,
            "isRich": true,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "20px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_jsf4r5iw",
            "remoteOption": "option_jsf4r5iw",
            "tableColumn": false,
            "subform": false,
            "height": "40px"
          },
          "events": {
            "onClick": ""
          },
          "key": "nc4k9yvj",
          "model": "utext_nc4k9yvj",
          "rules": []
        },
        {
          "name": "栅格布局",
          "type": "grid",
          "mainIcon": "栅格布局",
          "typeIcon": "栅格布局",
          "icon": "icon-RectangleCopy",
          "group": "Layout",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "columns": [
            {
              "type": "col",
              "options": {
                "span": 12,
                "offset": 0,
                "push": 0,
                "pull": 0,
                "xs": 24,
                "sm": 12,
                "md": 12,
                "lg": 12,
                "xl": 12,
                "customClass": ""
              },
              "list": [
                {
                  "name": "Item Code",
                  "type": "input",
                  "mainIcon": "单行文本",
                  "typeIcon": "多行文本",
                  "icon": "icon-input",
                  "group": "Text",
                  "groupSort": 1,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-input",
                  "options": {
                    "width": "",
                    "defaultValue": "",
                    "required": false,
                    "requiredMessage": "",
                    "dataType": "",
                    "dataTypeCheck": false,
                    "dataTypeMessage": "",
                    "pattern": "",
                    "patternCheck": false,
                    "patternMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "placeholder": "",
                    "customClass": "",
                    "disabled": true,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "showPassword": false,
                    "clearable": false,
                    "maxlength": "",
                    "showWordLimit": false,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_5zw5qyj5",
                    "remoteOption": "option_5zw5qyj5",
                    "tableColumn": false,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "5zw5qyj5",
                  "model": "material_id",
                  "rules": []
                },
                {
                  "name": "Item Name",
                  "type": "input",
                  "mainIcon": "单行文本",
                  "typeIcon": "多行文本",
                  "icon": "icon-input",
                  "group": "Text",
                  "groupSort": 1,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-input",
                  "options": {
                    "width": "",
                    "defaultValue": "",
                    "required": false,
                    "requiredMessage": "",
                    "dataType": "",
                    "dataTypeCheck": false,
                    "dataTypeMessage": "",
                    "pattern": "",
                    "patternCheck": false,
                    "patternMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "placeholder": "",
                    "customClass": "",
                    "disabled": true,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "showPassword": false,
                    "clearable": false,
                    "maxlength": "",
                    "showWordLimit": false,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_5zw5qyj5",
                    "remoteOption": "option_5zw5qyj5",
                    "tableColumn": false,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "e65ui6k3",
                  "model": "material_name",
                  "rules": []
                },
                {
                  "name": "Row Index",
                  "type": "number",
                  "icon": "icon-number",
                  "mainIcon": "数字",
                  "typeIcon": "数字",
                  "group": "Number",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-number",
                  "options": {
                    "width": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "defaultValue": 0,
                    "min": 0,
                    "step": 1,
                    "disabled": true,
                    "controls": false,
                    "controlsPosition": "",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": true,
                    "dataBind": true,
                    "precision": 0,
                    "customProps": {
                      "progressColor": "",
                      "dividingNumber": "",
                      "showNumber": "",
                      "viewMode": "",
                      "format": "rmb",
                      "cacheProp": true
                    },
                    "tip": "",
                    "remoteFunc": "func_749q37ap",
                    "remoteOption": "option_749q37ap",
                    "tableColumn": false,
                    "subform": false,
                    "dynamicValueType": "fx",
                    "isDynamicValue": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "749q37ap",
                  "model": "row_index",
                  "rules": []
                }
              ],
              "key": "ti9yvwi9"
            }
          ],
          "options": {
            "gutter": 0,
            "justify": "start",
            "align": "top",
            "customClass": "",
            "hidden": false,
            "flex": true,
            "responsive": true,
            "remoteFunc": "func_9rdvbt3l",
            "remoteOption": "option_9rdvbt3l",
            "tableColumn": false,
            "subform": false
          },
          "key": "9rdvbt3l",
          "model": "grid_9rdvbt3l",
          "rules": []
        },
        {
          "name": "Item Balance",
          "type": "table",
          "mainIcon": "子表单",
          "typeIcon": "子表单",
          "icon": "icon-table",
          "group": "Container",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": [],
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "disabled": false,
            "required": false,
            "validatorCheck": false,
            "validator": "",
            "paging": false,
            "pageSize": 5,
            "isAdd": true,
            "isDelete": true,
            "showControl": true,
            "virtualTable": true,
            "sortable": true,
            "tip": "",
            "remoteFunc": "func_5l7cgknd",
            "remoteOption": "option_5l7cgknd",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true
          },
          "events": {
            "onChange": "",
            "onRowAdd": "",
            "onRowRemove": "",
            "onPageChange": ""
          },
          "tableColumns": [
            {
              "name": "Batch Number",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": true,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_i3d1wloo",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "batch_number",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_i3d1wloo",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": true,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Batch:Table:1902719754154655746",
                  "rules": {
                    "collectionId": "1902719754154655746",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "i3d1wloo",
              "model": "batch_id",
              "rules": []
            },
            {
              "name": "Location",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": true,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_i3d1wloo",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "bin_location_combine",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_i3d1wloo",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": true,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Bin Location:Table:1902282127538507778",
                  "rules": {
                    "collectionId": "1902282127538507778",
                    "list": [
                      {
                        "id": 1746502010573,
                        "parentId": 1746502010572,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "m8axhn5r",
              "model": "location_id",
              "rules": []
            },
            {
              "name": "Unrestricted",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_mq6mxxae",
                "remoteOption": "option_mq6mxxae",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "mq6mxxae",
              "model": "unrestricted_qty",
              "rules": []
            },
            {
              "name": "Reserved",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_mq6mxxae",
                "remoteOption": "option_mq6mxxae",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "5g4grqjm",
              "model": "reserved_qty",
              "rules": []
            },
            {
              "name": "Quality Inspection",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_mq6mxxae",
                "remoteOption": "option_mq6mxxae",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "q5grqi88",
              "model": "qualityinsp_qty",
              "rules": []
            },
            {
              "name": "Blocked",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_mq6mxxae",
                "remoteOption": "option_mq6mxxae",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "vnwhpggg",
              "model": "block_qty",
              "rules": []
            },
            {
              "name": "In Transit Quantity",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_mq6mxxae",
                "remoteOption": "option_mq6mxxae",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "gf2izwou",
              "model": "intransit_qty",
              "rules": []
            },
            {
              "name": "Balance Quantity",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_mq6mxxae",
                "remoteOption": "option_mq6mxxae",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "88wh3nwt",
              "model": "balance_quantity",
              "rules": []
            },
            {
              "name": "Select Category",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_1uftez33",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "inventory_category_name",
                  "label": "inventory_category_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_1uftez33",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": true,
                "subform": false,
                "paging_enabled": 0,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Inventory Category:Table:1902909580332601345",
                  "rules": {
                    "collectionId": "1902909580332601345",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "ygqhd3jr",
                "onBlur": ""
              },
              "novalid": {},
              "key": "1uftez33",
              "model": "category",
              "rules": []
            },
            {
              "name": "Category (From)",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": true,
                "validator": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category;\nconst categoryFrom = data.sm_item_balance.table_item_balance[index].category_from;\nconst categoryTo = data.sm_item_balance.table_item_balance[index].category_to;\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\nconsole.log(\"categoryFrom\", categoryFrom);\nconsole.log(\"categoryTo\",categoryTo);\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Validate against the selected field\nif (categoryFrom === categoryTo) { // Changed = to === for comparison\n  window.validationState[index] = false;\n  callback(`Categories cannot be the same`);\n} else {\n  window.validationState[index] = true;\n  callback();\n}",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_2b9ey6tv",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "inventory_category_name",
                  "label": "inventory_category_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_2b9ey6tv",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": true,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Inventory Category:Table:1902909580332601345",
                  "rules": {
                    "collectionId": "1902909580332601345",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "umqs4zz3",
                "onBlur": ""
              },
              "novalid": {},
              "key": "c0nnl1za",
              "model": "category_from",
              "rules": [
                {
                  "func": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category;\nconst categoryFrom = data.sm_item_balance.table_item_balance[index].category_from;\nconst categoryTo = data.sm_item_balance.table_item_balance[index].category_to;\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\nconsole.log(\"categoryFrom\", categoryFrom);\nconsole.log(\"categoryTo\",categoryTo);\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Validate against the selected field\nif (categoryFrom === categoryTo) { // Changed = to === for comparison\n  window.validationState[index] = false;\n  callback(`Categories cannot be the same`);\n} else {\n  window.validationState[index] = true;\n  callback();\n}"
                }
              ]
            },
            {
              "name": "Category (To)",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": true,
                "validator": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category;\nconst categoryFrom = data.sm_item_balance.table_item_balance[index].category_from;\nconst categoryTo = data.sm_item_balance.table_item_balance[index].category_to;\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\nconsole.log(\"categoryFrom\", categoryFrom);\nconsole.log(\"categoryTo\",categoryTo);\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Validate against the selected field\nif (categoryFrom === categoryTo) { // Changed = to === for comparison\n  window.validationState[index] = false;\n  callback(`Categories cannot be the same`);\n} else {\n  window.validationState[index] = true;\n  callback();\n}",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_2b9ey6tv",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "inventory_category_name",
                  "label": "inventory_category_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_2b9ey6tv",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": true,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Inventory Category:Table:1902909580332601345",
                  "rules": {
                    "collectionId": "1902909580332601345",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "value": null,
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "ana28wmu",
                "onBlur": ""
              },
              "novalid": {},
              "key": "38r4fzdh",
              "model": "category_to",
              "rules": [
                {
                  "func": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category;\nconst categoryFrom = data.sm_item_balance.table_item_balance[index].category_from;\nconst categoryTo = data.sm_item_balance.table_item_balance[index].category_to;\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\nconsole.log(\"categoryFrom\", categoryFrom);\nconsole.log(\"categoryTo\",categoryTo);\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Validate against the selected field\nif (categoryFrom === categoryTo) { // Changed = to === for comparison\n  window.validationState[index] = false;\n  callback(`Categories cannot be the same`);\n} else {\n  window.validationState[index] = true;\n  callback();\n}"
                }
              ]
            },
            {
              "name": "Quantity",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": true,
                "validator": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category ?? \n                     data.sm_item_balance.table_item_balance[index].category_from;\nconst movementType = data.sm_item_balance.table_item_balance[index].movement_type;\n\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\n\n// Initialize global validation state if it doesn’t exist\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Reset the previous error message for this index (optional, depending on callback behavior)\nwindow.validationState[index] = undefined; // Clear previous state\n\nlet selectedField;\n\n// Map category_type to corresponding field\nswitch (category_type) {\n  case \"Unrestricted\":\n    selectedField = unrestricted_field;\n    break;\n  case \"Reserved\":\n    selectedField = reserved_field;\n    break;\n  case \"Quality Inspection\":\n    selectedField = quality_field;\n    break;\n  case \"Blocked\":\n    selectedField = blocked_field;\n    break;\n  default:\n    callback(\"Invalid category type\");\n    return;\n}\n\n// Validate against the selected field\nif (selectedField < value) {\n  window.validationState[index] = false;\n  callback(`Quantity in ${category_type} is not enough.`); // New message overwrites old\n} else {\n  window.validationState[index] = true;\n  callback(\"\"); // Clear the error message on success\n}",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": false,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_50xbkfm9",
                "remoteOption": "option_50xbkfm9",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "50xbkfm9",
              "model": "sm_quantity",
              "rules": [
                {
                  "func": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category ?? \n                     data.sm_item_balance.table_item_balance[index].category_from;\nconst movementType = data.sm_item_balance.table_item_balance[index].movement_type;\n\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\n\n// Initialize global validation state if it doesn’t exist\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Reset the previous error message for this index (optional, depending on callback behavior)\nwindow.validationState[index] = undefined; // Clear previous state\n\nlet selectedField;\n\n// Map category_type to corresponding field\nswitch (category_type) {\n  case \"Unrestricted\":\n    selectedField = unrestricted_field;\n    break;\n  case \"Reserved\":\n    selectedField = reserved_field;\n    break;\n  case \"Quality Inspection\":\n    selectedField = quality_field;\n    break;\n  case \"Blocked\":\n    selectedField = blocked_field;\n    break;\n  default:\n    callback(\"Invalid category type\");\n    return;\n}\n\n// Validate against the selected field\nif (selectedField < value) {\n  window.validationState[index] = false;\n  callback(`Quantity in ${category_type} is not enough.`); // New message overwrites old\n} else {\n  window.validationState[index] = true;\n  callback(\"\"); // Clear the error message on success\n}"
                }
              ]
            },
            {
              "name": "balance id",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_f57yh2sw",
                "remoteOption": "option_f57yh2sw",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "f57yh2sw",
              "model": "balance_id",
              "rules": []
            },
            {
              "name": "material",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_jiryscj4",
                "remoteOption": "option_jiryscj4",
                "tableColumn": true,
                "subform": false,
                "hideLabel": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "petxeeq8",
              "model": "material_id",
              "rules": []
            }
          ],
          "key": "5l7cgknd",
          "model": "table_item_balance",
          "rules": []
        }
      ],
      "events": {
        "onCancel": "to6zrlk7",
        "onConfirm": "5y8a2wfi"
      },
      "key": "mbk6uo73",
      "model": "sm_item_balance",
      "rules": []
    },
    {
      "name": "Item Balance",
      "type": "table",
      "mainIcon": "子表单",
      "typeIcon": "子表单",
      "icon": "icon-table",
      "group": "Container",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": [],
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "disabled": true,
        "required": false,
        "validatorCheck": false,
        "validator": "",
        "paging": false,
        "pageSize": 5,
        "isAdd": true,
        "isDelete": true,
        "showControl": true,
        "virtualTable": true,
        "sortable": true,
        "tip": "",
        "remoteFunc": "func_5l7cgknd",
        "remoteOption": "option_5l7cgknd",
        "tableColumn": false,
        "subform": false,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onRowAdd": "",
        "onRowRemove": "",
        "onPageChange": ""
      },
      "tableColumns": [
        {
          "name": "Batch Number",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": true,
            "clearable": true,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_i3d1wloo",
            "filterable": true,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "id",
              "label": "batch_number",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_i3d1wloo",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "Batch:Table:1902719754154655746",
              "rules": {
                "collectionId": "1902719754154655746",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            }
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "jai3pf4f",
          "model": "batch_id",
          "rules": []
        },
        {
          "name": "Location",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": true,
            "clearable": true,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_i3d1wloo",
            "filterable": true,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "id",
              "label": "bin_location_combine",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_i3d1wloo",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "Bin Location:Table:1902282127538507778",
              "rules": {
                "collectionId": "1902282127538507778",
                "list": [
                  {
                    "id": 1746502010573,
                    "parentId": 1746502010572,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            }
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "mzifxels",
          "model": "location_id",
          "rules": []
        },
        {
          "name": "Unrestricted",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_mq6mxxae",
            "remoteOption": "option_mq6mxxae",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "g4lg7qpo",
          "model": "unrestricted_qty",
          "rules": []
        },
        {
          "name": "Reserved",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_mq6mxxae",
            "remoteOption": "option_mq6mxxae",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "au2n4rxp",
          "model": "reserved_qty",
          "rules": []
        },
        {
          "name": "Quality Inspection",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_mq6mxxae",
            "remoteOption": "option_mq6mxxae",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "dqa4tdh7",
          "model": "qualityinsp_qty",
          "rules": []
        },
        {
          "name": "Blocked",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_mq6mxxae",
            "remoteOption": "option_mq6mxxae",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "wqvens4x",
          "model": "block_qty",
          "rules": []
        },
        {
          "name": "In Transit Quantity",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_mq6mxxae",
            "remoteOption": "option_mq6mxxae",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "x45pcpo6",
          "model": "intransit_qty",
          "rules": []
        },
        {
          "name": "Balance Quantity",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_mq6mxxae",
            "remoteOption": "option_mq6mxxae",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "cyrn4r64",
          "model": "balance_quantity",
          "rules": []
        },
        {
          "name": "Select Category",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": false,
            "clearable": true,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_2b9ey6tv",
            "filterable": true,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "inventory_category_name",
              "label": "inventory_category_name",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_2b9ey6tv",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 0,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "rules": {
                "collectionId": "1902909580332601345",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              },
              "source": "Inventory Category:Table:1902909580332601345"
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            }
          },
          "events": {
            "onChange": "",
            "onFocus": "ygqhd3jr",
            "onBlur": ""
          },
          "novalid": {},
          "key": "yuk0bycc",
          "model": "category",
          "rules": []
        },
        {
          "name": "Category (From)",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": false,
            "clearable": true,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": true,
            "validator": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category;\nconst categoryFrom = data.sm_item_balance.table_item_balance[index].category_from;\nconst categoryTo = data.sm_item_balance.table_item_balance[index].category_to;\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\nconsole.log(\"categoryFrom\", categoryFrom);\nconsole.log(\"categoryTo\",categoryTo);\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Validate against the selected field\nif (categoryFrom === categoryTo) { // Changed = to === for comparison\n  window.validationState[index] = false;\n  callback(`Categories cannot be the same`);\n} else {\n  window.validationState[index] = true;\n  callback();\n}",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_2b9ey6tv",
            "filterable": true,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "inventory_category_name",
              "label": "inventory_category_name",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_2b9ey6tv",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "Inventory Category:Table:1902909580332601345",
              "rules": {
                "collectionId": "1902909580332601345",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            }
          },
          "events": {
            "onChange": "",
            "onFocus": "umqs4zz3",
            "onBlur": ""
          },
          "novalid": {},
          "key": "7czytu77",
          "model": "category_from",
          "rules": [
            {
              "func": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category;\nconst categoryFrom = data.sm_item_balance.table_item_balance[index].category_from;\nconst categoryTo = data.sm_item_balance.table_item_balance[index].category_to;\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\nconsole.log(\"categoryFrom\", categoryFrom);\nconsole.log(\"categoryTo\",categoryTo);\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Validate against the selected field\nif (categoryFrom === categoryTo) { // Changed = to === for comparison\n  window.validationState[index] = false;\n  callback(`Categories cannot be the same`);\n} else {\n  window.validationState[index] = true;\n  callback();\n}"
            }
          ]
        },
        {
          "name": "Category (To)",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": false,
            "clearable": true,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": true,
            "validator": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category;\nconst categoryFrom = data.sm_item_balance.table_item_balance[index].category_from;\nconst categoryTo = data.sm_item_balance.table_item_balance[index].category_to;\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\nconsole.log(\"categoryFrom\", categoryFrom);\nconsole.log(\"categoryTo\",categoryTo);\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Validate against the selected field\nif (categoryFrom === categoryTo) { // Changed = to === for comparison\n  window.validationState[index] = false;\n  callback(`Categories cannot be the same`);\n} else {\n  window.validationState[index] = true;\n  callback();\n}",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_2b9ey6tv",
            "filterable": true,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "inventory_category_name",
              "label": "inventory_category_name",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_2b9ey6tv",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "Inventory Category:Table:1902909580332601345",
              "rules": {
                "collectionId": "1902909580332601345",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "value": null,
                  "valueLabel": ""
                }
              ]
            }
          },
          "events": {
            "onChange": "",
            "onFocus": "ana28wmu",
            "onBlur": ""
          },
          "novalid": {},
          "key": "rx3d622s",
          "model": "category_to",
          "rules": [
            {
              "func": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category;\nconst categoryFrom = data.sm_item_balance.table_item_balance[index].category_from;\nconst categoryTo = data.sm_item_balance.table_item_balance[index].category_to;\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\nconsole.log(\"categoryFrom\", categoryFrom);\nconsole.log(\"categoryTo\",categoryTo);\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Validate against the selected field\nif (categoryFrom === categoryTo) { // Changed = to === for comparison\n  window.validationState[index] = false;\n  callback(`Categories cannot be the same`);\n} else {\n  window.validationState[index] = true;\n  callback();\n}"
            }
          ]
        },
        {
          "name": "Quantity",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": true,
            "validator": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category ?? \n                     data.sm_item_balance.table_item_balance[index].category_from;\nconst movementType = data.sm_item_balance.table_item_balance[index].movement_type;\n\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\n\n// Initialize global validation state if it doesn’t exist\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Reset the previous error message for this index (optional, depending on callback behavior)\nwindow.validationState[index] = undefined; // Clear previous state\n\nlet selectedField;\n\n// Map category_type to corresponding field\nswitch (category_type) {\n  case \"Unrestricted\":\n    selectedField = unrestricted_field;\n    break;\n  case \"Reserved\":\n    selectedField = reserved_field;\n    break;\n  case \"Quality Inspection\":\n    selectedField = quality_field;\n    break;\n  case \"Blocked\":\n    selectedField = blocked_field;\n    break;\n  default:\n    callback(\"Invalid category type\");\n    return;\n}\n\n// Validate against the selected field\nif (selectedField < value) {\n  window.validationState[index] = false;\n  callback(`Quantity in ${category_type} is not enough.`); // New message overwrites old\n} else {\n  window.validationState[index] = true;\n  callback(\"\"); // Clear the error message on success\n}",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": false,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_50xbkfm9",
            "remoteOption": "option_50xbkfm9",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "csjt8hxf",
          "model": "sm_quantity",
          "rules": [
            {
              "func": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconsole.log(\"index\", index);\n\nconst category_type = data.sm_item_balance.table_item_balance[index].category ?? \n                     data.sm_item_balance.table_item_balance[index].category_from;\nconst movementType = data.sm_item_balance.table_item_balance[index].movement_type;\n\nconst unrestricted_field = data.sm_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field = data.sm_item_balance.table_item_balance[index].reserved_qty;\nconst quality_field = data.sm_item_balance.table_item_balance[index].qualityinsp_qty;\nconst blocked_field = data.sm_item_balance.table_item_balance[index].block_qty;\n\n// Initialize global validation state if it doesn’t exist\nif (!window.validationState) {\n  window.validationState = {};\n}\n\n// Reset the previous error message for this index (optional, depending on callback behavior)\nwindow.validationState[index] = undefined; // Clear previous state\n\nlet selectedField;\n\n// Map category_type to corresponding field\nswitch (category_type) {\n  case \"Unrestricted\":\n    selectedField = unrestricted_field;\n    break;\n  case \"Reserved\":\n    selectedField = reserved_field;\n    break;\n  case \"Quality Inspection\":\n    selectedField = quality_field;\n    break;\n  case \"Blocked\":\n    selectedField = blocked_field;\n    break;\n  default:\n    callback(\"Invalid category type\");\n    return;\n}\n\n// Validate against the selected field\nif (selectedField < value) {\n  window.validationState[index] = false;\n  callback(`Quantity in ${category_type} is not enough.`); // New message overwrites old\n} else {\n  window.validationState[index] = true;\n  callback(\"\"); // Clear the error message on success\n}"
            }
          ]
        },
        {
          "name": "balance id",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_f57yh2sw",
            "remoteOption": "option_f57yh2sw",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "ovnmz8n5",
          "model": "balance_id",
          "rules": []
        },
        {
          "name": "material",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_jiryscj4",
            "remoteOption": "option_jiryscj4",
            "tableColumn": true,
            "subform": false,
            "hideLabel": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "tz6maigd",
          "model": "material_id",
          "rules": []
        }
      ],
      "key": "371v7gdf",
      "model": "balance_index",
      "rules": []
    }
  ],
  "config": {
    "labelWidth": 180,
    "labelPosition": "left",
    "size": "small",
    "customClass": "padding",
    "ui": "element",
    "layout": "horizontal",
    "width": "100%",
    "hideLabel": false,
    "hideErrorMessage": false,
    "eventScript": [
      {
        "key": "onFormChange",
        "name": "onFormChange",
        "type": "rule"
      },
      {
        "key": "wx6qvi6y",
        "name": "onClick_edit_stock",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "uux11rlj",
            "action": "openDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "sm_item_balance"
            }
          },
          {
            "key": "o3zoztyh",
            "action": "js",
            "options": {
              "func": "const allData = this.getValues(); // Fetch form/state data\nconsole.log(\"allData\", allData);\nconst lineItemData = arguments[0]?.row; // Row data from arguments (e.g., table row)\nconst rowIndex = arguments[0]?.rowIndex; // Row index from arguments\nconst movementTypeName = allData.movement_type; // Movement type ID\nconst materialId = lineItemData.item_selection; // Material ID from selection\nconst tempQtyData = lineItemData.temp_qty_data; // Temporary quantity data (unused here but included)\nconst plant_id = allData.issuing_operation_faci;\n\n// Show/hide and disable category columns based on movement type\nif (movementTypeName === \"Inventory Category Transfer Posting\") {\n  this.display(\"sm_item_balance.table_item_balance.category_from\");\n  this.disabled(\"sm_item_balance.table_item_balance.category_from\", true);\n  this.display(\"sm_item_balance.table_item_balance.category_to\");\n  this.disabled(\"sm_item_balance.table_item_balance.category_to\", true);\n  this.hide(\"sm_item_balance.table_item_balance.category\");\n} else {\n  this.hide(\"sm_item_balance.table_item_balance.category_from\");\n  this.hide(\"sm_item_balance.table_item_balance.category_to\");\n  this.display(\"sm_item_balance.table_item_balance.category\");\n}\n\n// Step 2: Fetch item data\ndb.collection(\"Item\")\n  .where({\n    id: materialId,\n  })\n  .get()\n  .then((response) => {\n    if (!response.data || response.data.length === 0) {\n      console.error(\"No item found for material ID:\", materialId);\n      return;\n    }\n\n    console.log(\"response item\", response);\n    const itemData = response.data[0]; // itemData is defined here\n    console.log(\"itemData\", itemData);\n\n    // Set item data and disable fields\n    this.setData({\n      [`sm_item_balance.material_id`]: itemData.material_code,\n      [`sm_item_balance.material_name`]: itemData.material_name,\n      [`sm_item_balance.row_index`]: rowIndex,\n    });\n    this.disabled(\"sm_item_balance.material_id\", true);\n    this.disabled(\"sm_item_balance.material_name\", true);\n    this.disabled(\"sm_item_balance.row_index\", true);\n\n    // Step 3: Handle batch vs. non-batch logic\n    if (itemData.item_batch_management == 1) {\n      // Batch-managed item\n      this.display(\"sm_item_balance.table_item_balance.batch_id\");\n      this.disabled(\"sm_item_balance.table_item_balance.batch_id\", true);\n\n      db.collection(\"item_batch_balance\")\n        .where({\n          material_id: materialId,\n          plant_id: plant_id,\n        })\n        .get()\n        .then((response) => {\n          console.log(\"response item_batch_balance\", response.data);\n          const itemBalanceData = response.data || [];\n\n          const mappedData = Array.isArray(itemBalanceData)\n            ? itemBalanceData.map((item) => {\n                const mappedItem = {\n                  ...item,\n                  balance_id: item.id,\n                  sm_quantity: 0,\n                };\n\n                if (\n                  allData.balance_index &&\n                  Array.isArray(allData.balance_index)\n                ) {\n                  const matchingBalanceItem = allData.balance_index.find(\n                    (balanceItem) => balanceItem.balance_id === item.id\n                  );\n\n                  if (matchingBalanceItem) {\n                    mappedItem.sm_quantity =\n                      matchingBalanceItem.sm_quantity || 0;\n                    if (matchingBalanceItem.category) {\n                      mappedItem.category = matchingBalanceItem.category;\n                    }\n                    if (matchingBalanceItem.category_from) {\n                      mappedItem.category_from =\n                        matchingBalanceItem.category_from;\n                    }\n                    if (matchingBalanceItem.category_to) {\n                      mappedItem.category_to = matchingBalanceItem.category_to;\n                    }\n                    if (matchingBalanceItem.balance_id) {\n                      mappedItem.balance_id = matchingBalanceItem.balance_id;\n                    }\n                    if (matchingBalanceItem.material_id) {\n                      mappedItem.material_id = matchingBalanceItem.material_id;\n                    }\n                  }\n                }\n\n                return mappedItem;\n              })\n            : [];\n\n          this.setData({\n            [`sm_item_balance.table_item_balance`]: mappedData,\n          });\n        })\n        .catch((error) => {\n          console.error(\"Error fetching item batch balance data:\", error);\n        });\n    } else {\n      // Non-batch-managed item\n      this.hide(\"sm_item_balance.table_item_balance.batch_id\");\n\n      // For non-batch items (similar change for batch items)\n      db.collection(\"item_balance\")\n        .where({\n          material_id: materialId,\n          plant_id: plant_id,\n        })\n        .get()\n        .then((response) => {\n          const itemBalanceData = response.data || [];\n\n          const mappedData = Array.isArray(itemBalanceData)\n            ? itemBalanceData.map((item) => {\n                const mappedItem = {\n                  ...item,\n                  balance_id: item.id,\n                  sm_quantity: 0,\n                };\n\n                if (\n                  allData.balance_index &&\n                  Array.isArray(allData.balance_index)\n                ) {\n                  const matchingBalanceItem = allData.balance_index.find(\n                    (balanceItem) => balanceItem.balance_id === item.id\n                  );\n\n                  if (matchingBalanceItem) {\n                    mappedItem.sm_quantity =\n                      matchingBalanceItem.sm_quantity || 0;\n                    if (matchingBalanceItem.category) {\n                      mappedItem.category = matchingBalanceItem.category;\n                    }\n                    if (matchingBalanceItem.category_from) {\n                      mappedItem.category_from =\n                        matchingBalanceItem.category_from;\n                    }\n                    if (matchingBalanceItem.category_to) {\n                      mappedItem.category_to = matchingBalanceItem.category_to;\n                    }\n                    if (matchingBalanceItem.balance_id) {\n                      mappedItem.balance_id = matchingBalanceItem.balance_id;\n                    }\n                    if (matchingBalanceItem.material_id) {\n                      mappedItem.material_id = matchingBalanceItem.material_id;\n                    }\n                  }\n                }\n\n                return mappedItem;\n              })\n            : [];\n\n          this.setData({\n            [`sm_item_balance.table_item_balance`]: mappedData,\n          });\n        })\n        .catch((error) => {\n          console.error(\"Error fetching item balance data:\", error);\n        });\n    }\n  })\n  .catch((error) => {\n    console.error(\"Error fetching item data:\", error);\n  });\n"
            }
          }
        ]
      },
      {
        "key": "mounted",
        "name": "mounted",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "g9y4a4ro",
            "action": "hide",
            "options": {
              "fields": [
                "shipping_service",
                "company_truck",
                "courier_service",
                "self_pickup"
              ],
              "condition": "",
              "isCondition": false
            }
          },
          {
            "key": "68ededhd",
            "action": "js",
            "options": {
              "func": "// Helper functions\nconst showStatusHTML = (status) => {\n  switch (status) {\n    case \"Draft\":\n      this.display([\"draft_status\"]);\n      break;\n    case \"Issued\":\n      this.display([\"issued_status\"]);\n      break;\n    case \"In Progress\":\n      this.display([\"processing_status\"]);\n      break;\n    case \"Created\":\n      this.display([\"created_status\"]);\n      break;\n    case \"Completed\":\n      this.display([\"completed_status\"]);\n      break;\n    case \"Fully Posted\":\n      this.display([\"fullyposted_status\"]);\n      break;\n    default:\n      break;\n  }\n};\n\nconst checkPrefixConfiguration = async (movementType, organizationId) => {\n  try {\n    const prefixEntry = await db\n      .collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Stock Movement\",\n        movement_type: movementType,\n        is_deleted: 0,\n        organization_id: organizationId,\n      })\n      .get();\n\n    if (prefixEntry.data && prefixEntry.data.length > 0) {\n      return prefixEntry.data[0];\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Error checking prefix configuration:\", error);\n    return null;\n  }\n};\n\n// Main execution function\n(async () => {\n  try {\n    const data = this.getValues();\n    let pageStatus = \"\";\n\n    // Determine page status\n    if (this.isAdd) pageStatus = \"Add\";\n    else if (this.isEdit) pageStatus = \"Edit\";\n    else if (this.isView) pageStatus = \"View\";\n    else if (this.isCopy) pageStatus = \"Clone\";\n    else throw new Error(\"Invalid page state\");\n\n    // Set page status in data\n    this.setData({ page_status: pageStatus });\n\n    // Get organization ID\n    let organizationId = this.getVarGlobal(\"deptParentId\");\n    if (organizationId === \"0\") {\n      organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n    }\n\n    // Get movement type\n    let movementType = data.movement_type || \"\";\n\n    let stockMovement = data.stock_movement || [];\n\n    if (movementType) {\n      await this.setData({ movement_type: undefined });\n      await this.setData({ movement_type: movementType });\n    }\n\n    if (stockMovement) {\n      await this.setData({ stock_movement: [] });\n      await this.setData({ stock_movement: stockMovement });\n    }\n\n    if (pageStatus !== \"Add\") {\n      // Handle Edit/View/Clone modes\n      const stockMovementId = data.id;\n\n      const resSM = await db\n        .collection(\"stock_movement\")\n        .where({ id: stockMovementId })\n        .get();\n\n      if (resSM.data && resSM.data.length > 0) {\n        const stockMovement = resSM.data[0];\n        const {\n          stock_movement_status,\n          issue_date,\n          stock_movement_no,\n          movement_type,\n          movement_type_id,\n          movement_reason,\n          issued_by,\n          issuing_operation_faci,\n          remarks,\n          delivery_method,\n          reference_documents,\n          receiving_operation_faci,\n          movement_id,\n          is_production_order,\n          production_order_id,\n          driver_name,\n          driver_contact_no,\n          vehicle_no,\n          pickup_date,\n          courier_company,\n          shipping_date,\n          freight_charges,\n          tracking_number,\n          est_arrival_date,\n          delivery_cost,\n          est_delivery_date,\n          organization_id,\n          shipping_company,\n          date_qn0dl3t6,\n          input_77h4nsq8,\n          shipping_method,\n          tracking_no,\n          stock_movement,\n          balance_index,\n        } = stockMovement;\n\n        const data = {\n          stock_movement_status,\n          issue_date,\n          stock_movement_no,\n          movement_type,\n          movement_type_id,\n          movement_reason,\n          issued_by,\n          issuing_operation_faci,\n          remarks,\n          organization_id,\n          delivery_method,\n          reference_documents,\n          receiving_operation_faci,\n          movement_id,\n          is_production_order,\n          production_order_id,\n          driver_name,\n          driver_contact_no,\n          vehicle_no,\n          pickup_date,\n          courier_company,\n          shipping_date,\n          freight_charges,\n          tracking_number,\n          est_arrival_date,\n          delivery_cost,\n          est_delivery_date,\n          shipping_company,\n          date_qn0dl3t6,\n          input_77h4nsq8,\n          shipping_method,\n          tracking_no,\n          stock_movement,\n          balance_index,\n        };\n\n        if (pageStatus === \"Edit\") {\n          // Check if prefix is active for movement type\n          const prefixConfig = await checkPrefixConfiguration(\n            movementType,\n            organizationId\n          );\n\n          if (prefixConfig && prefixConfig.is_active === 0) {\n            this.disabled([\"stock_movement_no\"], false);\n          }\n\n          // Set data for edit mode\n          await this.setData(data);\n\n          // Show appropriate status UI\n          showStatusHTML(stock_movement_status);\n\n          // Edit mode: Disable and hide fields\n          this.disabled([\"movement_type\"], true);\n          this.hide([\n            \"stock_movement.transfer_stock\",\n            \"stock_movement.view_stock\",\n          ]);\n        } else {\n          // View mode or other\n          // Keep original values\n          data.stock_movement_status = stock_movement_status;\n          data.stock_movement_no = stock_movement_no;\n          await this.setData(data);\n\n          // Show appropriate status UI\n          showStatusHTML(stock_movement_status);\n\n          // View mode: Disable and hide fields\n          if (pageStatus === \"View\") {\n            this.disabled(\n              [\n                \"issue_date\",\n                \"stock_movement_no\",\n                \"movement_type\",\n                \"movement_reason\",\n                \"issued_by\",\n                \"issuing_operation_faci\",\n                \"remarks\",\n                \"delivery_method\",\n                \"reference_documents\",\n                \"receiving_operation_faci\",\n                \"movement_id\",\n                \"is_production_order\",\n                \"production_order_id\",\n                \"driver_name\",\n                \"driver_contact_no\",\n                \"vehicle_no\",\n                \"pickup_date\",\n                \"courier_company\",\n                \"shipping_date\",\n                \"freight_charges\",\n                \"tracking_number\",\n                \"est_arrival_date\",\n                \"est_delivery_date\",\n                \"shipping_company\",\n                \"date_qn0dl3t6\",\n                \"input_77h4nsq8\",\n                \"shipping_method\",\n                \"tracking_no\",\n                \"stock_movement.item_selection\",\n                \"stock_movement.total_quantity\",\n                \"stock_movement.category\",\n                \"stock_movement.received_quantity\",\n                \"stock_movement.received_quantity_uom\",\n                \"stock_movement.unit_price\",\n                \"stock_movement.amount\",\n                \"stock_movement.location_id\",\n                \"stock_movement.batch_id\",\n              ],\n              true\n            );\n\n            // Hide edit button\n            setTimeout(() => {\n              const editButton = document.querySelector(\n                \".el-row .el-col.el-col-12.el-col-xs-24 .el-button.el-button--primary.el-button--small.is-link\"\n              );\n              if (editButton) {\n                editButton.style.display = \"none\";\n              }\n            }, 500);\n\n            this.hide([\n              \"stock_movement.transfer_stock\",\n              \"stock_movement.edit_stock\",\n              \"link_billing_address\",\n              \"link_shipping_address\",\n            ]);\n          }\n        }\n      }\n    } else {\n      // Add mode\n      this.disabled([\"stock_movement\"], true);\n      this.display([\"draft_status\", \"button_save_as_draft\"]);\n      this.hide([\n        \"delivery_method\",\n        \"receiving_operation_faci\",\n        \"stock_movement.view_stock\",\n        \"stock_movement.edit_stock\",\n      ]);\n    }\n  } catch (error) {\n    console.error(error);\n    this.$message.error(error.message || \"An error occurred\");\n  }\n})();\n"
            }
          }
        ]
      },
      {
        "key": "refresh",
        "name": "refresh",
        "func": ""
      },
      {
        "key": "onBeforeAdd",
        "name": "onBeforeAdd",
        "func": ""
      },
      {
        "key": "onAfterAdd",
        "name": "onAfterAdd",
        "func": ""
      },
      {
        "key": "onBeforeUpdate",
        "name": "onBeforeUpdate",
        "func": ""
      },
      {
        "key": "onAfterUpdate",
        "name": "onAfterUpdate",
        "func": ""
      },
      {
        "key": "19uhebdu",
        "name": "onClick_view_stock",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "bdo32mne",
            "action": "openDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "sm_item_balance"
            }
          },
          {
            "key": "ntz38x4p",
            "action": "js",
            "options": {
              "func": "const allData = this.getValues(); // Fetch form/state data\nconst lineItemData = arguments[0]?.row; // Row data from arguments (e.g., table row)\nconst rowIndex = arguments[0]?.rowIndex; // Row index from arguments\nconst movement_type = allData.movement_type; // Movement type ID\nconst materialId = lineItemData.item_selection; // Material ID from selection\nconst tempQtyData = lineItemData.temp_qty_data; // Temporary quantity data (unused here but included)\nconst plant_id = allData.issuing_operation_faci;\n\nconst movementTypeName = movement_type;\n\n// Show/hide and disable category columns based on movement type\nif (movementTypeName === \"Inventory Category Transfer Posting\") {\n  this.display(\"sm_item_balance.table_item_balance.category_from\");\n  this.disabled(\"sm_item_balance.table_item_balance.category_from\", true);\n  this.display(\"sm_item_balance.table_item_balance.category_to\");\n  this.disabled(\"sm_item_balance.table_item_balance.category_to\", true);\n  this.hide(\"sm_item_balance.table_item_balance.category\");\n} else {\n  this.hide(\"sm_item_balance.table_item_balance.category_from\");\n  this.hide(\"sm_item_balance.table_item_balance.category_to\");\n  this.display(\"sm_item_balance.table_item_balance.category\");\n}\n\n// Step 2: Fetch item data\ndb.collection(\"Item\")\n  .where({\n    id: materialId,\n  })\n  .get()\n  .then((response) => {\n    if (!response.data || response.data.length === 0) {\n      console.error(\"No item found for material ID:\", materialId);\n      return;\n    }\n\n    console.log(\"response item\", response);\n    const itemData = response.data[0]; // itemData is defined here\n    console.log(\"itemData\", itemData);\n\n    // Set item data and disable fields\n    this.setData({\n      [`sm_item_balance.material_id`]: itemData.material_code,\n      [`sm_item_balance.material_name`]: itemData.material_name,\n      [`sm_item_balance.row_index`]: rowIndex,\n    });\n    this.disabled(\"sm_item_balance.material_id\", true);\n    this.disabled(\"sm_item_balance.material_name\", true);\n    this.disabled(\"sm_item_balance.row_index\", true);\n\n    // Step 3: Handle batch vs. non-batch logic\n    if (itemData.item_batch_management == 1) {\n      // Batch-managed item\n      this.display(\"sm_item_balance.table_item_balance.batch_id\");\n      this.disabled(\"sm_item_balance.table_item_balance.batch_id\", true);\n\n      db.collection(\"item_batch_balance\")\n        .where({\n          material_id: materialId,\n          plant_id: plant_id,\n        })\n        .get()\n        .then((response) => {\n          console.log(\"response item_batch_balance\", response.data);\n          const itemBalanceData = response.data || [];\n\n          const mappedData = Array.isArray(itemBalanceData)\n            ? itemBalanceData.map((item) => {\n                const mappedItem = {\n                  ...item,\n                  balance_id: item.id,\n                  sm_quantity: 0,\n                };\n\n                if (\n                  allData.balance_index &&\n                  Array.isArray(allData.balance_index)\n                ) {\n                  const matchingBalanceItem = allData.balance_index.find(\n                    (balanceItem) => balanceItem.balance_id === item.id\n                  );\n\n                  if (matchingBalanceItem) {\n                    mappedItem.sm_quantity =\n                      matchingBalanceItem.sm_quantity || 0;\n                    if (matchingBalanceItem.category) {\n                      mappedItem.category = matchingBalanceItem.category;\n                    }\n                    if (matchingBalanceItem.category_from) {\n                      mappedItem.category_from =\n                        matchingBalanceItem.category_from;\n                    }\n                    if (matchingBalanceItem.category_to) {\n                      mappedItem.category_to = matchingBalanceItem.category_to;\n                    }\n                    if (matchingBalanceItem.balance_id) {\n                      mappedItem.balance_id = matchingBalanceItem.balance_id;\n                    }\n                    if (matchingBalanceItem.material_id) {\n                      mappedItem.material_id = matchingBalanceItem.material_id;\n                    }\n                  }\n                }\n\n                return mappedItem;\n              })\n            : [];\n\n          this.setData({\n            [`sm_item_balance.table_item_balance`]: mappedData,\n          });\n\n          // Disable the entire table for view mode\n          this.disabled([`sm_item_balance.table_item_balance`], true);\n        })\n        .catch((error) => {\n          console.error(\"Error fetching item batch balance data:\", error);\n        });\n    } else {\n      // Non-batch-managed item\n      this.hide(\"sm_item_balance.table_item_balance.batch_id\");\n\n      db.collection(\"item_balance\")\n        .where({\n          material_id: materialId,\n          plant_id: plant_id,\n        })\n        .get()\n        .then((response) => {\n          console.log(\"response item_balance\", response.data);\n          const itemBalanceData = response.data || [];\n\n          const mappedData = Array.isArray(itemBalanceData)\n            ? itemBalanceData.map((item) => {\n                const mappedItem = {\n                  ...item,\n                  balance_id: item.id,\n                  sm_quantity: 0,\n                };\n\n                if (\n                  allData.balance_index &&\n                  Array.isArray(allData.balance_index)\n                ) {\n                  const matchingBalanceItem = allData.balance_index.find(\n                    (balanceItem) => balanceItem.balance_id === item.id\n                  );\n\n                  if (matchingBalanceItem) {\n                    mappedItem.sm_quantity =\n                      matchingBalanceItem.sm_quantity || 0;\n                    if (matchingBalanceItem.category) {\n                      mappedItem.category = matchingBalanceItem.category;\n                    }\n                    if (matchingBalanceItem.category_from) {\n                      mappedItem.category_from =\n                        matchingBalanceItem.category_from;\n                    }\n                    if (matchingBalanceItem.category_to) {\n                      mappedItem.category_to = matchingBalanceItem.category_to;\n                    }\n                    if (matchingBalanceItem.balance_id) {\n                      mappedItem.balance_id = matchingBalanceItem.balance_id;\n                    }\n                    if (matchingBalanceItem.material_id) {\n                      mappedItem.material_id = matchingBalanceItem.material_id;\n                    }\n                  }\n                }\n\n                return mappedItem;\n              })\n            : [];\n\n          this.setData({\n            [`sm_item_balance.table_item_balance`]: mappedData,\n            [`sm_item_balance.table_item_balance.unit_price`]:\n              itemData.purchase_unit_price,\n          });\n\n          // Disable the entire table for view mode\n          this.disabled([`sm_item_balance.table_item_balance`], true);\n          this.disabled(\"sm_item_balance.table_item_balance.unit_price\", true);\n        })\n        .catch((error) => {\n          console.error(\"Error fetching item balance data:\", error);\n        });\n    }\n  })\n  .catch((error) => {\n    console.error(\"Error fetching item data:\", error);\n  });\n"
            }
          }
        ]
      },
      {
        "key": "bsbctavk",
        "name": "onChange_movement_type",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "tzq4tnns",
            "action": "refreshFieldOptionData",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "movement_reason",
              "valueTypes": {},
              "dataSource": {
                "args": {}
              }
            }
          },
          {
            "key": "ehy0hg93",
            "action": "js",
            "options": {
              "func": "const data = this.getValues();\nconst balanceIndex = data.balance_index || [];\nlet movementType = data.movement_type || \"\";\nconst page_status = data.page_status;\n\nconst displayAllFields = () => {\n  this.display([\n    \"stock_movement.item_selection\",\n    \"stock_movement.view_stock\",\n    \"stock_movement.transfer_stock\",\n    \"stock_movement.edit_stock\",\n    \"stock_movement.total_quantity\",\n    \"stock_movement.to_recv_qty\",\n    \"stock_movement.received_quantity\",\n    \"stock_movement.received_quantity_uom\",\n    \"stock_movement.unit_price\",\n    \"stock_movement.amount\",\n    \"stock_movement.location_id\",\n    \"stock_movement.batch_id\",\n    \"stock_movement.category\",\n    \"movement_reason\",\n    \"delivery_method\",\n    \"receiving_operation_faci\",\n    \"is_production_order\",\n  ]);\n};\n\nconst generatePrefix = (runNumber, prefixData, now) => {\n  let generated = prefixData.current_prefix_config;\n  generated = generated.replace(\"prefix\", prefixData.prefix_value);\n  generated = generated.replace(\"suffix\", prefixData.suffix_value);\n  generated = generated.replace(\n    \"month\",\n    String(now.getMonth() + 1).padStart(2, \"0\")\n  );\n  generated = generated.replace(\"day\", String(now.getDate()).padStart(2, \"0\"));\n  generated = generated.replace(\"year\", now.getFullYear());\n  generated = generated.replace(\n    \"running_number\",\n    String(runNumber).padStart(prefixData.padding_zeroes, \"0\")\n  );\n  return generated;\n};\n\nconst checkUniqueness = async (generatedPrefix) => {\n  const existingDoc = await db\n    .collection(\"stock_movement\")\n    .where({ stock_movement_no: generatedPrefix })\n    .get();\n  return existingDoc.data[0] ? false : true;\n};\n\nconst findUniquePrefix = async (\n  prefixToShow,\n  runningNumber,\n  isUnique,\n  maxAttempts,\n  attempts,\n  prefixData,\n  now\n) => {\n  while (!isUnique && attempts < maxAttempts) {\n    attempts++;\n    prefixToShow = generatePrefix(runningNumber, prefixData, now);\n    isUnique = await checkUniqueness(prefixToShow);\n    if (!isUnique) {\n      runningNumber++;\n    }\n  }\n\n  if (!isUnique) {\n    throw new Error(\n      \"Could not generate a unique Stock Movement number after maximum attempts\"\n    );\n  }\n  return prefixToShow;\n};\n\nconst initPrefix = async (movementType) => {\n  let organizationId = this.getVarGlobal(\"deptParentId\");\n  if (organizationId === \"0\") {\n    organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n  }\n\n  const prefixEntry = await db\n    .collection(\"prefix_configuration\")\n    .where({\n      document_types: \"Stock Movement\",\n      movement_type: movementType,\n      is_deleted: 0,\n      organization_id: organizationId,\n      is_active: 1,\n    })\n    .get();\n  const prefixData = prefixEntry.data[0];\n  const now = new Date();\n  let prefixToShow;\n  let runningNumber = prefixData.running_number;\n  let isUnique = false;\n  let maxAttempts = 10;\n  let attempts = 0;\n\n  if (prefixData.is_active === 0) {\n    this.disabled([\"stock_movement_no\"], false);\n  } else {\n    this.disabled([\"stock_movement_no\"], true);\n  }\n\n  const uniquePrefix = await findUniquePrefix(\n    prefixToShow,\n    runningNumber,\n    isUnique,\n    maxAttempts,\n    attempts,\n    prefixData,\n    now\n  );\n  await this.setData({ stock_movement_no: uniquePrefix });\n};\n\nconst init = async () => {\n  this.disabled([\"stock_movement\"], false);\n  this.setData({\n    [`movement_reason`]: \"\",\n    [`stock_movement_no`]: \"\",\n    [`issued_by`]: \"\",\n    [`issuing_operation_faci`]: \"\",\n    [`sm_item_balance`]: [],\n    [`table_item_balance`]: [],\n    [`stock_movement`]: [],\n    [`balance_index`]: [],\n  });\n\n  if (movementType) {\n    this.disabled([\"stock_movement\"], false);\n  } else {\n    this.disabled([\"stock_movement\"], true);\n  }\n  if (page_status !== \"View\") {\n    await initPrefix(movementType);\n  }\n};\n\n(async () => {\n  if (page_status === \"Add\") {\n    await init();\n  }\n\n  // hide/show fields based on movement type\n  switch (movementType) {\n    case \"Inter Operation Facility Transfer\":\n      displayAllFields();\n      this.hide([\n        \"stock_movement.received_quantity\",\n        \"stock_movement.category\",\n        \"stock_movement.received_quantity_uom\",\n        \"stock_movement.unit_price\",\n        \"stock_movement.amount\",\n        \"stock_movement.location_id\",\n        \"is_production_order\",\n        \"stock_movement.to_recv_qty\",\n        \"stock_movement.batch_id\",\n      ]);\n      break;\n\n    case \"Location Transfer\":\n      displayAllFields();\n      this.hide([\n        \"delivery_method\",\n        \"receiving_operation_faci\",\n        \"stock_movement.category\",\n        \"stock_movement.received_quantity\",\n        \"stock_movement.received_quantity_uom\",\n        \"stock_movement.unit_price\",\n        \"stock_movement.amount\",\n        \"stock_movement.to_recv_qty\",\n        \"stock_movement.batch_id\",\n      ]);\n      this.disabled([\"stock_movement.total_quantity\"], true);\n      break;\n\n    case \"Miscellaneous Issue\":\n      displayAllFields();\n      this.hide([\n        \"receiving_operation_faci\",\n        \"delivery_method\",\n        \"stock_movement.category\",\n        \"stock_movement.received_quantity\",\n        \"stock_movement.received_quantity_uom\",\n        \"stock_movement.unit_price\",\n        \"stock_movement.amount\",\n        \"stock_movement.location_id\",\n        \"is_production_order\",\n        \"stock_movement.to_recv_qty\",\n        \"stock_movement.batch_id\",\n      ]);\n      this.disabled([\"stock_movement.total_quantity\"], true);\n      break;\n\n    case \"Miscellaneous Receipt\":\n      displayAllFields();\n      this.hide([\n        \"delivery_method\",\n        \"receiving_operation_faci\",\n        \"stock_movement.transfer_stock\",\n        \"stock_movement.total_quantity\",\n        \"is_production_order\",\n        \"stock_movement.to_recv_qty\",\n        \"stock_movement.transfer_stock\",\n        \"stock_movement.view_stock\",\n        \"stock_movement.edit_stock\",\n      ]);\n      break;\n\n    case \"Disposal/Scrap\":\n      displayAllFields();\n      this.hide([\n        \"receiving_operation_faci\",\n        \"delivery_method\",\n        \"stock_movement.category\",\n        \"stock_movement.received_quantity\",\n        \"stock_movement.received_quantity_uom\",\n        \"stock_movement.unit_price\",\n        \"stock_movement.amount\",\n        \"stock_movement.location_id\",\n        \"is_production_order\",\n        \"stock_movement.to_recv_qty\",\n        \"stock_movement.batch_id\",\n      ]);\n      this.disabled([\"stock_movement.total_quantity\"], true);\n      break;\n\n    case \"Inventory Category Transfer Posting\":\n      displayAllFields();\n      this.hide([\n        \"receiving_operation_faci\",\n        \"delivery_method\",\n        \"movement_reason\",\n        \"stock_movement.category\",\n        \"stock_movement.received_quantity\",\n        \"stock_movement.received_quantity_uom\",\n        \"stock_movement.unit_price\",\n        \"stock_movement.amount\",\n        \"stock_movement.location_id\",\n        \"is_production_order\",\n        \"stock_movement.to_recv_qty\",\n        \"stock_movement.batch_id\",\n      ]);\n      break;\n\n    case \"Inter Operation Facility Transfer (Receiving)\":\n      displayAllFields();\n      this.hide([\n        \"stock_movement.transfer_stock\",\n        \"stock_movement.amount\",\n        \"is_production_order\",\n        \"delivery_method\",\n        \"receiving_operation_faci\",\n        \"stock_movement.batch_id\",\n        \"stock_movement.view_stock\",\n        \"stock_movement.transfer_stock\",\n        \"stock_movement.edit_stock\",\n      ]);\n      break;\n\n    case \"Good Issue\":\n      displayAllFields();\n      this.hide([\n        \"receiving_operation_faci\",\n        \"delivery_method\",\n        \"stock_movement.category\",\n        \"stock_movement.received_quantity\",\n        \"stock_movement.received_quantity_uom\",\n        \"stock_movement.unit_price\",\n        \"stock_movement.amount\",\n        \"stock_movement.location_id\",\n        \"stock_movement.to_recv_qty\",\n        \"stock_movement.batch_id\",\n      ]);\n      break;\n\n    case \"Production Receipt\":\n      displayAllFields();\n      this.hide([\n        \"delivery_method\",\n        \"receiving_operation_faci\",\n        \"stock_movement.transfer_stock\",\n        \"stock_movement.total_quantity\",\n        \"stock_movement.to_recv_qty\",\n        \"stock_movement.transfer_stock\",\n        \"stock_movement.view_stock\",\n        \"stock_movement.edit_stock\",\n      ]);\n      break;\n  }\n  switch (page_status) {\n    case \"View\":\n      this.hide([\"stock_movement.transfer_stock\", \"stock_movement.edit_stock\"]);\n      this.disabled([\"stock_movement.view_stock\"], false);\n      break;\n    case \"Edit\":\n      this.hide([\"stock_movement.transfer_stock\", \"stock_movement.view_stock\"]);\n      break;\n    case \"Add\":\n      this.hide([\"stock_movement.view_stock\", \"stock_movement.edit_stock\"]);\n      break;\n  }\n\n  // Helper functions for button visibility\n  const hideAllButtons = () => {\n    this.hide([\n      \"button_post\",\n      \"comp_post_button\",\n      \"button_inprogress_ift\",\n      \"button_complete_receive\",\n      \"button_save_as_draft\",\n      \"button_issued_ift\",\n      \"button_completed\",\n    ]);\n  };\n\n  // Apply button visibility logic\n  if (\n    page_status === \"Add\" ||\n    (data.stock_movement_status === \"Draft\" && page_status === \"Edit\")\n  ) {\n    switch (movementType) {\n      case \"Inter Operation Facility Transfer (Receiving)\":\n        hideAllButtons();\n        console.log(\"helllo\");\n        this.display([\n          \"button_save_as_draft\",\n          \"button_complete_receive\",\n          \"comp_post_button\",\n        ]);\n        break;\n      case \"Inter Operation Facility Transfer\":\n        hideAllButtons();\n        this.display([\"button_issued_ift\", \"button_save_as_draft\"]);\n        break;\n      case \"Location Transfer\":\n      case \"Inventory Category Transfer Posting\":\n        hideAllButtons();\n        this.display([\"button_save_as_draft\", \"button_completed\"]);\n        break;\n      case \"Miscellaneous Issue\":\n      case \"Good Issue\":\n      case \"Miscellaneous Receipt\":\n      case \"Production Receipt\":\n      case \"Disposal/Scrap\":\n        hideAllButtons();\n        this.display([\n          \"button_save_as_draft\",\n          \"button_completed\",\n          \"comp_post_button\",\n        ]);\n        break;\n    }\n  } else if (\n    data.stock_movement_status === \"Issued\" &&\n    page_status === \"Edit\" &&\n    movementType === \"Inter Operation Facility Transfer\"\n  ) {\n    hideAllButtons();\n    this.display([\"button_inprogress_ift\"]);\n  } else if (\n    data.stock_movement_status === \"Completed\" &&\n    page_status === \"View\"\n  ) {\n    hideAllButtons();\n    if (\n      [\n        \"Inter Operation Facility Transfer\",\n        \"Miscellaneous Issue\",\n        \"Good Issue\",\n        \"Miscellaneous Receipt\",\n        \"Production Receipt\",\n        \"Disposal/Scrap\",\n        \"Inter Operation Facility Transfer (Receiving)\",\n      ].includes(movementType)\n    ) {\n      this.display([\"button_post\"]);\n    }\n  } else if (\n    data.stock_movement_status === \"Created\" &&\n    (page_status === \"View\" || page_status === \"Edit\") &&\n    movementType === \"Inter Operation Facility Transfer (Receiving)\"\n  ) {\n    hideAllButtons();\n    this.display([\"button_complete_receive\"]);\n  }\n\n  if (\n    page_status !== \"Add\" &&\n    movementType &&\n    balanceIndex &&\n    balanceIndex.length > 0\n  ) {\n    setTimeout(() => {\n      this.setData({\n        [`balance_index`]: balanceIndex,\n      });\n    }, 2000);\n  }\n\n  if (movementType) {\n    const resType = await db\n      .collection(\"blade_dict\")\n      .where({ dict_key: movementType })\n      .get();\n    const movementTypeId = resType.data[0].id;\n    await this.setData({ movement_type_id: movementTypeId });\n    const resReason = await db\n      .collection(\"blade_dict\")\n      .where({ parent_id: movementTypeId })\n      .get();\n    await this.setOptionData(\"movement_reason\", resReason.data);\n  }\n})();\n"
            }
          }
        ]
      },
      {
        "key": "mpv8l5hi",
        "name": "onChange_delivery_method",
        "func": "this.setData({ 'delivery_method_text': arguments[0].fieldModel.label });\n\nconst visibilityMap = {\n  'Self Pickup': 'self_pickup',\n  'Courier Service': 'courier_service',\n  'Company Truck': 'company_truck',\n  'Shipping Service': 'shipping_service'\n};\n\nconst selectedField = visibilityMap[arguments[0].fieldModel.label] || null;\nconst fields = ['self_pickup', 'courier_service', 'company_truck','shipping_service'];\n\nfields.forEach(field => {\n  field === selectedField ? this.display(field) : this.hide(field);\n});\n",
        "type": "js"
      },
      {
        "key": "8tfs6pc3",
        "name": "onClick_completed",
        "func": "class StockAdjuster {\n  constructor(db) {\n    this.db = db;\n    this.categoryMap = {\n      Unrestricted: \"unrestricted_qty\",\n      \"Quality Inspection\": \"qualityinsp_qty\",\n      Blocked: \"block_qty\",\n      Reserved: \"reserved_qty\",\n    };\n  }\n\n  // Helper functions for consistent decimal formatting\n  roundQty(value) {\n    return parseFloat(parseFloat(value || 0).toFixed(3));\n  }\n\n  roundPrice(value) {\n    return parseFloat(parseFloat(value || 0).toFixed(4));\n  }\n\n  validateRequiredFields(data, requiredFields, context = \"\") {\n    const missingFields = requiredFields.filter(\n      (field) => !data[field] && data[field] !== 0\n    );\n    if (missingFields.length > 0) {\n      throw new Error(\n        `Please fill in all required fields marked with (*) ${context}: ${missingFields.join(\n          \", \"\n        )}`\n      );\n    }\n  }\n\n  async updateProductionOrder(allData, subformData, balanceIndex) {\n    if (allData.is_production_order !== 1 || !allData.production_order_id) {\n      return; // Skip if not a production order or no production order ID\n    }\n\n    const tableMatConfirmation = subformData.map((item) => ({\n      material_id: item.item_selection,\n      material_required_qty: item.total_quantity || item.received_quantity || 0,\n      bin_location_id: item.location_id,\n    }));\n    console.log(\"Table Mat Confirmation\", balanceIndex);\n    try {\n      const productionOrderResponse = await this.db\n        .collection(\"production_order\")\n        .where({ id: allData.production_order_id })\n        .get();\n\n      if (\n        !productionOrderResponse.data ||\n        productionOrderResponse.data.length === 0\n      ) {\n        throw new Error(\n          `Production order ${allData.production_order_id} not found`\n        );\n      }\n      const productionOrderId = productionOrderResponse.data[0].id;\n      await this.db\n        .collection(\"production_order\")\n        .doc(productionOrderId)\n        .update({\n          table_mat_confirmation: tableMatConfirmation,\n          balance_index: balanceIndex || [],\n          production_order_status: \"In Progress\",\n          update_time: new Date().toISOString(),\n        });\n\n      console.log(\n        `Production order ${allData.production_order_id} updated successfully`\n      );\n    } catch (error) {\n      console.error(\"Error updating production order:\", error);\n      throw new Error(`Failed to update production order: ${error.message}`);\n    }\n  }\n\n  async preValidateItems(subformData, movementType, allData) {\n    for (const item of subformData) {\n      this.validateRequiredFields(\n        item,\n        [\"item_selection\"],\n        `for item ${item.item_selection || \"unknown\"}`\n      );\n\n      const materialResponse = await this.db\n        .collection(\"Item\")\n        .where({ id: item.item_selection })\n        .get();\n      const materialData = materialResponse.data[0];\n      // UOM comparison and conversion logic\n      let quantityConverted = item.received_quantity || 0;\n      let selected_uom = materialData.based_uom; // Default to base UOM\n\n      if (\n        movementType === \"Miscellaneous Receipt\" &&\n        item.received_quantity_uom\n      ) {\n        if (item.received_quantity_uom === materialData.based_uom) {\n          selected_uom = materialData.based_uom;\n        } else {\n          const uomConversion = materialData.table_uom_conversion?.find(\n            (conversion) => conversion.alt_uom_id === item.received_quantity_uom\n          );\n          if (uomConversion) {\n            selected_uom = uomConversion.alt_uom_id;\n            quantityConverted =\n              Math.round(\n                (item.received_quantity || 0) * uomConversion.base_qty * 1000\n              ) / 1000;\n          } else {\n            throw new Error(\n              `Invalid UOM ${item.received_quantity_uom} for item ${item.item_selection}`\n            );\n          }\n        }\n      }\n\n      // Always set effective_uom and quantity_converted for the item\n      item.effective_uom = selected_uom;\n      item.quantity_converted = quantityConverted;\n\n      console.log(\n        `preValidateItems: item ${item.item_selection}, effective_uom: ${item.effective_uom}, quantity_converted: ${quantityConverted}`\n      );\n\n      if (\n        movementType === \"Inter Operation Facility Transfer\" ||\n        movementType === \"Miscellaneous Receipt\"\n      ) {\n        if (!item.received_quantity || item.received_quantity <= 0) {\n          continue;\n        }\n      } else {\n        if (!allData.balance_index || !Array.isArray(allData.balance_index)) {\n          throw new Error(\n            `Balance selection (balance_index) is required for item ${item.item_selection}`\n          );\n        }\n\n        const balancesToProcess = allData.balance_index.filter(\n          (balance) => balance.sm_quantity && balance.sm_quantity > 0\n        );\n\n        if (balancesToProcess.length === 0) {\n          continue;\n        }\n\n        if (movementType === \"Location Transfer\") {\n          balancesToProcess.forEach((balance) => {\n            if (!balance.location_id && !item.location_id) {\n              throw new Error(\n                `Receiving bin ID (receiving_bin_id) is required for Location Transfer for item ${item.item_selection}`\n              );\n            }\n          });\n        }\n\n        const collectionName =\n          materialData.item_batch_management == \"1\"\n            ? \"item_batch_balance\"\n            : \"item_balance\";\n        for (const balance of balancesToProcess) {\n          this.validateRequiredFields(\n            balance,\n            [\"sm_quantity\", \"location_id\"],\n            `for balance in item ${item.item_selection}`\n          );\n\n          const balanceResponse = await this.db\n            .collection(collectionName)\n            .where({\n              material_id: materialData.id,\n              location_id: balance.location_id,\n            })\n            .get();\n          const balanceData = balanceResponse.data[0];\n\n          const categoryField =\n            this.categoryMap[balance.category || subformData.category];\n          // if (!categoryField && movementType != 'Inventory Category Transfer Posting') {\n          //     throw new Error(`Invalid category: ${balance.category || 'Unrestricted'}`);\n          // }\n\n          if (!balanceData) {\n            throw new Error(\n              `No existing balance found for item ${item.item_selection} at location ${balance.location_id}`\n            );\n          }\n\n          const currentQty = balanceData[categoryField] || 0;\n          const requestedQty =\n            balance.quantity_converted > 0\n              ? balance.quantity_converted\n              : balance.sm_quantity;\n\n          // if (movementType === 'Miscellaneous Issue' ||\n          //     movementType === 'Disposal/Scrap' ||\n          //     movementType === 'Location Transfer') {\n          //     if (currentQty < requestedQty) {\n          //         throw new Error(`Insufficient quantity in ${balance.category || subformData.category} for item ${item.item_selection} at location ${balance.location_id}. Available: ${currentQty}, Requested: ${requestedQty}`);\n          //     }\n          // } else if (movementType === 'Inventory Category Transfer Posting') {\n          //     if (!balance.category_from || !balance.category_to) {\n          //         throw new Error(`Both category_from and category_to are required for Inventory Category Transfer Posting for item ${item.item_selection}`);\n          //     }\n          //     const fromCategoryField = this.categoryMap[balance.category_from];\n          //     const currentFromQty = balanceData[fromCategoryField] || 0;\n          //     if (currentFromQty < requestedQty) {\n          //         throw new Error(`Insufficient quantity in ${balance.category_from} for item ${item.item_selection} at location ${balance.location_id}. Available: ${currentFromQty}, Requested: ${requestedQty}`);\n          //     }\n          // }\n        }\n      }\n    }\n  }\n\n  async processStockAdjustment(allData, organizationId) {\n    console.log(\"This is all data\", allData);\n    const subformData = allData.stock_movement;\n    const movementType = allData.movement_type;\n    const balanceIndex = allData.balance_index;\n    const requiredTopLevelFields = [\n      \"stock_movement_no\",\n      \"movement_type\",\n      \"issue_date\",\n    ];\n    this.validateRequiredFields(allData, requiredTopLevelFields);\n\n    await this.preValidateItems(subformData, movementType, allData);\n    await this.updateStockMovementTable(\n      allData,\n      subformData,\n      movementType,\n      organizationId\n    );\n\n    // Update production order for Location Transfer if applicable\n    if (\n      movementType === \"Location Transfer\" &&\n      allData.is_production_order === 1\n    ) {\n      await this.updateProductionOrder(allData, subformData, balanceIndex);\n    }\n\n    const updates = await Promise.all(\n      subformData.map((item) =>\n        this.processItem(item, movementType, allData, organizationId)\n      )\n    );\n\n    return updates;\n  }\n\n  async updateStockMovementTable(\n    allData,\n    subformData,\n    movementType,\n    organizationId\n  ) {\n    const table_item_balance = allData.sm_item_balance?.table_item_balance;\n    const stockMovementData = {\n      stock_movement_no: allData.stock_movement_no,\n      movement_type: allData.movement_type,\n      movement_type_id: allData.movement_type_id,\n      movement_reason: allData.movement_reason || null,\n      issued_by: allData.issued_by || allData.user_id || \"system\",\n      issue_date: allData.issue_date,\n      issuing_operation_faci: allData.issuing_operation_faci,\n      stock_movement: subformData,\n      sm_item_balance: allData.sm_item_balance,\n      table_item_balance: table_item_balance,\n      remarks: allData.remarks,\n      delivery_method: allData.delivery_method,\n      driver_name: allData.driver_name,\n      vehicle_no: allData.vehicle_no,\n      pickup_date: allData.pickup_date,\n      courier_company: allData.courier_company,\n      tracking_number: allData.tracking_number,\n      est_arrival_date: allData.est_arrival_date,\n      freight_charges: allData.freight_charges,\n      driver_contact_no: allData.driver_contact_no,\n      delivery_cost: allData.delivery_cost,\n      est_delivery_date: allData.est_delivery_date,\n      shipping_company: allData.shipping_company,\n      shipping_method: allData.shipping_method,\n      date_qn0dl3t6: allData.date_qn0dl3t6,\n      input_77h4nsq8: allData.input_77h4nsq8,\n      tracking_no: allData.tracking_no,\n      balance_index: allData.balance_index,\n      organization_id: organizationId,\n      posted_status: \"Unposted\",\n    };\n\n    const page_status = allData.page_status ? allData.page_status : null;\n    const stockMovementNo = allData.id;\n\n    if (page_status === \"Add\") {\n      const result = await this.db.collection(\"stock_movement\").add({\n        stock_movement_status: \"Completed\",\n        ...stockMovementData,\n      });\n      console.log(\"Stock Movement Added:\", result);\n\n      await this.db\n        .collection(\"prefix_configuration\")\n        .where({\n          document_types: \"Stock Movement\",\n          is_deleted: 0,\n          organization_id: organizationId,\n          is_active: 1,\n          movement_type: movementType,\n        })\n        .get()\n        .then((prefixEntry) => {\n          if (prefixEntry.data.length > 0) {\n            const data = prefixEntry.data[0];\n            return this.db\n              .collection(\"prefix_configuration\")\n              .where({\n                document_types: \"Stock Movement\",\n                is_deleted: 0,\n                organization_id: organizationId,\n                movement_type: movementType,\n              })\n              .update({\n                running_number: parseInt(data.running_number) + 1,\n                has_record: 1,\n              });\n          }\n        });\n    } else if (page_status === \"Edit\") {\n      if (!stockMovementNo) {\n        throw new Error(\"Stock movement number is required for editing\");\n      }\n      const existingRecord = await this.db\n        .collection(\"stock_movement\")\n        .where({ id: stockMovementNo })\n        .get();\n\n      if (existingRecord.data.length === 0) {\n        throw new Error(\n          `Stock movement ${stockMovementNo} not found for editing`\n        );\n      }\n\n      const recordId = existingRecord.data[0].id;\n      const result = await this.db\n        .collection(\"stock_movement\")\n        .doc(recordId)\n        .update({\n          stock_movement_status: \"Completed\",\n          ...stockMovementData,\n          update_time: new Date().toISOString(),\n        });\n      console.log(\"Stock Movement Updated:\", result);\n    }\n  }\n\n  async processItem(item, movementType, allData, organizationId) {\n    try {\n      const materialResponse = await this.db\n        .collection(\"Item\")\n        .where({ id: item.item_selection })\n        .get();\n      const materialData = materialResponse.data[0];\n\n      if (!materialData) {\n        throw new Error(`Material not found for item ${item.item_selection}`);\n      }\n\n      const balancesToProcess =\n        allData.balance_index?.filter(\n          (balance) => balance.sm_quantity && balance.sm_quantity > 0\n        ) || [];\n\n      if (\n        movementType === \"Miscellaneous Receipt\" &&\n        (!item.received_quantity || item.received_quantity <= 0)\n      ) {\n        return {\n          itemId: item.item_selection,\n          status: \"skipped\",\n          reason: \"No received quantity provided\",\n        };\n      }\n\n      const updates = [];\n      for (const balance of balancesToProcess) {\n        try {\n          console.log(\n            `Processing balance for ${item.item_selection} at location ${balance.location_id}`\n          );\n\n          await this.updateQuantities(\n            materialData,\n            movementType,\n            balance,\n            allData,\n            item,\n            organizationId\n          );\n\n          const movementResult = await this.recordInventoryMovement(\n            materialData,\n            movementType,\n            balance,\n            allData,\n            item,\n            organizationId\n          );\n\n          updates.push({\n            balance: balance.location_id,\n            status: \"success\",\n            result: movementResult,\n          });\n        } catch (balanceError) {\n          console.error(\n            `Error processing balance for ${item.item_selection} at ${balance.location_id}:`,\n            balanceError\n          );\n\n          updates.push({\n            balance: balance.location_id,\n            status: \"error\",\n            error: balanceError.message,\n          });\n\n          return {\n            itemId: item.item_selection,\n            status: \"error\",\n            error: balanceError.message,\n          };\n        }\n      }\n\n      if (\n        movementType === \"Miscellaneous Receipt\" &&\n        item.received_quantity > 0\n      ) {\n        try {\n          await this.updateQuantities(\n            materialData,\n            movementType,\n            {},\n            allData,\n            item,\n            organizationId\n          );\n          await this.recordInventoryMovement(\n            materialData,\n            movementType,\n            { sm_quantity: item.received_quantity },\n            allData,\n            item,\n            organizationId\n          );\n\n          updates.push({\n            type: \"receipt\",\n            status: \"success\",\n          });\n        } catch (receiptError) {\n          console.error(\n            `Error processing receipt for ${item.item_selection}:`,\n            receiptError\n          );\n\n          updates.push({\n            type: \"receipt\",\n            status: \"error\",\n            error: receiptError.message,\n          });\n          return {\n            itemId: item.item_selection,\n            status: \"error\",\n            error: receiptError.message,\n          };\n        }\n      }\n\n      return {\n        itemId: item.item_selection,\n        status: updates.some((u) => u.status === \"error\")\n          ? \"partial\"\n          : \"success\",\n        details: updates,\n      };\n    } catch (error) {\n      console.error(`Error in processItem for ${item.item_selection}:`, error);\n      return {\n        itemId: item.item_selection,\n        status: \"failed\",\n        error: error.message,\n      };\n    }\n  }\n\n  async updateQuantities(\n    materialData,\n    movementType,\n    balance,\n    allData,\n    subformData,\n    organizationId\n  ) {\n    const collectionName =\n      materialData.item_batch_management == \"1\"\n        ? \"item_batch_balance\"\n        : \"item_balance\";\n    let qtyChangeValue =\n      movementType === \"Miscellaneous Receipt\"\n        ? subformData.quantity_converted || subformData.received_quantity || 0\n        : balance.quantity_converted || balance.sm_quantity || 0;\n    const locationId = balance.location_id || subformData.location_id;\n    const effectiveUom =\n      balance.effective_uom ||\n      subformData.effective_uom ||\n      materialData.based_uom;\n\n    console.log(\n      `updateQuantities: item ${materialData.id}, movement ${movementType}, effectiveUom: ${effectiveUom}, qtyChangeValue: ${qtyChangeValue}`\n    );\n\n    if (qtyChangeValue === 0) return;\n\n    if (!locationId && movementType !== \"Miscellaneous Receipt\") {\n      throw new Error(\"Location ID is required\");\n    }\n\n    if (!effectiveUom) {\n      throw new Error(`Effective UOM is undefined for item ${materialData.id}`);\n    }\n\n    // Derive the category field without modifying balance.category\n    const categoryKey =\n      movementType === \"Location Transfer\"\n        ? \"Unrestricted\"\n        : movementType === \"Miscellaneous Receipt\"\n        ? subformData.category || \"Unrestricted\"\n        : balance.category || \"Unrestricted\";\n    const categoryField = this.categoryMap[categoryKey];\n\n    // if (!categoryField && movementType != 'Inventory Category Transfer Posting') {\n    // throw new Error(`Invalid category: ${categoryKey}`);\n    // }\n\n    const queryConditions = {\n      material_id: materialData.id,\n      location_id: locationId,\n    };\n\n    if (materialData.item_batch_management == \"1\" && balance.batch_id) {\n      queryConditions.batch_id = balance.batch_id;\n    }\n\n    const balanceResponse = await this.db\n      .collection(collectionName)\n      .where(queryConditions)\n      .get();\n\n    let balanceData = balanceResponse.data[0];\n\n    let updateData = balanceData\n      ? { ...balanceData }\n      : {\n          material_id: materialData.id,\n          location_id: locationId,\n          balance_quantity: 0,\n          unrestricted_qty: 0,\n          qualityinsp_qty: 0,\n          block_qty: 0,\n          reserved_qty: 0,\n          batch_id:\n            materialData.item_batch_management == \"1\" ? balance.batch_id : null,\n          plant_id: allData.issuing_operation_faci,\n          create_user: allData.user_id || \"system\",\n          issue_date: allData.issue_date,\n          update_user: allData.user_id || \"system\",\n          is_deleted: 0,\n          tenant_id: allData.tenant_id || \"000000\",\n          organization_id: organizationId,\n        };\n\n    switch (movementType) {\n      case \"Inter Operation Facility Transfer\":\n        updateData.balance_quantity =\n          (updateData.balance_quantity || 0) + qtyChangeValue;\n        updateData[categoryField] =\n          (updateData[categoryField] || 0) + qtyChangeValue;\n        break;\n\n      case \"Location Transfer\":\n        updateData.balance_quantity =\n          (updateData.balance_quantity || 0) - qtyChangeValue;\n        updateData[categoryField] =\n          (updateData[categoryField] || 0) - qtyChangeValue;\n        break;\n\n      case \"Miscellaneous Issue\":\n      case \"Disposal/Scrap\":\n        updateData.balance_quantity =\n          (updateData.balance_quantity || 0) - qtyChangeValue;\n        updateData[categoryField] =\n          (updateData[categoryField] || 0) - qtyChangeValue;\n        break;\n\n      case \"Miscellaneous Receipt\":\n        updateData.balance_quantity =\n          (updateData.balance_quantity || 0) + qtyChangeValue;\n        updateData[categoryField] =\n          (updateData[categoryField] || 0) + qtyChangeValue;\n        if (materialData.item_batch_management == \"1\") {\n          const batchId = await this.createBatch(\n            materialData,\n            qtyChangeValue,\n            allData,\n            subformData,\n            organizationId\n          );\n          console.log(\"batchId\", batchId);\n          updateData.batch_id = batchId;\n        }\n        break;\n\n      case \"Inventory Category Transfer Posting\":\n        if (!balance.category_from || !balance.category_to) {\n          throw new Error(\"Both category_from and category_to are required\");\n        }\n        const fromCategoryField = this.categoryMap[balance.category_from];\n        const toCategoryField = this.categoryMap[balance.category_to];\n        updateData[fromCategoryField] =\n          (updateData[fromCategoryField] || 0) - qtyChangeValue;\n        updateData[toCategoryField] =\n          (updateData[toCategoryField] || 0) + qtyChangeValue;\n        break;\n\n      default:\n        throw new Error(`Unsupported movement type: ${movementType}`);\n    }\n\n    updateData.update_time = new Date().toISOString();\n    updateData.update_user = allData.user_id || \"system\";\n\n    if (!balanceData) {\n      await this.db.collection(collectionName).add(updateData);\n    } else {\n      const updateFields = {\n        balance_quantity: updateData.balance_quantity,\n        unrestricted_qty: updateData.unrestricted_qty,\n        qualityinsp_qty: updateData.qualityinsp_qty,\n        block_qty: updateData.block_qty,\n        reserved_qty: updateData.reserved_qty,\n        update_time: updateData.update_time,\n        update_user: updateData.update_user,\n        plant_id: updateData.plant_id,\n      };\n      if (materialData.item_batch_management == \"1\") {\n        updateFields.batch_id = updateData.batch_id;\n      }\n      await this.db\n        .collection(collectionName)\n        .doc(balanceData.id)\n        .update(updateFields);\n    }\n\n    if (\n      [\n        \"Miscellaneous Issue\",\n        \"Disposal/Scrap\",\n        \"Miscellaneous Receipt\",\n      ].includes(movementType)\n    ) {\n      const qtyChange =\n        movementType === \"Miscellaneous Receipt\"\n          ? qtyChangeValue\n          : -qtyChangeValue;\n      await this.updateCostingMethod(\n        materialData,\n        qtyChange,\n        allData.issuing_operation_faci,\n        subformData,\n        updateData,\n        organizationId\n      );\n    }\n\n    if (movementType === \"Location Transfer\") {\n      await this.updateReceivingLocation(\n        materialData,\n        collectionName,\n        subformData.location_id,\n        qtyChangeValue,\n        balance,\n        allData,\n        subformData,\n        movementType,\n        organizationId\n      );\n    }\n  }\n\n  async updateReceivingLocation(\n    materialData,\n    collectionName,\n    receivingLocationId,\n    qtyChangeValue,\n    balance,\n    allData,\n    subformData,\n    movementType,\n    organizationId\n  ) {\n    if (!receivingLocationId) {\n      throw new Error(\n        \"Receiving location ID is required for Location Transfer\"\n      );\n    }\n\n    const effectiveUom =\n      balance.effective_uom ||\n      subformData.effective_uom ||\n      materialData.based_uom;\n    qtyChangeValue = balance.quantity_converted || qtyChangeValue;\n\n    console.log(\n      `updateReceivingLocation: item ${materialData.id}, effectiveUom: ${effectiveUom}, qtyChangeValue: ${qtyChangeValue}`\n    );\n\n    if (!effectiveUom) {\n      throw new Error(\n        `Effective UOM is undefined for item ${materialData.id} in receiving location`\n      );\n    }\n\n    // For batch-managed items, we need to check for the specific batch\n    const queryConditions = {\n      material_id: materialData.id,\n      location_id: receivingLocationId,\n    };\n\n    // Add batch_id to query conditions for batch-managed items\n    if (materialData.item_batch_management == \"1\" && balance.batch_id) {\n      queryConditions.batch_id = balance.batch_id;\n    }\n\n    const balanceResponse = await this.db\n      .collection(collectionName)\n      .where(queryConditions)\n      .get();\n\n    let balanceData = balanceResponse.data[0];\n\n    let updateData = balanceData\n      ? { ...balanceData }\n      : {\n          material_id: materialData.id,\n          location_id: receivingLocationId,\n          balance_quantity: 0,\n          unrestricted_qty: 0,\n          qualityinsp_qty: 0,\n          block_qty: 0,\n          reserved_qty: 0,\n          batch_id:\n            materialData.item_batch_management == \"1\" ? balance.batch_id : null,\n          plant_id: allData.issuing_operation_faci,\n          create_user: allData.user_id || \"system\",\n          issue_date: allData.issue_date,\n          update_user: allData.user_id || \"system\",\n          is_deleted: 0,\n          tenant_id: allData.tenant_id || \"000000\",\n          organization_id: organizationId,\n        };\n\n    const categoryField =\n      movementType === \"Location Transfer\"\n        ? this.categoryMap[\"Unrestricted\"]\n        : movementType === \"Miscellaneous Receipt\"\n        ? this.categoryMap[subformData.category || \"Unrestricted\"]\n        : this.categoryMap[balance.category || \"Unrestricted\"];\n\n    updateData.balance_quantity =\n      (updateData.balance_quantity || 0) + qtyChangeValue;\n    updateData[categoryField] =\n      (updateData[categoryField] || 0) + qtyChangeValue;\n\n    updateData.update_time = new Date().toISOString();\n    updateData.update_user = allData.user_id || \"system\";\n\n    if (!balanceData) {\n      // For new entries, ensure we're creating a properly-formatted record\n      await this.db.collection(collectionName).add(updateData);\n      console.log(\n        `Created new ${collectionName} record for batch ${balance.batch_id} at location ${receivingLocationId}`\n      );\n    } else {\n      const updateFields = {\n        balance_quantity: updateData.balance_quantity,\n        unrestricted_qty: updateData.unrestricted_qty,\n        qualityinsp_qty: updateData.qualityinsp_qty,\n        block_qty: updateData.block_qty,\n        reserved_qty: updateData.reserved_qty,\n        update_time: updateData.update_time,\n        update_user: updateData.update_user,\n        plant_id: updateData.plant_id,\n      };\n\n      // Only update batch_id if it's a batch-managed item and not already set\n      if (materialData.item_batch_management == \"1\") {\n        updateFields.batch_id = updateData.batch_id;\n      }\n\n      await this.db\n        .collection(collectionName)\n        .doc(balanceData.id)\n        .update(updateFields);\n\n      console.log(\n        `Updated existing ${collectionName} record for batch ${balance.batch_id} at location ${receivingLocationId}`\n      );\n    }\n  }\n\n  async updatePendingReceive(materialId, receivedQty, allData) {\n    const pendingRecQuery = await this.db\n      .collection(\"stock_movement\")\n      .where({ stock_movement_no: allData.stock_movement_no })\n      .get();\n  }\n\n  async createBatch(\n    materialData,\n    quantity,\n    allData,\n    subformData,\n    organizationId\n  ) {\n    const batchNumber = `BATCH-${Date.now()}-${Math.random()\n      .toString(36)\n      .substr(2, 5)}`;\n    const batchData = {\n      batch_number: subformData.batch_id || batchNumber,\n      material_id: materialData.id,\n      initial_quantity: quantity,\n      plant_id: allData.issuing_operation_faci,\n      transaction_no: allData.stock_movement_no,\n      organization_id: organizationId,\n      created_at: new Date(),\n      create_user: allData.user_id || \"system\",\n    };\n\n    try {\n      await this.db.collection(\"batch\").add(batchData);\n\n      await new Promise((resolve) => setTimeout(resolve, 300));\n\n      const batchQuery = await this.db\n        .collection(\"batch\")\n        .where({\n          batch_number: subformData.batch_id || batchNumber,\n          material_id: materialData.id,\n        })\n        .get();\n\n      if (!batchQuery.data || !batchQuery.data.length) {\n        throw new Error(\"Batch was created but could not be retrieved\");\n      }\n\n      return batchQuery.data[0].id;\n    } catch (error) {\n      console.error(\"Error creating or retrieving batch:\", error);\n      throw new Error(`Failed to create batch: ${error.message}`);\n    }\n  }\n\n  async updateCostingMethod(\n    materialData,\n    quantityChange,\n    plantId,\n    subformData,\n    balanceData,\n    organizationId\n  ) {\n    try {\n      console.log(\"updateCostingMethod inputs:\", {\n        materialData,\n        quantityChange,\n        plantId,\n        subformData,\n        balanceData,\n      });\n\n      if (!materialData?.id) {\n        throw new Error(\"Invalid material data: material_id is missing\");\n      }\n\n      if (!materialData.material_costing_method) {\n        throw new Error(\"Material costing method is not defined\");\n      }\n\n      if (!plantId) {\n        throw new Error(\"Plant ID is required for costing update\");\n      }\n\n      const costingMethod = materialData.material_costing_method;\n      const qtyChangeValue =\n        subformData.quantity_converted || quantityChange || 0;\n\n      if (qtyChangeValue === 0) {\n        console.log(\"No quantity change, skipping costing update\");\n        return;\n      }\n\n      if (\n        ![\"Weighted Average\", \"First In First Out\", \"Fixed Cost\"].includes(\n          costingMethod\n        )\n      ) {\n        throw new Error(`Unsupported costing method: ${costingMethod}`);\n      }\n\n      // Determine unit price: balance > subformData > materialData\n      const unitPrice =\n        balanceData.unit_price && balanceData.unit_price !== 0\n          ? balanceData.unit_price\n          : subformData.unit_price && subformData.unit_price !== 0\n          ? subformData.unit_price\n          : materialData.purchase_unit_price || 0;\n\n      if (unitPrice === 0) {\n        console.warn(\"Unit price is zero, proceeding with costing update\");\n      }\n\n      if (costingMethod === \"Weighted Average\") {\n        const waQuery =\n          materialData.item_batch_management == \"1\" && balanceData.batch_id\n            ? this.db.collection(\"wa_costing_method\").where({\n                material_id: materialData.id,\n                batch_id: balanceData.batch_id,\n                plant_id: plantId,\n              })\n            : this.db\n                .collection(\"wa_costing_method\")\n                .where({ material_id: materialData.id, plant_id: plantId });\n\n        const waResponse = await waQuery.get();\n        if (!waResponse || !waResponse.data) {\n          throw new Error(\"Failed to retrieve weighted average costing data\");\n        }\n\n        const waData = waResponse.data;\n\n        let newWaQuantity, newWaCostPrice;\n\n        if (waData.length === 0 && qtyChangeValue > 0) {\n          // Create new WA record for first receipt\n          newWaQuantity = this.roundQty(qtyChangeValue);\n          newWaCostPrice = this.roundPrice(unitPrice);\n\n          await this.db.collection(\"wa_costing_method\").add({\n            material_id: materialData.id,\n            batch_id:\n              materialData.item_batch_management == \"1\"\n                ? balanceData.batch_id\n                : null,\n            plant_id: plantId,\n            organization_id: organizationId,\n            wa_quantity: newWaQuantity,\n            wa_cost_price: newWaCostPrice,\n            created_at: new Date().toISOString(),\n          });\n        } else if (waData.length > 0) {\n          // Debug logging\n          console.log(\"WA Data found:\", {\n            count: waData.length,\n            firstItem: waData[0],\n            dataTypes: waData.map((item) => typeof item),\n            hasCreatedAt: waData.map((item) => Boolean(item.created_at)),\n            hasId: waData.map((item) => Boolean(item.id)),\n          });\n\n          let latestWa;\n          try {\n            latestWa = waData.sort(\n              (a, b) =>\n                new Date(b.created_at || 0) - new Date(a.created_at || 0)\n            )[0];\n\n            if (!latestWa) {\n              throw new Error(\"No WA records found after sorting\");\n            }\n\n            if (!latestWa.id) {\n              throw new Error(\"Latest WA record has no ID\");\n            }\n\n            console.log(\"Latest WA record:\", {\n              id: latestWa.id,\n              wa_quantity: latestWa.wa_quantity,\n              wa_cost_price: latestWa.wa_cost_price,\n              created_at: latestWa.created_at,\n            });\n          } catch (sortError) {\n            console.error(\"Error during WA record sorting:\", sortError);\n            throw new Error(\n              `Error processing WA records: ${sortError.message}`\n            );\n          }\n\n          const currentQty = this.roundQty(latestWa.wa_quantity || 0);\n          const currentCostPrice = this.roundPrice(latestWa.wa_cost_price || 0);\n\n          if (qtyChangeValue > 0) {\n            // Receipt\n            newWaQuantity = this.roundQty(currentQty + qtyChangeValue);\n            const currentTotalCost = this.roundPrice(\n              currentCostPrice * currentQty\n            );\n            const newTotalCost = this.roundPrice(unitPrice * qtyChangeValue);\n            newWaCostPrice =\n              newWaQuantity > 0\n                ? this.roundPrice(\n                    (currentTotalCost + newTotalCost) / newWaQuantity\n                  )\n                : 0;\n          } else {\n            // Delivery\n            const deliveredQuantity = Math.abs(qtyChangeValue);\n            newWaQuantity = this.roundQty(currentQty - deliveredQuantity);\n\n            if (newWaQuantity < 0) {\n              throw new Error(\n                `Insufficient WA quantity: available ${currentQty}, requested ${deliveredQuantity}`\n              );\n            }\n\n            // const currentTotalCost = this.roundPrice(\n            //   currentCostPrice * currentQty\n            // );\n            // const deliveryTotalCost = this.roundPrice(\n            //   currentCostPrice * deliveredQuantity\n            // );\n            // newWaCostPrice =\n            //   newWaQuantity > 0\n            //     ? this.roundPrice(\n            //         (currentTotalCost - deliveryTotalCost) / newWaQuantity\n            //       )\n            //     : 0;\n            newWaCostPrice = currentCostPrice;\n          }\n\n          await this.db\n            .collection(\"wa_costing_method\")\n            .doc(latestWa.id)\n            .update({\n              wa_quantity: newWaQuantity,\n              wa_cost_price: newWaCostPrice,\n              updated_at: new Date().toISOString(),\n            });\n        } else {\n          console.log(\"waQuery\", waQuery);\n          console.log(\"waResponse\", waQuery);\n          throw new Error(\n            `No WA costing record found for deduction: material ${materialData.id}, plant ${plantId}`\n          );\n        }\n      } else if (costingMethod === \"First In First Out\") {\n        const fifoQuery =\n          materialData.item_batch_management == \"1\" && balanceData.batch_id\n            ? this.db.collection(\"fifo_costing_history\").where({\n                material_id: materialData.id,\n                batch_id: balanceData.batch_id,\n              })\n            : this.db\n                .collection(\"fifo_costing_history\")\n                .where({ material_id: materialData.id });\n\n        const fifoResponse = await fifoQuery.get();\n        if (!fifoResponse || !fifoResponse.data) {\n          throw new Error(\"Failed to retrieve FIFO costing data\");\n        }\n\n        const fifoData = Array.isArray(fifoResponse.data)\n          ? fifoResponse.data\n          : [];\n\n        if (qtyChangeValue > 0) {\n          // Receipt - Create a new FIFO layer\n          const latestSequence =\n            fifoData.length > 0\n              ? Math.max(...fifoData.map((record) => record.fifo_sequence || 0))\n              : 0;\n\n          await this.db.collection(\"fifo_costing_history\").add({\n            material_id: materialData.id,\n            batch_id:\n              materialData.item_batch_management == \"1\"\n                ? balanceData.batch_id\n                : null,\n            plant_id: plantId,\n            organization_id: organizationId,\n            fifo_initial_quantity: this.roundQty(qtyChangeValue),\n            fifo_available_quantity: this.roundQty(qtyChangeValue),\n            fifo_cost_price: this.roundPrice(unitPrice),\n            fifo_sequence: latestSequence + 1,\n            created_at: new Date().toISOString(),\n          });\n        } else if (qtyChangeValue < 0) {\n          // Delivery - Reduce quantities from oldest FIFO layers first\n          let remainingDeduction = Math.abs(qtyChangeValue);\n\n          // Sort by sequence (oldest first per FIFO principle)\n          const sortedFifoData = fifoData.sort(\n            (a, b) => (a.fifo_sequence || 0) - (b.fifo_sequence || 0)\n          );\n\n          // Verify we have enough total quantity\n          const totalAvailable = this.roundQty(\n            sortedFifoData.reduce(\n              (sum, record) => sum + (record.fifo_available_quantity || 0),\n              0\n            )\n          );\n\n          if (totalAvailable < remainingDeduction) {\n            throw new Error(\n              `Insufficient FIFO quantity: available ${totalAvailable}, requested ${remainingDeduction}`\n            );\n          }\n\n          // Deduct from each layer starting with the oldest (lowest sequence)\n          for (const record of sortedFifoData) {\n            if (remainingDeduction <= 0) break;\n\n            const available = this.roundQty(\n              record.fifo_available_quantity || 0\n            );\n            if (available <= 0) continue;\n\n            const deduction = Math.min(available, remainingDeduction);\n            const newAvailable = this.roundQty(available - deduction);\n\n            await this.db\n              .collection(\"fifo_costing_history\")\n              .doc(record.id)\n              .update({\n                fifo_available_quantity: newAvailable,\n                updated_at: new Date().toISOString(),\n              });\n\n            remainingDeduction -= deduction;\n          }\n\n          if (remainingDeduction > 0) {\n            throw new Error(\n              `Insufficient FIFO quantity: remaining ${remainingDeduction} after processing all layers`\n            );\n          }\n        }\n      } else if (costingMethod === \"Fixed Cost\") {\n        console.log(\"Fixed Cost method - no costing records to update\");\n        return;\n      }\n    } catch (error) {\n      console.error(\"Detailed error in updateCostingMethod:\", {\n        message: error.message || \"Unknown error\",\n        stack: error.stack || \"No stack trace\",\n        material_id: materialData.id,\n        quantityChange,\n        plantId,\n        costing_method: materialData.material_costing_method,\n        batch_id: balanceData.batch_id,\n        subformData,\n        balanceData,\n      });\n      throw new Error(\n        `Failed to update costing method: ${error.message || \"Unknown error\"}`\n      );\n    }\n  }\n\n  // Function to get latest FIFO cost price with available quantity check\n  async getLatestFIFOCostPrice(materialData, batchId) {\n    try {\n      const query =\n        materialData.item_batch_management == \"1\" && batchId\n          ? this.db\n              .collection(\"fifo_costing_history\")\n              .where({ material_id: materialData.id, batch_id: batchId })\n          : this.db\n              .collection(\"fifo_costing_history\")\n              .where({ material_id: materialData.id });\n\n      const response = await query.get();\n      const result = response.data;\n\n      if (result && Array.isArray(result) && result.length > 0) {\n        // Sort by FIFO sequence (lowest/oldest first, as per FIFO principle)\n        const sortedRecords = result.sort(\n          (a, b) => a.fifo_sequence - b.fifo_sequence\n        );\n\n        // First look for records with available quantity\n        for (const record of sortedRecords) {\n          const availableQty = this.roundQty(\n            record.fifo_available_quantity || 0\n          );\n          if (availableQty > 0) {\n            console.log(\n              `Found FIFO record with available quantity: Sequence ${record.fifo_sequence}, Cost price ${record.fifo_cost_price}`\n            );\n            return this.roundPrice(record.fifo_cost_price || 0);\n          }\n        }\n\n        // If no records with available quantity, use the most recent record\n        console.warn(\n          `No FIFO records with available quantity found for ${materialData.id}, using most recent cost price`\n        );\n        return this.roundPrice(\n          sortedRecords[sortedRecords.length - 1].fifo_cost_price || 0\n        );\n      }\n\n      console.warn(`No FIFO records found for material ${materialData.id}`);\n      return 0;\n    } catch (error) {\n      console.error(\n        `Error retrieving FIFO cost price for ${materialData.id}:`,\n        error\n      );\n      return 0;\n    }\n  }\n\n  // Function to get Weighted Average cost price\n  async getWeightedAverageCostPrice(materialData, batchId) {\n    try {\n      const query =\n        materialData.item_batch_management == \"1\" && batchId\n          ? this.db\n              .collection(\"wa_costing_method\")\n              .where({ material_id: materialData.id, batch_id: batchId })\n          : this.db\n              .collection(\"wa_costing_method\")\n              .where({ material_id: materialData.id });\n\n      const response = await query.get();\n      const waData = response.data;\n\n      if (waData && Array.isArray(waData) && waData.length > 0) {\n        // Sort by date (newest first) to get the latest record\n        waData.sort((a, b) => {\n          if (a.created_at && b.created_at) {\n            return new Date(b.created_at) - new Date(a.created_at);\n          }\n          return 0;\n        });\n\n        return this.roundPrice(waData[0].wa_cost_price || 0);\n      }\n\n      console.warn(\n        `No weighted average records found for material ${materialData.id}`\n      );\n      return 0;\n    } catch (error) {\n      console.error(\n        `Error retrieving WA cost price for ${materialData.id}:`,\n        error\n      );\n      return 0;\n    }\n  }\n\n  async getFixedCostPrice(materialId) {\n    const query = this.db.collection(\"Item\").where({ id: materialId });\n    const response = await query.get();\n    const result = response.data;\n    return this.roundPrice(result[0].purchase_unit_price || 0);\n  }\n\n  async recordInventoryMovement(\n    materialData,\n    movementType,\n    balance,\n    allData,\n    subformData,\n    organizationId\n  ) {\n    console.log(\"recordInventoryMovement inputs:\", {\n      materialData,\n      movementType,\n      balance,\n      subformData,\n    });\n\n    const originalQty =\n      balance.sm_quantity || subformData.received_quantity || 0;\n    const convertedQty =\n      balance.quantity_converted ||\n      subformData.quantity_converted ||\n      originalQty;\n    const effectiveUom =\n      balance.effective_uom ||\n      subformData.effective_uom ||\n      materialData.based_uom;\n\n    console.log(\n      `recordInventoryMovement: item ${materialData.id}, effectiveUom: ${effectiveUom}, originalQty: ${originalQty}, convertedQty: ${convertedQty}`\n    );\n\n    if (!effectiveUom) {\n      throw new Error(\n        `Effective UOM is undefined for item ${materialData.id} in inventory movement`\n      );\n    }\n\n    let unitPrice =\n      balance.unit_price && balance.unit_price !== 0\n        ? balance.unit_price\n        : subformData.unit_price && subformData.unit_price !== 0\n        ? subformData.unit_price\n        : materialData.purchase_unit_price || 0;\n\n    console.log(\"unitPrice JN\", unitPrice);\n\n    if (materialData.material_costing_method === \"First In First Out\") {\n      // Get unit price from latest FIFO sequence\n      const fifoCostPrice = await this.getLatestFIFOCostPrice(\n        materialData,\n        balance.batch_id\n      );\n      unitPrice = this.roundPrice(fifoCostPrice);\n    } else if (materialData.material_costing_method === \"Weighted Average\") {\n      // Get unit price from WA cost price\n      const waCostPrice = await this.getWeightedAverageCostPrice(\n        materialData,\n        balance.batch_id\n      );\n      unitPrice = this.roundPrice(waCostPrice);\n    } else if (materialData.material_costing_method === \"Fixed Cost\") {\n      // Get unit price from Fixed Cost\n      const fixedCostPrice = await this.getFixedCostPrice(materialData.id);\n      unitPrice = this.roundPrice(fixedCostPrice);\n    } else {\n      return Promise.resolve();\n    }\n\n    let receiptUnitPrice = unitPrice;\n    if (movementType === \"Miscellaneous Receipt\") {\n      receiptUnitPrice =\n        balance.unit_price && balance.unit_price !== 0\n          ? balance.unit_price\n          : subformData.unit_price && subformData.unit_price !== 0\n          ? subformData.unit_price\n          : materialData.purchase_unit_price || 0;\n    }\n\n    const formattedUnitPrice = this.roundPrice(\n      movementType === \"Miscellaneous Receipt\" ? receiptUnitPrice : unitPrice\n    );\n    const formattedConvertedQty = this.roundQty(convertedQty);\n    const formattedOriginalQty = this.roundQty(originalQty);\n\n    console.log(\"formattedUnitPrice JN\", formattedUnitPrice);\n\n    const baseMovementData = {\n      transaction_type: \"SM\",\n      trx_no: allData.stock_movement_no,\n      unit_price: formattedUnitPrice,\n      total_price: this.roundPrice(formattedUnitPrice * formattedConvertedQty),\n      quantity: formattedOriginalQty,\n      item_id: materialData.id,\n      inventory_category: balance.category || subformData.category,\n      uom_id: effectiveUom,\n      base_qty: formattedConvertedQty,\n      base_uom_id: materialData.based_uom,\n      batch_number_id:\n        materialData.item_batch_management == \"1\" ? balance.batch_id : null,\n      costing_method_id: materialData.material_costing_method,\n      plant_id: allData.issuing_operation_faci,\n      created_at: new Date(),\n      organization_id: organizationId,\n    };\n\n    console.log(\"baseMovementData JN\", baseMovementData);\n\n    switch (movementType) {\n      case \"Location Transfer\":\n        let productionOrderNo = null;\n        if (allData.is_production_order === 1) {\n          const productionOrder = await this.db\n            .collection(\"production_order\")\n            .where({\n              id: allData.production_order_id,\n            })\n            .get();\n          productionOrderNo =\n            productionOrder.data[0]?.production_order_no || null;\n          console.log(\"Production Order No:\", productionOrderNo);\n        }\n        const outMovement = {\n          ...baseMovementData,\n          movement: \"OUT\",\n          parent_trx_no: productionOrderNo,\n          bin_location_id: balance.location_id,\n          inventory_category: \"Unrestricted\",\n        };\n        const inMovement = {\n          ...baseMovementData,\n          movement: \"IN\",\n          bin_location_id: subformData.location_id,\n          parent_trx_no: productionOrderNo,\n          inventory_category: \"Unrestricted\",\n        };\n        const [outResult, inResult] = await Promise.all([\n          this.db.collection(\"inventory_movement\").add(outMovement),\n          this.db.collection(\"inventory_movement\").add(inMovement),\n        ]);\n        return [outResult, inResult];\n\n      case \"Miscellaneous Issue\":\n      case \"Disposal/Scrap\":\n        const outData = {\n          ...baseMovementData,\n          movement: \"OUT\",\n          bin_location_id: balance.location_id,\n        };\n\n        console.log(\"outData JN\", outData);\n\n        return await this.db.collection(\"inventory_movement\").add(outData);\n\n      case \"Miscellaneous Receipt\":\n        const inData = {\n          ...baseMovementData,\n          movement: \"IN\",\n          bin_location_id: subformData.location_id || balance.location_id,\n          batch_number_id:\n            materialData.item_batch_management == \"1\"\n              ? baseMovementData.batch_number_id\n              : null,\n        };\n        return await this.db.collection(\"inventory_movement\").add(inData);\n\n      case \"Inventory Category Transfer Posting\":\n        const outMovementICT = {\n          ...baseMovementData,\n          movement: \"OUT\",\n          inventory_category: balance.category_from,\n          bin_location_id: balance.location_id,\n        };\n        const inMovementICT = {\n          ...baseMovementData,\n          movement: \"IN\",\n          inventory_category: balance.category_to,\n          bin_location_id: balance.location_id,\n        };\n        const [outResultICT, inResultICT] = await Promise.all([\n          this.db.collection(\"inventory_movement\").add(outMovementICT),\n          this.db.collection(\"inventory_movement\").add(inMovementICT),\n        ]);\n        return [outResultICT, inResultICT];\n\n      default:\n        const movement =\n          movementType === \"Inter Operation Facility Transfer\" ? \"IN\" : \"OUT\";\n        const binLocationId =\n          movement === \"IN\"\n            ? subformData.location_id || balance.location_id\n            : balance.location_id;\n        const movementData = {\n          ...baseMovementData,\n          movement,\n          bin_location_id: binLocationId,\n        };\n        return await this.db.collection(\"inventory_movement\").add(movementData);\n    }\n  }\n\n  async preCheckQuantitiesAndCosting(allData, context) {\n    try {\n      console.log(\"Starting preCheckQuantitiesAndCosting with data:\", allData);\n\n      // Step 1: Validate top-level required fields\n      try {\n        const requiredTopLevelFields = [\n          \"stock_movement_no\",\n          \"movement_type\",\n          \"issue_date\",\n          \"issuing_operation_faci\",\n        ];\n        this.validateRequiredFields(allData, requiredTopLevelFields);\n      } catch (error) {\n        // Show required fields error as an alert\n        if (context && context.parentGenerateForm) {\n          context.parentGenerateForm.$alert(\n            error.message,\n            \"Missing Required Fields\",\n            {\n              confirmButtonText: \"OK\",\n              type: \"warning\",\n            }\n          );\n        } else {\n          alert(error.message);\n        }\n        throw error; // Stop further processing\n      }\n\n      // Step 2: Get movement type details\n      const movementType = allData.movement_type;\n\n      // Step 3: Validate subform data\n      const subformData = allData.stock_movement;\n      if (!subformData || subformData.length === 0) {\n        throw new Error(\"Stock movement items are required\");\n      }\n\n      // Step 4: Perform item validations and quantity checks\n      await this.preValidateItems(subformData, movementType, allData);\n\n      // Step 5: Check quantities and costing records for deduction movements\n      for (const item of subformData) {\n        const materialResponse = await this.db\n          .collection(\"Item\")\n          .where({ id: item.item_selection })\n          .get();\n        const materialData = materialResponse.data[0];\n        if (!materialData) {\n          throw new Error(`Material not found: ${item.item_selection}`);\n        }\n        if (!materialData.based_uom) {\n          throw new Error(\n            `Base UOM is missing for item ${item.item_selection}`\n          );\n        }\n        const balancesToProcess =\n          allData.balance_index?.filter(\n            (balance) => balance.sm_quantity && balance.sm_quantity > 0\n          ) || [];\n\n        if (\n          [\n            \"Miscellaneous Issue\",\n            \"Disposal/Scrap\",\n            \"Location Transfer\",\n            \"Inventory Category Transfer Posting\",\n          ].includes(movementType)\n        ) {\n          for (const balance of balancesToProcess) {\n            const collectionName =\n              materialData.item_batch_management == \"1\"\n                ? \"item_batch_balance\"\n                : \"item_balance\";\n            const balanceResponse = await this.db\n              .collection(collectionName)\n              .where({\n                material_id: materialData.id,\n                location_id: balance.location_id,\n              })\n              .get();\n            const balanceData = balanceResponse.data[0];\n\n            // if (!balanceData) {\n            //     throw new Error(`No existing balance found for item ${item.item_selection} at location ${balance.location_id}`);\n            // }\n\n            const categoryField =\n              movementType === \"Location Transfer\"\n                ? this.categoryMap[\"Unrestricted\"]\n                : this.categoryMap[\n                    balance.category || subformData.category || \"Unrestricted\"\n                  ];\n            const currentQty = balanceData[categoryField] || 0;\n            const requestedQty =\n              balance.quantity_converted || balance.sm_quantity;\n\n            if (currentQty < requestedQty) {\n              throw new Error(\n                `Insufficient quantity in ${\n                  balance.category || \"Unrestricted\"\n                } for item ${item.item_selection} at location ${\n                  balance.location_id\n                }. Available: ${currentQty}, Requested: ${requestedQty}`\n              );\n            }\n\n            // Step 6: Check costing records for deduction\n            if (\n              [\"Miscellaneous Issue\", \"Disposal/Scrap\"].includes(movementType)\n            ) {\n              const costingMethod = materialData.material_costing_method;\n              if (!costingMethod) {\n                throw new Error(\n                  `Costing method not defined for item ${item.item_selection}`\n                );\n              }\n\n              if (costingMethod === \"Weighted Average\") {\n                const waQuery =\n                  materialData.item_batch_management == \"1\" && balance.batch_id\n                    ? this.db.collection(\"wa_costing_method\").where({\n                        material_id: materialData.id,\n                        batch_id: balance.batch_id,\n                        plant_id: allData.issuing_operation_faci,\n                      })\n                    : this.db.collection(\"wa_costing_method\").where({\n                        material_id: materialData.id,\n                        plant_id: allData.issuing_operation_faci,\n                      });\n\n                const waResponse = await waQuery.get();\n                if (!waResponse.data || waResponse.data.length === 0) {\n                  throw new Error(\n                    `No costing record found for deduction for item ${item.item_selection} (Weighted Average)`\n                  );\n                }\n\n                const waData = waResponse.data[0];\n                if ((waData.wa_quantity || 0) < requestedQty) {\n                  throw new Error(\n                    `Insufficient WA quantity for item ${item.item_selection}. Available: ${waData.wa_quantity}, Requested: ${requestedQty}`\n                  );\n                }\n              } else if (costingMethod === \"First In First Out\") {\n                const fifoQuery =\n                  materialData.item_batch_management == \"1\" && balance.batch_id\n                    ? this.db.collection(\"fifo_costing_history\").where({\n                        material_id: materialData.id,\n                        batch_id: balance.batch_id,\n                      })\n                    : this.db\n                        .collection(\"fifo_costing_history\")\n                        .where({ material_id: materialData.id });\n\n                const fifoResponse = await fifoQuery.get();\n                if (!fifoResponse.data || fifoResponse.data.length === 0) {\n                  throw new Error(\n                    `No costing record found for deduction for item ${item.item_selection} (FIFO)`\n                  );\n                }\n\n                const fifoData = fifoResponse.data;\n                const totalAvailable = fifoData.reduce(\n                  (sum, record) => sum + (record.fifo_available_quantity || 0),\n                  0\n                );\n                if (totalAvailable < requestedQty) {\n                  throw new Error(\n                    `Insufficient FIFO quantity for item ${item.item_selection}. Available: ${totalAvailable}, Requested: ${requestedQty}`\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"⭐ Validation successful - all checks passed\");\n      return true;\n    } catch (error) {\n      // Step 8: Handle errors (excluding required fields, which are handled above)\n      console.error(\"Error in preCheckQuantitiesAndCosting:\", error.message);\n      // if (error.message.includes('Please fill in all required fields')) {\n      //     // Skip popup for required fields errors, as they are already handled as alerts\n      //     throw error;\n      // }\n      if (context && context.parentGenerateForm) {\n        context.parentGenerateForm.$alert(error.message, \"Validation Error\", {\n          confirmButtonText: \"OK\",\n          type: \"error\",\n        });\n      } else {\n        alert(error.message);\n      }\n      console.error(\"❌ Validation failed with error:\", error.message);\n      throw error;\n    }\n  }\n}\n\n// Modified processFormData to use preCheckQuantitiesAndCosting\nasync function processFormData(db, formData, context, organizationId) {\n  const adjuster = new StockAdjuster(db);\n  let results;\n\n  if (context) {\n    adjuster.getParamsVariables = context.getParamsVariables.bind(context);\n    //adjuster.getParamsVariables = this.getParamsVariables('page_status');\n    adjuster.parentGenerateForm = context.parentGenerateForm;\n  }\n\n  const closeDialog = () => {\n    if (context.parentGenerateForm) {\n      context.parentGenerateForm.$refs.SuPageDialogRef.hide();\n      context.parentGenerateForm.refresh();\n      context.hideLoading();\n    }\n  };\n\n  try {\n    console.log(\"🔍 About to run validation checks\");\n    const isValid = await adjuster.preCheckQuantitiesAndCosting(\n      formData,\n      context\n    );\n    console.log(\"✅ Validation result:\", isValid);\n\n    if (isValid) {\n      console.log(\"📝 Starting stock adjustment processing\");\n      results = await adjuster.processStockAdjustment(formData, organizationId);\n      console.log(\"✓ Stock adjustment completed\");\n    }\n    return results;\n  } catch (error) {\n    console.error(\"❌ Error in processFormData:\", error.message);\n    throw error;\n  } finally {\n    closeDialog();\n  }\n}\n\n// Add this at the bottom of your Save as Completed button handler\nconst self = this;\nconst allData = self.getValues();\nlet organizationId = this.getVarGlobal(\"deptParentId\");\nconsole.log(\"organization id\", organizationId);\nif (organizationId === \"0\") {\n  organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n}\n\nconsole.log(\"this.getVarGlobal\", this.getVarGlobal(\"deptParentId\"));\nthis.showLoading();\n\n// Improved error handling and debugging\nconsole.log(\"Starting processFormData with data:\", JSON.stringify(allData));\n\nprocessFormData(db, allData, self, organizationId)\n  .then((results) => {\n    console.log(\n      \"ProcessFormData completed successfully with results:\",\n      results\n    );\n    if (allData.page_status === \"Add\") {\n      console.log(\"New stock movement created:\", results);\n      self.hideLoading();\n      self.$message.success(\"Stock movement created successfully\");\n      self.parentGenerateForm.$refs.SuPageDialogRef.hide();\n      self.parentGenerateForm.refresh();\n    } else if (allData.page_status === \"Edit\") {\n      console.log(\"Stock movement updated:\", results);\n      self.hideLoading();\n      self.$message.success(\"Stock movement updated successfully\");\n      self.parentGenerateForm.$refs.SuPageDialogRef.hide();\n      self.parentGenerateForm.refresh();\n    }\n  })\n  .catch((error) => {\n    console.error(\"Error in processFormData:\", error);\n    console.error(\"Error message:\", error.message);\n    console.error(\"Error stack:\", error.stack);\n    self.hideLoading();\n    self.$message.error(error.message || \"An unknown error occurred\");\n  });\n",
        "type": "js"
      },
      {
        "key": "evhzkk8e",
        "name": "onClick_select_stock",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "lrosryqy",
            "action": "openDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "sm_item_balance"
            }
          },
          {
            "key": "mr8f903u",
            "action": "js",
            "options": {
              "func": "const allData = this.getValues();\nconst lineItemData = arguments[0]?.row;\nconst rowIndex = arguments[0]?.rowIndex;\nconst movement_type = allData.movement_type;\nconst plant_id = allData.issuing_operation_faci;\nconst materialId = lineItemData.item_selection;\nconst tempQtyData = lineItemData.temp_qty_data;\n\nconst movementTypeName = movement_type;\n\n// Show/hide category columns based on movement type\nif (movementTypeName === \"Inventory Category Transfer Posting\") {\n  this.display(\"sm_item_balance.table_item_balance.category_from\");\n  this.display(\"sm_item_balance.table_item_balance.category_to\");\n  this.hide(\"sm_item_balance.table_item_balance.category\");\n} else {\n  this.hide(\"sm_item_balance.table_item_balance.category_from\");\n  this.hide(\"sm_item_balance.table_item_balance.category_to\");\n}\n\n// Fetch item data\ndb.collection(\"Item\")\n  .where({\n    id: materialId,\n  })\n  .get()\n  .then((response) => {\n    console.log(\"response item\", response);\n    const itemData = response.data[0];\n    console.log(\"itemData\", itemData);\n\n    this.setData({\n      sm_item_balance: {\n        material_id: itemData.material_code,\n        material_name: itemData.material_name,\n        row_index: rowIndex,\n      },\n    });\n\n    if (itemData.item_batch_management === 1) {\n      this.display(\"sm_item_balance.table_item_balance.batch_id\");\n\n      db.collection(\"item_batch_balance\")\n        .where({\n          material_id: materialId,\n          plant_id: plant_id,\n        })\n        .get()\n        .then((response) => {\n          console.log(\"response item_batch_balance\", response.data);\n          console.log(\"material\", materialId);\n          const itemBalanceData = response.data;\n\n          // Map the id from item_batch_balance to balance_id\n          const mappedData = Array.isArray(itemBalanceData)\n            ? itemBalanceData.map((item) => ({\n                ...item,\n                balance_id: item.id,\n              }))\n            : [{ ...itemBalanceData, balance_id: itemBalanceData.id }];\n\n          if (tempQtyData) {\n            const tempQtyDataArray = JSON.parse(tempQtyData);\n            this.setData({\n              [`sm_item_balance.table_item_balance`]: tempQtyDataArray,\n            });\n          } else {\n            this.setData({\n              [`sm_item_balance.table_item_balance`]: mappedData,\n            });\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching item batch balance data:\", error);\n        });\n    } else {\n      this.hide(\"sm_item_balance.table_item_balance.batch_id\");\n\n      db.collection(\"item_balance\")\n        .where({\n          material_id: materialId,\n          plant_id: plant_id,\n        })\n        .get()\n        .then((response) => {\n          console.log(\"response item_balance\", response.data);\n          const itemBalanceData = response.data;\n\n          // Map the id from item_balance to balance_id\n          const mappedData = Array.isArray(itemBalanceData)\n            ? itemBalanceData.map((item) => ({\n                ...item,\n                balance_id: item.id,\n              }))\n            : [{ ...itemBalanceData, balance_id: itemBalanceData.id }];\n\n          if (tempQtyData) {\n            const tempQtyDataArray = JSON.parse(tempQtyData);\n            this.setData({\n              [`sm_item_balance.table_item_balance`]: tempQtyDataArray,\n              [`sm_item_balance.table_item_balance.unit_price`]:\n                itemData.purchase_unit_price,\n            });\n          } else {\n            this.setData({\n              [`sm_item_balance.table_item_balance`]: mappedData,\n            });\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error fetching item balance data:\", error);\n        });\n    }\n  })\n  .catch((error) => {\n    console.error(\"Error fetching item data:\", error);\n  });\n\nthis.setData({\n  [`sm_item_balance.table_item_balance.category`]: undefined,\n});\n"
            }
          }
        ]
      },
      {
        "key": "5y8a2wfi",
        "name": "onConfirm_5y8a2wfi",
        "func": "const allData = this.getValues();\nconst temporaryData = allData.sm_item_balance.table_item_balance;\nconst rowIndex = allData.sm_item_balance.row_index;\n\nlet isValid = true; // Flag to track validation status\n\n// Filter out items with quantity 0 and sum up sm_quantity values with validation\nconst totalSmQuantity = temporaryData\n  .filter((item) => (item.sm_quantity || 0) > 0) // Skip if quantity is 0 or falsy\n  .reduce((sum, item) => {\n    const category_type = item.category ?? item.category_from;\n    const quantity = item.sm_quantity || 0;\n\n    // Define quantity fields\n    const unrestricted_field = item.unrestricted_qty;\n    const reserved_field = item.reserved_qty;\n    const quality_field = item.qualityinsp_qty;\n    const blocked_field = item.block_qty;\n    const intransit_field = item.intransit_qty;\n\n    // Validate only if movementType is \"Out\"\n    if (quantity > 0) {\n      let selectedField;\n\n      switch (category_type) {\n        case \"Unrestricted\":\n          selectedField = unrestricted_field;\n          break;\n        case \"Reserved\":\n          selectedField = reserved_field;\n          break;\n        case \"Quality Inspection\":\n          selectedField = quality_field;\n          break;\n        case \"Blocked\":\n          selectedField = blocked_field;\n          break;\n        case \"In Transit\":\n          selectedField = intransit_field;\n          break;\n        default:\n          this.setData({ error_message: \"Invalid category type\" });\n          isValid = false;\n          return sum; // Return current sum without adding\n      }\n\n      // Check if selected field has enough quantity\n      if (selectedField < quantity) {\n        this.setData({\n          error_message: `Quantity in ${category_type} is not enough.`,\n        });\n        isValid = false;\n        return sum; // Return current sum without adding\n      }\n    }\n\n    // Add to sum if validation passes or if movement is \"In\"\n    return sum + quantity;\n  }, 0);\n\nconsole.log(\"Total SM quantity:\", totalSmQuantity);\n\n// Only update data and close dialog if all validations pass\nif (isValid) {\n  // Update total quantity\n  this.setData({\n    [`stock_movement.${rowIndex}.total_quantity`]: totalSmQuantity,\n  });\n\n  // Update balance index\n  const currentBalanceIndex = this.getValues().balance_index || [];\n  const rowsToUpdate = temporaryData.filter(\n    (item) => (item.sm_quantity || 0) > 0\n  );\n\n  let updatedBalanceIndex = [...currentBalanceIndex];\n\n  rowsToUpdate.forEach((newRow) => {\n    const existingIndex = updatedBalanceIndex.findIndex(\n      (item) => item.balance_id === newRow.balance_id\n    );\n    console.log(\"existingIndex\", existingIndex);\n    if (existingIndex !== -1) {\n      updatedBalanceIndex[existingIndex] = { ...newRow };\n    } else {\n      updatedBalanceIndex.push({ ...newRow });\n    }\n  });\n\n  console.log(\"updatedBalanceIndex\", updatedBalanceIndex);\n\n  const textareaContent = JSON.stringify(temporaryData);\n\n  this.setData({\n    [`stock_movement.${rowIndex}.temp_qty_data`]: textareaContent,\n  });\n\n  this.setData({\n    balance_index: updatedBalanceIndex,\n  });\n\n  // Clear the error message\n  this.setData({\n    error_message: \"\",\n  });\n\n  this.closeDialog(\"sm_item_balance\");\n}\n",
        "type": "js"
      },
      {
        "key": "to6zrlk7",
        "name": "onCancel_to6zrlk7",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "neru9lpn",
            "action": "closeDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "sm_item_balance"
            }
          }
        ]
      },
      {
        "key": "llytn27o",
        "name": "onAfterUpdate_item",
        "func": "const allData = this.getValues();\nconst movementType = allData.movement_type;\nconst page_status = allData.page_status;\n\nconst rowIndex = arguments[0].rowIndex;\n\nconsole.log(\"Triggered JN\");\nconsole.log(\"arguments[0]\", arguments[0]);\nconsole.log(\"page_status\", page_status);\n\nconst {\n  material_desc,\n  based_uom,\n  purchase_unit_price,\n  table_uom_conversion,\n  mat_purchase_tax_id,\n  item_batch_management,\n} = arguments[0].fieldModel.item;\n\nconsole.log(\"page_status 2\", page_status);\n\nconst movementTypeCategories = {\n  \"Inter Operation Facility Transfer\": [\n    \"Unrestricted\",\n    \"Quality Inspection\",\n    \"Blocked\",\n  ],\n  \"Inter Operation Facility Transfer (Receiving)\": [\n    \"Unrestricted\",\n    \"Quality Inspection\",\n    \"Blocked\",\n  ],\n  \"Location Transfer\": [\n    \"Unrestricted\",\n    \"Quality Inspection\",\n    \"Blocked\",\n    \"Reserved\",\n  ],\n  \"Miscellaneous Issue\": [\"Unrestricted\"],\n  \"Miscellaneous Receipt\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n  \"Disposal/Scrap\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n  \"Inventory Category Transfer Posting\": [\n    \"Unrestricted\",\n    \"Quality Inspection\",\n    \"Blocked\",\n  ],\n};\n\nconst fetchItemData = async () => {\n  try {\n    if (\n      item_batch_management === 1 &&\n      movementType === \"Miscellaneous Receipt\"\n    ) {\n      this.display(\"stock_movement.batch_id\");\n    } else {\n      this.hide(\"stock_movement.batch_id\");\n    }\n\n    // Fetch and filter categories\n    const categoryObjectResponse = await db\n      .collection(\"inventory_category\")\n      .get();\n    const allowedCategories = movementTypeCategories[movementType] || [\n      \"Unrestricted\",\n    ];\n    const filteredCategories = categoryObjectResponse.data.filter((category) =>\n      allowedCategories.includes(category.inventory_category_name)\n    );\n\n    console.log(\"filteredCategories\", filteredCategories);\n\n    // Set category options\n    await this.setOptionData(\n      [`stock_movement.${rowIndex}.category`],\n      filteredCategories\n    );\n\n    await this.setData({\n      [`stock_movement.${rowIndex}.received_quantity_uom`]: based_uom,\n      [`stock_movement.${rowIndex}.unit_price`]: purchase_unit_price,\n    });\n\n    const altUoms = table_uom_conversion.map((data) => data.alt_uom_id);\n    altUoms.push(based_uom);\n\n    const uomOptions = [];\n\n    const processData = async () => {\n      for (let i = 0; i < altUoms.length; i++) {\n        const res = await db\n          .collection(\"unit_of_measurement\")\n          .where({ id: altUoms[i] })\n          .get();\n        uomOptions.push(res.data[0]);\n      }\n\n      console.log(\"UomOptions\", uomOptions);\n    };\n\n    const updateUomOption = async () => {\n      await processData();\n\n      await this.setOptionData(\n        [`stock_movement.${rowIndex}.received_quantity_uom`],\n        uomOptions\n      );\n    };\n\n    updateUomOption();\n  } catch (error) {\n    console.error(\"Error fetching item data:\", error);\n  }\n};\n\nif (page_status === \"Add\") {\n  console.log(\"Triggering fetch Item\");\n  fetchItemData();\n}\n",
        "type": "js"
      },
      {
        "key": "dw2w7iha",
        "name": "onClick_issue_ift",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "9svrj3d9",
            "action": "js",
            "options": {
              "func": "class StockAdjuster {\n    constructor(db) {\n        this.db = db;\n        this.categoryMap = {\n            'Unrestricted': 'unrestricted_qty',\n            'Quality Inspection': 'qualityinsp_qty',\n            'Blocked': 'block_qty',\n            'Reserved': 'reserved_qty',\n            'In Transit': 'intransit_qty'\n        };\n    }\n\n    async processStockAdjustment(db, self) {\n        const stockMovementNo = self.getParamsVariables('stock_movement_no');\n        const allData = self.getValues();\n\n        try {\n            // Fetch receiving stock movement\n            const receivingResponse = await db.collection('stock_movement')\n                .where({ stock_movement_no: stockMovementNo })\n                .get();\n                console.log(\"receivingResponse\",receivingResponse)\n            const receivingData = receivingResponse.data[0];\n            const issuingStockMovementId = receivingData.movement_id;\n            const receivingStockMovementId = receivingData.id;\n            const receivingStockMovementPlantId = receivingData.plant_id;\n\n            // Fetch issuing stock movement\n            const issuingResponse = await db.collection('stock_movement')\n                .where({ id: issuingStockMovementId })\n                .get();\n            const issuingData = issuingResponse.data[0];\n            const issuingStockMovementPlantId = issuingData.plant_id;\n            const issuingStockMovementNo = issuingData.stock_movement_no;\n\n            // Process items and gather data\n            const processedItems = this.processStockMovementItems(allData);\n\n            // Update all tables\n            const updateResults = await this.updateRelatedTables(\n                processedItems,\n                issuingStockMovementNo,\n                stockMovementNo,\n                issuingStockMovementPlantId,\n                receivingStockMovementPlantId,\n                receivingStockMovementId\n            );\n\n            return {\n                receivingStockMovement: receivingData,\n                issuingStockMovement: issuingData,\n                ...updateResults\n            };\n        } catch (error) {\n            console.error('Stock adjustment failed:', error);\n            throw error;\n        }\n    }\n\n    processStockMovementItems(allData) {\n        const processedItems = [];\n\n        // Step 1: Loop through stock_movement items\n        allData.stock_movement.forEach(stockItem => {\n            const itemDetails = {\n                item_selection: stockItem.item_selection,\n                category: stockItem.category || 'Unrestricted',\n                location_id: stockItem.location_id,\n                received_quantity: stockItem.received_quantity || 0,\n                total_quantity: stockItem.total_quantity || 0\n            };\n\n            // Step 2: Filter balance_index based on item_selection\n            const relatedBalances = allData.balance_index\n                .filter(balance => balance.material_id === stockItem.item_selection)\n                .map(balance => ({\n                    material_id: balance.material_id,\n                    balance_id: balance.balance_id,\n                    category: itemDetails.category,\n                    location_id: itemDetails.location_id,\n                    received_quantity: itemDetails.received_quantity,\n                    quantities: {\n                        sm_quantity: balance.sm_quantity,\n                        intransit_qty: balance.intransit_qty\n                    }\n                }));\n\n            processedItems.push({\n                itemDetails,\n                balances: relatedBalances\n            });\n        });\n\n        return processedItems;\n    }\n\n    async updateRelatedTables(processedItems, issuingStockMovementNo, stockMovementNo, \n                            issuingPlantId, receivingPlantId, receivingStockMovementId) {\n        const results = {\n            balanceUpdates: [],\n            inventoryMovements: [],\n            costingUpdates: []\n        };\n\n        for (const item of processedItems) {\n            const { itemDetails, balances } = item;\n\n            // Update balances\n            for (const balance of balances) {\n                // Update issuing balance\n                const issuingBalanceUpdate = await this.updateIssuingBalance(\n                    balance.balance_id,\n                    balance.received_quantity\n                );\n\n                // Update or create receiving balance\n                const receivingBalanceUpdate = await this.updateReceivingBalance(\n                    balance.material_id,\n                    receivingPlantId,\n                    balance.location_id,\n                    balance.received_quantity,\n                    balance.category\n                );\n\n                results.balanceUpdates.push({\n                    issuing: issuingBalanceUpdate,\n                    receiving: receivingBalanceUpdate\n                });\n\n                // Record inventory movements\n                const inventoryMovement = await this.recordInventoryMovement(\n                    balance.material_id,\n                    balance.received_quantity,\n                    balance.category,\n                    balance.location_id,\n                    issuingStockMovementNo,\n                    stockMovementNo,\n                    issuingPlantId,\n                    receivingPlantId,\n                    receivingStockMovementId\n                );\n                results.inventoryMovements.push(inventoryMovement);\n\n                // Update costing tables\n                const costingUpdate = await this.updateCosting(\n                    balance.material_id,\n                    balance.received_quantity,\n                    issuingPlantId,\n                    receivingPlantId\n                );\n                results.costingUpdates.push(costingUpdate);\n            }\n        }\n        // Update issuing stock movement status\n        const allComplete = processedItems.every(item => \n            item.itemDetails.received_quantity === item.itemDetails.total_quantity\n        );\n        const status = allComplete ? 'completed' : 'in_progress';\n\n        const issuingStockMovementResponse = await this.db.collection(\"stock_movement\")\n            .where({ stock_movement_no: issuingStockMovementNo })\n            .get();\n        const issuingStockMovement = issuingStockMovementResponse.data[0];\n\n        if (issuingStockMovement) {\n            await this.db.collection(\"stock_movement\")\n                .doc(issuingStockMovement.id)\n                .update({\n                    status: status,\n                    update_time: new Date().toISOString()\n                });\n\n            const updatedIssuingStockMovementResponse = await this.db.collection(\"stock_movement\")\n                .doc(issuingStockMovement.id)\n                .get();\n            results.stockMovementUpdate = updatedIssuingStockMovementResponse.data[0];\n        } else {\n            throw new Error(`Issuing stock movement not found for stock_movement_no: ${issuingStockMovementNo}`);\n        }\n\n        return results;\n        }\n\n    async updateIssuingBalance(balanceId, receivedQuantity) {\n        const collectionName = 'item_balance'; // Adjust if batch managed\n        const balanceResponse = await this.db.collection(collectionName)\n            .where({ id: balanceId })\n            .get();\n        const balanceData = balanceResponse.data[0];\n\n        if (!balanceData) {\n            throw new Error(`Balance not found for ID: ${balanceId}`);\n        }\n\n        const updateData = {\n            intransit_qty: (balanceData.intransit_qty || 0) - receivedQuantity,\n            balance_quantity: (balanceData.balance_quantity || 0) - receivedQuantity,\n            update_time: new Date().toISOString()\n        };\n\n        await this.db.collection(collectionName)\n            .doc(balanceId)\n            .update(updateData);\n\n        return { balanceId, ...updateData };\n    }\n\n    async updateReceivingBalance(materialId, plantId, locationId, receivedQuantity, category) {\n        const collectionName = 'item_balance'; // Adjust if batch managed\n        const categoryField = this.categoryMap[category];\n        \n        const balanceResponse = await this.db.collection(collectionName)\n            .where({ material_id: materialId, plant_id: plantId, location_id: locationId })\n            .get();\n        const balanceData = balanceResponse.data[0];\n\n        if (balanceData) {\n            const updateData = {\n                balance_quantity: (balanceData.balance_quantity || 0) + receivedQuantity,\n                [categoryField]: (balanceData[categoryField] || 0) + receivedQuantity,\n                update_time: new Date().toISOString()\n            };\n\n            await this.db.collection(collectionName)\n                .doc(balanceData.id)\n                .update(updateData);\n            return { balanceId: balanceData.id, ...updateData };\n        } else {\n            const newBalanceData = {\n                material_id: materialId,\n                plant_id: plantId,\n                location_id: locationId,\n                balance_quantity: receivedQuantity,\n                [categoryField]: receivedQuantity,\n                unrestricted_qty: category === 'Unrestricted' ? receivedQuantity : 0,\n                qualityinsp_qty: category === 'Quality Inspection' ? receivedQuantity : 0,\n                block_qty: category === 'Blocked' ? receivedQuantity : 0,\n                reserved_qty: category === 'Reserved' ? receivedQuantity : 0,\n                intransit_qty: 0,\n                create_time: new Date().toISOString(),\n                update_time: new Date().toISOString()\n            };\n\n            const response = await this.db.collection(collectionName).add(newBalanceData);\n            return { balanceId: response.data[0].id, ...newBalanceData };\n        }\n    }\n\n    async recordInventoryMovement(materialId, quantity, category, locationId, \n                                issuingStockMovementNo, stockMovementNo, \n                                issuingPlantId, receivingPlantId, stockMovementId) {\n        const outMovement = {\n            trx_no: issuingStockMovementNo,\n            movement_type: \"Out\",\n            category: \"In Transit\",\n            quantity: quantity,\n            material_id: materialId,\n            bin_location_id: locationId,\n            plant_id: issuingPlantId,\n            created_at: new Date(),\n            stock_movement_id: stockMovementId\n        };\n\n        const inMovement = {\n            trx_no: stockMovementNo,\n            movement_type: \"In\",\n            category: category,\n            quantity: quantity,\n            material_id: materialId,\n            bin_location_id: locationId,\n            plant_id: receivingPlantId,\n            created_at: new Date(),\n            stock_movement_id: stockMovementId\n        };\n\n        const [outResult, inResult] = await Promise.all([\n            this.db.collection(\"inventory_movement\").add(outMovement),\n            this.db.collection(\"inventory_movement\").add(inMovement)\n        ]);\n\n        return {\n            out: outResult.data[0],\n            in: inResult.data[0]\n        };\n    }\n\n    async updateCosting(materialId, receivedQuantity, issuingPlantId, receivingPlantId) {\n        const costingUpdates = {};\n        \n        // Fetch material data to determine costing method\n        const materialResponse = await this.db.collection(\"Item\")\n            .where({ id: materialId })\n            .get();\n        const materialData = materialResponse.data[0];\n        if (!materialData) {\n            throw new Error(`Material not found for ID: ${materialId}`);\n        }\n        \n        const organizationId = materialData.organization_id || 'default_org';\n    \n        if (materialData.material_costing_method === 'Weighted Average') {\n            // Issuing plant (deduct)\n            const waIssuingResponse = await this.db.collection(\"wa_costing_method\")\n                .where({ material_id: materialId, plant_id: issuingPlantId })\n                .get();\n            const waIssuingData = waIssuingResponse.data[0];\n            if (waIssuingData) {\n                const newQuantity = (waIssuingData.wa_quantity || 0) - receivedQuantity;\n                if (newQuantity < 0) throw new Error(\"Insufficient WA quantity at issuing plant\");\n                await this.db.collection(\"wa_costing_method\")\n                    .doc(waIssuingData.id)\n                    .update({ \n                        wa_quantity: newQuantity, \n                        updated_at: new Date() \n                    });\n                costingUpdates.issuingWA = { \n                    id: waIssuingData.id, \n                    wa_quantity: newQuantity \n                };\n            }\n    \n            // Receiving plant (add)\n            const waReceivingResponse = await this.db.collection(\"wa_costing_method\")\n                .where({ material_id: materialId, plant_id: receivingPlantId })\n                .get();\n            const waReceivingData = waReceivingResponse.data[0];\n            if (waReceivingData) {\n                const newQuantity = (waReceivingData.wa_quantity || 0) + receivedQuantity;\n                await this.db.collection(\"wa_costing_method\")\n                    .doc(waReceivingData.id)\n                    .update({ \n                        wa_quantity: newQuantity, \n                        updated_at: new Date() \n                    });\n                costingUpdates.receivingWA = { \n                    id: waReceivingData.id, \n                    wa_quantity: newQuantity \n                };\n            } else {\n                const newWAData = {\n                    material_id: materialId,\n                    plant_id: receivingPlantId,\n                    wa_quantity: receivedQuantity,\n                    wa_cost_price: waIssuingData?.wa_cost_price || 0, // Carry over cost price from issuing if exists\n                    created_at: new Date(),\n                    updated_at: new Date()\n                };\n                const newWAResponse = await this.db.collection(\"wa_costing_method\").add(newWAData);\n                costingUpdates.receivingWA = { \n                    id: newWAResponse.data[0].id, \n                    ...newWAData \n                };\n            }\n        } else if (materialData.material_costing_method === 'First In First Out') {\n            // Issuing plant (deduct)\n            const fifoIssuingResponse = await this.db.collection(\"fifo_costing_history\")\n                .where({ material_id: materialId, plant_id: issuingPlantId })\n                .get();\n            let fifoIssuingData = fifoIssuingResponse.data || [];\n            if (fifoIssuingData.length && receivedQuantity > 0) {\n                let remainingReduction = receivedQuantity;\n                fifoIssuingData.sort((a, b) => a.fifo_sequence - b.fifo_sequence);\n    \n                for (const fifoRecord of fifoIssuingData) {\n                    if (remainingReduction <= 0) break;\n    \n                    const available = fifoRecord.fifo_available_quantity;\n                    const reduction = Math.min(available, remainingReduction);\n                    const newAvailable = available - reduction;\n    \n                    await this.db.collection(\"fifo_costing_history\")\n                        .doc(fifoRecord.id)\n                        .update({ \n                            fifo_available_quantity: newAvailable, \n                            updated_at: new Date() \n                        });\n                    costingUpdates.issuingFIFO = costingUpdates.issuingFIFO || [];\n                    costingUpdates.issuingFIFO.push({ \n                        id: fifoRecord.id, \n                        fifo_available_quantity: newAvailable \n                    });\n    \n                    remainingReduction -= reduction;\n                }\n    \n                if (remainingReduction > 0) {\n                    throw new Error(\"Insufficient FIFO quantity at issuing plant\");\n                }\n            }\n    \n            // Receiving plant (add)\n            const fifoReceivingResponse = await this.db.collection(\"fifo_costing_history\")\n                .where({ material_id: materialId, plant_id: receivingPlantId })\n                .get();\n            const fifoReceivingData = fifoReceivingResponse.data || [];\n            let sequenceNumber = 1;\n            if (fifoReceivingData.length) {\n                const existingSequences = fifoReceivingData.map(doc => parseInt(doc.fifo_sequence || 0));\n                sequenceNumber = Math.max(...existingSequences, 0) + 1;\n            }\n    \n            // Get cost price from earliest issuing FIFO record if available\n            const fifoCostPrice = fifoIssuingData.length ? \n                fifoIssuingData[0].fifo_cost_price : \n                0;\n    \n            const newFifoData = {\n                fifo_cost_price: fifoCostPrice,\n                fifo_initial_quantity: receivedQuantity,\n                fifo_available_quantity: receivedQuantity,\n                material_id: materialId,\n                batch_id: materialData.item_isbatch_managed === '1' ? materialId : null,\n                fifo_sequence: sequenceNumber,\n                plant_id: receivingPlantId,\n                organization_id: organizationId,\n                created_at: new Date(),\n                updated_at: new Date()\n            };\n            const newFifoResponse = await this.db.collection(\"fifo_costing_history\").add(newFifoData);\n            costingUpdates.receivingFIFO = { \n                id: newFifoResponse.data[0].id, \n                ...newFifoData \n            };\n        }\n    \n        return costingUpdates;\n    }\n}\n\nasync function processFormData(db, self) {\n    const adjuster = new StockAdjuster(db);\n    const closeDialog = () => {\n        if (self.parentGenerateForm) {\n            self.parentGenerateForm.$refs.SuPageDialogRef.hide();\n            self.parentGenerateForm.refresh();\n        }\n    };\n\n    try {\n        const results = await adjuster.processStockAdjustment(db, self);\n        closeDialog();\n        console.log('Stock movement processed:', results);\n        return results;\n    } catch (error) {\n        console.error('Error processing stock adjustment:', error.message);\n        throw new Error(`Stock adjustment failed: ${error.message}`);\n    }\n}\n\n// Usage\nconst self = this;\nprocessFormData(db, self)\n    .then(results => console.log('Success:', results))\n    .catch(error => console.error('Error:', error.message));"
            }
          }
        ]
      },
      {
        "key": "0rcda5nq",
        "name": "onClick_complete_receive",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "5o39584i",
            "action": "js",
            "options": {
              "func": "class ReceivingIOFTProcessor {\n  constructor(db) {\n    this.db = db;\n    this.categoryMap = {\n      Unrestricted: \"unrestricted_qty\",\n      \"Quality Inspection\": \"qualityinsp_qty\",\n      Blocked: \"block_qty\",\n      Reserved: \"reserved_qty\",\n      \"In Transit\": \"intransit_qty\",\n    };\n  }\n\n  // Helper functions for consistent decimal formatting\n  roundQty(value) {\n    return Number(Number(value).toFixed(3));\n  }\n\n  roundPrice(value) {\n    return Number(Number(value).toFixed(4));\n  }\n\n  validateRequiredFields(data, requiredFields, context = \"\") {\n    const missingFields = requiredFields.filter(\n      (field) => !data[field] && data[field] !== 0\n    );\n    if (missingFields.length > 0) {\n      return `Please fill in all required fields marked with (*) ${context}: ${missingFields.join(\n        \", \"\n      )}`;\n    }\n    return null;\n  }\n\n  async processReceivingIOFT(db, self, organizationId) {\n    const errors = [];\n    const allData = self.getValues();\n    const stockMovementId = allData.id;\n    // Step 1: Validate and fetch receiving IOFT data\n    let receivingIOFT, receivingIOFTId, issuingIOFT, issuingIOFTId;\n    try {\n      const receivingResponse = await db\n        .collection(\"stock_movement\")\n        .where({ id: stockMovementId })\n        .get();\n\n      if (!receivingResponse.data || receivingResponse.data.length === 0) {\n        errors.push(`Receiving IOFT not found for ID: ${stockMovementId}`);\n      } else {\n        receivingIOFT = receivingResponse.data[0];\n        receivingIOFTId = receivingIOFT.id;\n        console.log(\"Receiving IOFT\", receivingIOFT);\n\n        const issuingId = receivingIOFT.movement_id;\n\n        const issuingResponse = await db\n          .collection(\"stock_movement\")\n          .where({ id: issuingId })\n          .get();\n\n        if (!issuingResponse.data || issuingResponse.data.length === 0) {\n          errors.push(`Issuing IOFT not found for number: ${issuingId}`);\n        } else {\n          issuingIOFT = issuingResponse.data[0];\n          issuingIOFTId = issuingIOFT.id;\n          console.log(\"Issuing IOFT\", issuingIOFT);\n        }\n      }\n    } catch (error) {\n      errors.push(`Error fetching IOFT data: ${error.message}`);\n    }\n\n    // Step 2: Process the items for receiving\n    const processedItems = [];\n    if (allData.stock_movement && allData.stock_movement.length > 0) {\n      for (const item of allData.stock_movement) {\n        try {\n          // Fetch material data\n          const materialResponse = await this.db\n            .collection(\"Item\")\n            .where({ id: item.item_selection })\n            .get();\n\n          if (!materialResponse.data || materialResponse.data.length === 0) {\n            errors.push(`Material not found for ID: ${item.item_selection}`);\n            continue;\n          }\n\n          const materialData = materialResponse.data[0];\n\n          // Check if the material has sufficient in-transit quantity\n          const isBatchManaged =\n            materialData.item_batch_management == \"1\" ||\n            materialData.item_isbatch_managed == \"1\";\n\n          const collectionName = isBatchManaged\n            ? \"item_batch_balance\"\n            : \"item_balance\";\n\n          // Find the balance at the issuing plant with in-transit quantity\n          const balanceResponse = await this.db\n            .collection(collectionName)\n            .where({\n              material_id: item.item_selection,\n              plant_id: issuingIOFT.issuing_operation_faci,\n            })\n            .get();\n\n          if (!balanceResponse.data || balanceResponse.data.length === 0) {\n            errors.push(\n              `No balance found for material ${item.item_selection} at issuing plant`\n            );\n            continue;\n          }\n\n          // Collect all balances with in-transit quantity\n          const validBalances = balanceResponse.data.filter(\n            (balance) => (balance.intransit_qty || 0) > 0\n          );\n\n          if (validBalances.length === 0) {\n            errors.push(\n              `No in-transit quantity available for material ${item.item_selection}`\n            );\n            continue;\n          }\n\n          // Add to processed items\n          processedItems.push({\n            item,\n            materialData,\n            balances: validBalances,\n          });\n        } catch (error) {\n          errors.push(\n            `Error processing item ${item.item_selection}: ${error.message}`\n          );\n        }\n      }\n    } else {\n      errors.push(\"No items found in the stock movement\");\n    }\n\n    // Step 3: Display errors if any\n    if (errors.length > 0) {\n      const errorMessage = errors.join(\"\\n\");\n      if (self && self.parentGenerateForm) {\n        await self.parentGenerateForm.$alert(\n          errorMessage,\n          \"Validation Errors\",\n          {\n            confirmButtonText: \"OK\",\n            type: \"error\",\n          }\n        );\n      } else {\n        alert(errorMessage);\n      }\n      throw new Error(\"Validation failed with multiple errors\");\n    }\n\n    // Step 4: Show confirmation popup before proceeding\n    return new Promise((resolve, reject) => {\n      if (self && self.parentGenerateForm) {\n        self.parentGenerateForm\n          .$confirm(\n            \"All validations passed. Proceed with receiving the IOFT?\",\n            \"Confirm IOFT Receipt\",\n            {\n              confirmButtonText: \"Proceed\",\n              cancelButtonText: \"Cancel\",\n              type: \"success\",\n            }\n          )\n          .then(async () => {\n            try {\n              const results = await this.updateRelatedTables(\n                receivingIOFTId,\n                issuingIOFTId,\n                processedItems,\n                receivingIOFT,\n                issuingIOFT,\n                organizationId\n              );\n              resolve(results);\n            } catch (err) {\n              const processingErrors = [err.message];\n              const errorMessage = processingErrors.join(\"\\n\");\n              if (self && self.parentGenerateForm) {\n                await self.parentGenerateForm.$alert(\n                  errorMessage,\n                  \"Processing Errors\",\n                  {\n                    confirmButtonText: \"OK\",\n                    type: \"error\",\n                  }\n                );\n              } else {\n                alert(errorMessage);\n              }\n              reject(new Error(\"Processing failed with errors\"));\n            }\n          })\n          .catch(() => {\n            reject(new Error(\"IOFT receipt cancelled by user\"));\n          });\n      } else {\n        console.warn(\"No context provided, proceeding without confirmation\");\n        this.updateRelatedTables(\n          receivingIOFTId,\n          issuingIOFTId,\n          processedItems,\n          receivingIOFT,\n          issuingIOFT,\n          organizationId\n        )\n          .then((results) => {\n            resolve(results);\n          })\n          .catch((err) => {\n            const errorMessage = `Processing failed: ${err.message}`;\n            alert(errorMessage);\n            reject(new Error(\"Processing failed with errors\"));\n          });\n      }\n    });\n  }\n\n  async updateRelatedTables(\n    receivingIOFTId,\n    issuingIOFTId,\n    processedItems,\n    receivingIOFT,\n    issuingIOFT,\n    organizationId\n  ) {\n    const results = {\n      balanceUpdates: {\n        issuing: [],\n        receiving: [],\n      },\n      inventoryMovements: {\n        issuing: [],\n        receiving: [],\n      },\n      costingUpdates: {\n        issuing: [],\n        receiving: [],\n      },\n      stockMovementUpdates: {\n        issuing: null,\n        receiving: null,\n      },\n    };\n    const errors = [];\n\n    // Process each item\n    for (const { item, materialData, balances } of processedItems) {\n      const quantityToReceive = Number(item.total_quantity);\n      let remainingQuantity = quantityToReceive;\n\n      // Process against each balance until the full quantity is covered\n      for (const balance of balances) {\n        if (remainingQuantity <= 0) break;\n\n        const availableInTransit = Number(balance.intransit_qty || 0);\n        const quantityFromThisBalance = Math.min(\n          availableInTransit,\n          remainingQuantity\n        );\n\n        if (quantityFromThisBalance <= 0) continue;\n\n        try {\n          // 1. Update issuing plant balance (decrease in-transit)\n          const issuingBalanceUpdate = await this.updateIssuingBalance(\n            balance.id,\n            materialData.id,\n            quantityFromThisBalance\n          );\n          results.balanceUpdates.issuing.push(issuingBalanceUpdate);\n\n          // 2. Update or create receiving plant balance (increase unrestricted)\n          const receivingBalanceUpdate = await this.updateReceivingBalance(\n            materialData.id,\n            receivingIOFT.issuing_operation_faci, // This is the receiving plant ID\n            item.location_id || balance.location_id,\n            quantityFromThisBalance,\n            item.category || \"Unrestricted\",\n            item.unit_price,\n            organizationId\n          );\n          results.balanceUpdates.receiving.push(receivingBalanceUpdate);\n\n          // 3. Record inventory movements\n          const inventoryMovements = await this.recordInventoryMovements(\n            materialData.id,\n            quantityFromThisBalance,\n            \"In Transit\", // Source category at issuing plant\n            item.category || \"Unrestricted\", // Target category at receiving plant\n            item.location_id || balance.location_id,\n            issuingIOFT.stock_movement_no,\n            receivingIOFT.stock_movement_no,\n            issuingIOFT.issuing_operation_faci,\n            receivingIOFT.issuing_operation_faci,\n            item.unit_price,\n            item.received_quantity_uom,\n            materialData,\n            organizationId\n          );\n          results.inventoryMovements.issuing.push(\n            inventoryMovements.issuingMovement\n          );\n          results.inventoryMovements.receiving.push(\n            inventoryMovements.receivingMovement\n          );\n\n          // 4. Update costing records\n          const costingUpdates = await this.updateCosting(\n            materialData,\n            quantityFromThisBalance,\n            issuingIOFT.issuing_operation_faci,\n            receivingIOFT.issuing_operation_faci,\n            item.unit_price,\n            organizationId\n          );\n          results.costingUpdates.issuing.push(costingUpdates.issuingCosting);\n          results.costingUpdates.receiving.push(\n            costingUpdates.receivingCosting\n          );\n\n          // Reduce remaining quantity\n          remainingQuantity -= quantityFromThisBalance;\n        } catch (error) {\n          errors.push(\n            `Error processing balance for item ${materialData.id}: ${error.message}`\n          );\n        }\n      }\n\n      // Check if all quantity was processed\n      if (remainingQuantity > 0) {\n        errors.push(\n          `Could not process full quantity for item ${materialData.id}. Remaining: ${remainingQuantity}`\n        );\n      }\n    }\n\n    // Update receiving IOFT status to Completed\n    try {\n      await this.db.collection(\"stock_movement\").doc(receivingIOFTId).update({\n        stock_movement_status: \"Completed\",\n        update_time: new Date().toISOString(),\n      });\n\n      const updatedReceivingIOFT = await this.db\n        .collection(\"stock_movement\")\n        .where({ id: receivingIOFTId })\n        .get();\n\n      console.log(\"Updated Receiving IOFT\", updatedReceivingIOFT.data);\n\n      results.stockMovementUpdates.receiving = updatedReceivingIOFT.data;\n    } catch (error) {\n      errors.push(`Error updating receiving IOFT status: ${error.message}`);\n    }\n\n    // Update issuing IOFT status to Completed\n    try {\n      await this.db.collection(\"stock_movement\").doc(issuingIOFTId).update({\n        stock_movement_status: \"Completed\",\n        update_time: new Date().toISOString(),\n      });\n\n      const updatedIssuingIOFT = await this.db\n        .collection(\"stock_movement\")\n        .where({ id: issuingIOFTId })\n        .get();\n\n      console.log(\"Updated Issuing IOFT\", updatedIssuingIOFT.data);\n\n      results.stockMovementUpdates.issuing = updatedIssuingIOFT.data;\n    } catch (error) {\n      errors.push(`Error updating issuing IOFT status: ${error.message}`);\n    }\n\n    if (errors.length > 0) {\n      throw new Error(errors.join(\"; \"));\n    }\n\n    return results;\n  }\n\n  async updateIssuingBalance(balanceId, materialId, quantity) {\n    let materialData;\n    try {\n      const materialResponse = await this.db\n        .collection(\"Item\")\n        .where({ id: materialId })\n        .get();\n      materialData = materialResponse.data[0];\n      if (!materialData) {\n        throw new Error(`Material not found for ID: ${materialId}`);\n      }\n    } catch (err) {\n      throw new Error(`Failed to fetch material: ${err.message}`);\n    }\n\n    // Determine the collection based on whether the material is batch managed\n    const isBatchManaged =\n      materialData.item_batch_management == \"1\" ||\n      materialData.item_isbatch_managed == \"1\";\n    const collectionName = isBatchManaged\n      ? \"item_batch_balance\"\n      : \"item_balance\";\n\n    // Fetch the current balance\n    let balanceData;\n    try {\n      const balanceResponse = await this.db\n        .collection(collectionName)\n        .where({ id: balanceId })\n        .get();\n      balanceData = balanceResponse.data[0];\n      if (!balanceData) {\n        throw new Error(`Balance not found for ID: ${balanceId}`);\n      }\n    } catch (err) {\n      throw new Error(`Failed to fetch balance: ${err.message}`);\n    }\n\n    const formattedQuantity = this.roundQty(quantity);\n\n    // Ensure we don't go below zero\n    const currentInTransit = this.roundQty(balanceData.intransit_qty || 0);\n    if (currentInTransit < formattedQuantity) {\n      throw new Error(\n        `Insufficient in-transit quantity. Available: ${currentInTransit}, Requested: ${formattedQuantity}`\n      );\n    }\n\n    // Update balance - decrease in-transit quantity\n    const updateData = {\n      intransit_qty: this.roundQty(currentInTransit - formattedQuantity),\n      balance_quantity: this.roundQty(\n        (balanceData.balance_quantity || 0) - formattedQuantity\n      ),\n      update_time: new Date().toISOString(),\n    };\n\n    try {\n      await this.db\n        .collection(collectionName)\n        .doc(balanceId)\n        .update(updateData);\n    } catch (err) {\n      throw new Error(`Failed to update issuing balance: ${err.message}`);\n    }\n\n    return {\n      balanceId,\n      materialId,\n      quantityReduced: formattedQuantity,\n      ...updateData,\n    };\n  }\n\n  async updateReceivingBalance(\n    materialId,\n    plantId,\n    locationId,\n    quantity,\n    category = \"Unrestricted\",\n    unitPrice,\n    organizationId\n  ) {\n    let materialData;\n    try {\n      const materialResponse = await this.db\n        .collection(\"Item\")\n        .where({ id: materialId })\n        .get();\n      materialData = materialResponse.data[0];\n      if (!materialData) {\n        throw new Error(`Material not found for ID: ${materialId}`);\n      }\n    } catch (err) {\n      throw new Error(`Failed to fetch material: ${err.message}`);\n    }\n\n    // Determine the collection based on whether the material is batch managed\n    const isBatchManaged =\n      materialData.item_batch_management == \"1\" ||\n      materialData.item_isbatch_managed == \"1\";\n    const collectionName = isBatchManaged\n      ? \"item_batch_balance\"\n      : \"item_balance\";\n\n    const categoryField = this.categoryMap[category];\n    if (!categoryField) {\n      throw new Error(`Invalid category: ${category}`);\n    }\n\n    const formattedQuantity = this.roundQty(quantity);\n\n    // Check if the balance already exists\n    let balanceData;\n    try {\n      const balanceQuery = {\n        material_id: materialId,\n        plant_id: plantId,\n      };\n\n      if (locationId) {\n        balanceQuery.location_id = locationId;\n      }\n\n      const balanceResponse = await this.db\n        .collection(collectionName)\n        .where(balanceQuery)\n        .get();\n\n      if (balanceResponse.data && balanceResponse.data.length > 0) {\n        balanceData = balanceResponse.data[0];\n      }\n    } catch (err) {\n      throw new Error(`Failed to fetch receiving balance: ${err.message}`);\n    }\n\n    // If balance exists, update it\n    if (balanceData) {\n      const currentCategoryQty = this.roundQty(balanceData[categoryField] || 0);\n      const currentBalanceQty = this.roundQty(\n        balanceData.balance_quantity || 0\n      );\n\n      const updateData = {\n        [categoryField]: this.roundQty(currentCategoryQty + formattedQuantity),\n        balance_quantity: this.roundQty(currentBalanceQty + formattedQuantity),\n        update_time: new Date().toISOString(),\n      };\n\n      try {\n        await this.db\n          .collection(collectionName)\n          .doc(balanceData.id)\n          .update(updateData);\n\n        return {\n          balanceId: balanceData.id,\n          materialId,\n          quantityAdded: formattedQuantity,\n          ...updateData,\n        };\n      } catch (err) {\n        throw new Error(`Failed to update receiving balance: ${err.message}`);\n      }\n    }\n    // If balance doesn't exist, create a new one\n    else {\n      // Initialize all category fields to 0\n      const newBalanceData = {\n        material_id: materialId,\n        plant_id: plantId,\n        location_id: locationId,\n        balance_quantity: formattedQuantity,\n        unrestricted_qty: 0,\n        qualityinsp_qty: 0,\n        block_qty: 0,\n        reserved_qty: 0,\n        intransit_qty: 0,\n        create_time: new Date().toISOString(),\n        update_time: new Date().toISOString(),\n        organization_id: organizationId,\n      };\n\n      // Set the specific category quantity\n      newBalanceData[categoryField] = formattedQuantity;\n\n      try {\n        const response = await this.db\n          .collection(collectionName)\n          .add(newBalanceData);\n\n        return {\n          balanceId: response.data[0].id,\n          materialId,\n          quantityAdded: formattedQuantity,\n          ...newBalanceData,\n        };\n      } catch (err) {\n        throw new Error(`Failed to create receiving balance: ${err.message}`);\n      }\n    }\n  }\n\n  async recordInventoryMovements(\n    materialId,\n    quantity,\n    sourceCategory,\n    targetCategory,\n    locationId,\n    issuingStockMovementNo,\n    receivingStockMovementNo,\n    issuingPlantId,\n    receivingPlantId,\n    unitPrice,\n    uom,\n    materialData,\n    organizationId\n  ) {\n    const formattedQuantity = this.roundQty(quantity);\n    const formattedUnitPrice = this.roundPrice(unitPrice || 0);\n    const totalPrice = this.roundPrice(formattedUnitPrice * formattedQuantity);\n\n    // Determine batch management\n    const isBatchManaged =\n      materialData.item_batch_management == \"1\" ||\n      materialData.item_isbatch_managed == \"1\";\n    const batchId = isBatchManaged ? materialData.id : null;\n\n    // Use the material's UOM if not specified\n    const itemUom = uom || materialData.based_uom || materialData.uom_id;\n\n    // Create OUT movement from in-transit in issuing plant\n    const issuingMovement = {\n      transaction_type: \"SM\",\n      trx_no: issuingStockMovementNo,\n      movement: \"OUT\",\n      inventory_category: sourceCategory,\n      parent_trx_no: null,\n      unit_price: formattedUnitPrice,\n      total_price: totalPrice,\n      quantity: formattedQuantity,\n      item_id: materialId,\n      uom_id: itemUom,\n      base_qty: formattedQuantity,\n      base_uom_id: itemUom,\n      bin_location_id: locationId,\n      batch_number_id: batchId,\n      costing_method_id: materialData.material_costing_method,\n      organization_id: organizationId,\n      plant_id: issuingPlantId,\n      created_at: new Date(),\n    };\n\n    // Create IN movement to unrestricted in receiving plant\n    const receivingMovement = {\n      transaction_type: \"SM\",\n      trx_no: receivingStockMovementNo,\n      parent_trx_no: null,\n      movement: \"IN\",\n      unit_price: formattedUnitPrice,\n      total_price: totalPrice,\n      quantity: formattedQuantity,\n      item_id: materialId,\n      inventory_category: targetCategory,\n      uom_id: itemUom,\n      base_qty: formattedQuantity,\n      base_uom_id: itemUom,\n      bin_location_id: locationId,\n      batch_number_id: batchId,\n      costing_method_id: materialData.material_costing_method,\n      created_at: new Date(),\n      plant_id: receivingPlantId,\n      organization_id: organizationId,\n    };\n\n    try {\n      const [issuingResult, receivingResult] = await Promise.all([\n        this.db.collection(\"inventory_movement\").add(issuingMovement),\n        this.db.collection(\"inventory_movement\").add(receivingMovement),\n      ]);\n\n      return {\n        issuingMovement: {\n          id: issuingResult.data[0].id,\n          ...issuingMovement,\n        },\n        receivingMovement: {\n          id: receivingResult.data[0].id,\n          ...receivingMovement,\n        },\n      };\n    } catch (err) {\n      throw new Error(`Failed to record inventory movements: ${err.message}`);\n    }\n  }\n\n  async updateCosting(\n    materialData,\n    quantity,\n    issuingPlantId,\n    receivingPlantId,\n    unitPrice,\n    organizationId\n  ) {\n    const results = {\n      issuingCosting: null,\n      receivingCosting: null,\n    };\n\n    const formattedQuantity = this.roundQty(quantity);\n    const formattedUnitPrice = this.roundPrice(unitPrice || 0);\n    const totalValue = this.roundPrice(formattedQuantity * formattedUnitPrice);\n\n    // Handle based on costing method\n    if (materialData.material_costing_method === \"Weighted Average\") {\n      // Process issuing plant (reduce in-transit)\n      try {\n        const waIssuingResponse = await this.db\n          .collection(\"wa_costing_method\")\n          .where({\n            material_id: materialData.id,\n            plant_id: issuingPlantId,\n          })\n          .get();\n\n        if (waIssuingResponse.data && waIssuingResponse.data.length > 0) {\n          const waData = waIssuingResponse.data[0];\n          const currentQuantity = this.roundQty(waData.wa_quantity || 0);\n          const currentCostPrice = this.roundPrice(waData.wa_cost_price || 0);\n\n          // Reduce quantity but maintain cost price in issuing plant\n          // Since we're just reducing in-transit quantity\n          const newQuantity = Math.max(0, currentQuantity - formattedQuantity);\n\n          await this.db\n            .collection(\"wa_costing_method\")\n            .doc(waData.id)\n            .update({\n              wa_quantity: this.roundQty(newQuantity),\n              updated_at: new Date(),\n            });\n\n          results.issuingCosting = {\n            id: waData.id,\n            quantity: this.roundQty(newQuantity),\n            costPrice: this.roundPrice(currentCostPrice),\n          };\n        }\n      } catch (error) {\n        throw new Error(\n          `Failed to update issuing plant WA costing: ${error.message}`\n        );\n      }\n\n      // Process receiving plant (add to unrestricted)\n      try {\n        const waReceivingResponse = await this.db\n          .collection(\"wa_costing_method\")\n          .where({\n            material_id: materialData.id,\n            plant_id: receivingPlantId,\n          })\n          .get();\n\n        if (waReceivingResponse.data && waReceivingResponse.data.length > 0) {\n          // Update existing WA record\n          const waData = waReceivingResponse.data[0];\n          const currentQuantity = this.roundQty(waData.wa_quantity || 0);\n          const currentCostPrice = this.roundPrice(waData.wa_cost_price || 0);\n          const currentValue = this.roundPrice(\n            currentQuantity * currentCostPrice\n          );\n\n          const newQuantity = this.roundQty(\n            currentQuantity + formattedQuantity\n          );\n          const newValue = this.roundPrice(currentValue + totalValue);\n          const newCostPrice = this.roundPrice(newValue / newQuantity);\n\n          await this.db.collection(\"wa_costing_method\").doc(waData.id).update({\n            wa_quantity: newQuantity,\n            wa_cost_price: newCostPrice,\n            updated_at: new Date(),\n          });\n\n          results.receivingCosting = {\n            id: waData.id,\n            quantity: newQuantity,\n            costPrice: newCostPrice,\n          };\n        } else {\n          // Create new WA record\n          const newWaData = {\n            material_id: materialData.id,\n            plant_id: receivingPlantId,\n            wa_quantity: formattedQuantity,\n            wa_cost_price: formattedUnitPrice,\n            organization_id: organizationId,\n            created_at: new Date(),\n            updated_at: new Date(),\n          };\n\n          const response = await this.db\n            .collection(\"wa_costing_method\")\n            .add(newWaData);\n\n          results.receivingCosting = {\n            id: response.data[0].id,\n            ...newWaData,\n          };\n        }\n      } catch (error) {\n        throw new Error(\n          `Failed to update receiving plant WA costing: ${error.message}`\n        );\n      }\n    } else if (materialData.material_costing_method === \"First In First Out\") {\n      // Process issuing plant (reduce in-transit)\n      try {\n        const fifoIssuingResponse = await this.db\n          .collection(\"fifo_costing_history\")\n          .where({\n            material_id: materialData.id,\n            plant_id: issuingPlantId,\n          })\n          .get();\n\n        if (fifoIssuingResponse.data && fifoIssuingResponse.data.length > 0) {\n          // Sort by FIFO sequence\n          const fifoData = fifoIssuingResponse.data.sort(\n            (a, b) => a.fifo_sequence - b.fifo_sequence\n          );\n\n          let remainingQty = formattedQuantity;\n\n          // Process FIFO records until we've covered the full quantity\n          for (const record of fifoData) {\n            if (remainingQty <= 0) break;\n\n            const availableQty = this.roundQty(\n              record.fifo_available_quantity || 0\n            );\n            if (availableQty <= 0) continue;\n\n            const reduceQty = this.roundQty(\n              Math.min(availableQty, remainingQty)\n            );\n            const newAvailable = this.roundQty(availableQty - reduceQty);\n\n            await this.db\n              .collection(\"fifo_costing_history\")\n              .doc(record.id)\n              .update({\n                fifo_available_quantity: newAvailable,\n                updated_at: new Date(),\n              });\n\n            remainingQty = this.roundQty(remainingQty - reduceQty);\n\n            results.issuingCosting = {\n              id: record.id,\n              reducedQuantity: reduceQty,\n              remainingQuantity: newAvailable,\n              costPrice: this.roundPrice(record.fifo_cost_price),\n            };\n          }\n\n          if (remainingQty > 0) {\n            throw new Error(\n              `Insufficient FIFO quantity at issuing plant. Remaining: ${remainingQty}`\n            );\n          }\n        }\n      } catch (error) {\n        throw new Error(\n          `Failed to update issuing plant FIFO costing: ${error.message}`\n        );\n      }\n\n      // Process receiving plant (add new FIFO record)\n      try {\n        const fifoReceivingResponse = await this.db\n          .collection(\"fifo_costing_history\")\n          .where({\n            material_id: materialData.id,\n            plant_id: receivingPlantId,\n          })\n          .get();\n\n        // Determine next sequence number\n        let sequenceNumber = 1;\n        if (\n          fifoReceivingResponse.data &&\n          fifoReceivingResponse.data.length > 0\n        ) {\n          const existingSequences = fifoReceivingResponse.data.map((doc) =>\n            Number(doc.fifo_sequence || 0)\n          );\n          sequenceNumber = Math.max(...existingSequences, 0) + 1;\n        }\n\n        // Create new FIFO record\n        const newFifoData = {\n          material_id: materialData.id,\n          plant_id: receivingPlantId,\n          fifo_sequence: sequenceNumber,\n          fifo_cost_price: formattedUnitPrice,\n          fifo_initial_quantity: formattedQuantity,\n          fifo_available_quantity: formattedQuantity,\n          batch_id:\n            materialData.item_isbatch_managed === \"1\" ? materialData.id : null,\n          organization_id: organizationId,\n          created_at: new Date(),\n          updated_at: new Date(),\n        };\n\n        const response = await this.db\n          .collection(\"fifo_costing_history\")\n          .add(newFifoData);\n\n        results.receivingCosting = {\n          id: response.data[0].id,\n          ...newFifoData,\n        };\n      } catch (error) {\n        throw new Error(\n          `Failed to update receiving plant FIFO costing: ${error.message}`\n        );\n      }\n    } else if (materialData.material_costing_method === \"Fixed Cost\") {\n      // For fixed cost, we don't need to update any costing records\n      // The cost simply follows the material\n      results.issuingCosting = {\n        message:\n          \"Fixed cost method - no costing records updated for issuing plant\",\n      };\n\n      results.receivingCosting = {\n        message:\n          \"Fixed cost method - no costing records updated for receiving plant\",\n      };\n    } else {\n      throw new Error(\n        `Unsupported costing method: ${materialData.material_costing_method}`\n      );\n    }\n\n    return results;\n  }\n}\n\nasync function processFormData(db, self, organizationId) {\n  const processor = new ReceivingIOFTProcessor(db);\n  const closeDialog = () => {\n    if (self.parentGenerateForm) {\n      self.parentGenerateForm.$refs.SuPageDialogRef.hide();\n      self.parentGenerateForm.refresh();\n      self.hideLoading();\n    }\n  };\n\n  try {\n    const results = await processor.processReceivingIOFT(\n      db,\n      self,\n      organizationId\n    );\n    closeDialog();\n    console.log(\"IOFT receipt processed:\", results);\n    return results;\n  } catch (error) {\n    console.error(\"Error processing IOFT receipt:\", error.message);\n    throw error; // Error already displayed in processReceivingIOFT\n  }\n}\n\nconst self = this;\nthis.showLoading();\n\nlet organizationId = this.getVarGlobal(\"deptParentId\");\nconsole.log(\"organization id\", organizationId);\nif (organizationId === \"0\") {\n  organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n}\n\nprocessFormData(db, self, organizationId)\n  .then((results) => console.log(\"Success:\", results))\n  .catch((error) => console.error(\"Error:\", error.message));\n"
            }
          }
        ]
      },
      {
        "key": "2wtacbjy",
        "name": "onClick_draft",
        "func": "const closeDialog = () => {\n  if (this.parentGenerateForm) {\n    this.parentGenerateForm.$refs.SuPageDialogRef.hide();\n    this.parentGenerateForm.refresh();\n    this.hideLoading();\n  }\n};\n\nthis.showLoading();\nlet movementType = this.getValue(\"movement_type\") || \"\";\n\nconst data = this.getValues();\nconst page_status = data.page_status;\nconst stockMovementId = data.id;\nconst requiredFields = [{ name: \"issuing_operation_faci\", label: \"Plant\" }];\n\nconst missingFields = requiredFields.filter((field) => {\n  const value = data[field.name];\n\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  } else if (typeof value === \"string\") {\n    return value.trim() === \"\";\n  } else {\n    return !value;\n  }\n});\n\nif (missingFields.length === 0) {\n  let organizationId = this.getVarGlobal(\"deptParentId\");\n  if (organizationId === \"0\") {\n    organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n  }\n\n  const {\n    issue_date,\n    stock_movement_no,\n    movement_type,\n    movement_type_id,\n    movement_reason,\n    issued_by,\n    issuing_operation_faci,\n    remarks,\n    delivery_method,\n    reference_documents,\n    receiving_operation_faci,\n    movement_id,\n    is_production_order,\n    production_order_id,\n    driver_name,\n    driver_contact_no,\n    vehicle_no,\n    pickup_date,\n    courier_company,\n    shipping_date,\n    freight_charges,\n    tracking_number,\n    est_arrival_date,\n    delivery_cost,\n    est_delivery_date,\n    shipping_company,\n    date_qn0dl3t6,\n    input_77h4nsq8,\n    shipping_method,\n    tracking_no,\n    stock_movement,\n    balance_index,\n    sm_item_balance,\n    table_item_balance,\n    material_id,\n    material_name,\n    row_index,\n  } = data;\n\n  const entry = {\n    stock_movement_status: \"Draft\",\n    organization_id: organizationId,\n    posted_status: \"Unposted\",\n    issue_date,\n    stock_movement_no,\n    movement_type,\n    movement_type_id,\n    movement_reason,\n    issued_by,\n    issuing_operation_faci,\n    remarks,\n    delivery_method,\n    reference_documents,\n    receiving_operation_faci,\n    movement_id,\n    is_production_order,\n    production_order_id,\n    driver_name,\n    driver_contact_no,\n    vehicle_no,\n    pickup_date,\n    courier_company,\n    shipping_date,\n    freight_charges,\n    tracking_number,\n    est_arrival_date,\n    delivery_cost,\n    est_delivery_date,\n    shipping_company,\n    date_qn0dl3t6,\n    input_77h4nsq8,\n    shipping_method,\n    tracking_no,\n    stock_movement,\n    balance_index,\n    sm_item_balance,\n    table_item_balance,\n    material_id,\n    material_name,\n    row_index,\n  };\n\n  if (page_status === \"Add\") {\n    db.collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Stock Movement\",\n        movement_type: movementType,\n        is_deleted: 0,\n        organization_id: organizationId,\n        is_active: 1,\n      })\n      .get()\n      .then((prefixEntry) => {\n        if (!prefixEntry.data || prefixEntry.data.length === 0) {\n          return;\n        } else {\n          const currDraftNum = parseInt(prefixEntry.data[0].draft_number) + 1;\n          const newPrefix =\n            \"DRAFT-\" + prefixEntry.data[0].prefix_value + \"-\" + currDraftNum;\n          entry.stock_movement_no = newPrefix;\n\n          return db\n            .collection(\"prefix_configuration\")\n            .where({\n              document_types: \"Stock Movement\",\n              movement_type: movementType,\n              organization_id: organizationId,\n            })\n            .update({ draft_number: currDraftNum });\n        }\n      })\n      .then(() => {\n        return db.collection(\"stock_movement\").add(entry);\n      })\n      .then(() => {\n        closeDialog();\n      })\n      .catch((error) => {\n        this.$message.error(error);\n      });\n  } else if (page_status === \"Edit\") {\n    db.collection(\"stock_movement\")\n      .doc(stockMovementId)\n      .update(entry)\n      .then(() => {\n        closeDialog();\n      })\n      .catch((error) => {\n        this.$message.error(error);\n      });\n  }\n} else {\n  this.hideLoading();\n  const missingFieldNames = missingFields.map((f) => f.label).join(\", \");\n  this.$message.error(`Missing required fields: ${missingFieldNames}`);\n}\n",
        "type": "js"
      },
      {
        "key": "08m3vs4e",
        "name": "onClick_received_quantity",
        "func": "const allData = this.getValues();\nconst lineItemData = arguments[0]?.row;\n\n\n// Function to fetch and update item data\nconst calculateTotalAmount = async () => {\n  try {\n     \n    const total_amount  = allData.stock_movement.received_quantity * allData.stock_movement.unit_price;\n\n    console.log(\"THIS IS THE TOTAL AMOUNT\", total_amount);\n    // Update the data with fetched item information\n    this.setData({\n      [`stock_movement.amount`]: total_amount,\n    });\n\n  } catch (error) {\n    console.error(\"Error calculating data:\", error);\n  }\n};\n\n// Execute the function\ncalculateTotalAmount();",
        "type": "js"
      },
      {
        "key": "27cag30p",
        "name": "onChange_27cag30p",
        "func": "const allData = this.getValues();\n\n// Function to fetch and update item data\nconst calculateTotalAmount = async () => {\n  try {\n    // Check if stock_movement exists and is an array\n    if (Array.isArray(allData.stock_movement)) {\n      // Map through each stock movement item to calculate amounts\n      const updatedStockMovements = allData.stock_movement.map(item => {\n        const total_amount = (item.received_quantity || 0) * (item.unit_price || 0);  \n        return {\n          ...item,\n          amount: total_amount\n        };\n      });\n\n      // Update the data with all calculated amounts\n      this.setData({\n        'stock_movement': updatedStockMovements\n      });\n    } else {\n      // Handle single item case as fallback\n      const total_amount = (allData.stock_movement?.received_quantity || 0) * \n                         (allData.stock_movement?.unit_price || 0);\n\n\n      \n      this.setData({\n        [`stock_movement.amount`]: total_amount,\n      });\n    }\n\n  } catch (error) {\n    console.error(\"Error calculating data:\", error);\n  }\n};\n\n// Execute the function\ncalculateTotalAmount();",
        "type": "js"
      },
      {
        "key": "qkhz7mo9",
        "name": "onChange_unit_price",
        "func": "const allData = this.getValues();\n\n// Function to fetch and update item data\nconst calculateTotalAmount = async () => {\n  try {\n    // Check if stock_movement exists and is an array\n    if (Array.isArray(allData.stock_movement)) {\n      // Map through each stock movement item to calculate amounts\n      const updatedStockMovements = allData.stock_movement.map(item => {\n        let total_amount = (item.received_quantity || 0) * (item.unit_price || 0);  \n        total_amount = parseFloat(parseFloat(total_amount || 0).toFixed(4));\n        return {\n          ...item,\n          amount: total_amount\n        };\n      });\n\n      // Update the data with all calculated amounts\n      this.setData({\n        'stock_movement': updatedStockMovements\n      });\n    } else {\n      // Handle single item case as fallback\n      let  total_amount = (allData.stock_movement?.received_quantity || 0) * \n                         (allData.stock_movement?.unit_price || 0);\n\n\n      total_amount = parseFloat(parseFloat(total_amount || 0).toFixed(4));\n      this.setData({\n        [`stock_movement.amount`]: total_amount,\n      });\n    }\n\n  } catch (error) {\n    console.error(\"Error calculating data:\", error);\n  }\n};\n\n// Execute the function\ncalculateTotalAmount();",
        "type": "js"
      },
      {
        "key": "8bwr5eml",
        "name": "onClick_view",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "sqw96v6r",
            "action": "openDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "sm_item_balance"
            }
          },
          {
            "key": "eezepxgg",
            "action": "js",
            "options": {
              "func": "const allData = this.getValues(); // Fetch form/state data\nconst lineItemData = arguments[0]?.row; // Row data from arguments (e.g., table row)\nconst rowIndex = arguments[0]?.rowIndex; // Row index from arguments\nconst movement_type = allData.movement_type; // Movement type ID\nconst materialId = lineItemData.item_selection; // Material ID from selection\nconst tempQtyData = lineItemData.temp_qty_data; // Temporary quantity data (unused here but included)\n\nconsole.log(\"movement_type\", movement_type);\nconsole.log(\"materialId\", materialId);\n\n// Step 1: Fetch movement type details\ndb.collection(\"stock_movement_type\")\n  .where({\n    id: movement_type,\n  })\n  .get()\n  .then((result) => {\n    if (!result.data || result.data.length === 0) {\n      console.error(\"No movement type found for ID:\", movement_type);\n      return;\n    }\n\n    console.log(\"movement type\", result.data[0].sm_type_name);\n    const movementTypeName = result.data[0].sm_type_name;\n\n    // Show/hide and disable category columns based on movement type\n    if (movementTypeName === \"Inventory Category Transfer Posting\") {\n      this.display(\"sm_item_balance.table_item_balance.category_from\");\n      this.disabled(\"sm_item_balance.table_item_balance.category_from\");\n      this.display(\"sm_item_balance.table_item_balance.category_to\");\n      this.disabled(\"sm_item_balance.table_item_balance.category_to\");\n      this.hide(\"sm_item_balance.table_item_balance.category\");\n    } else {\n      this.hide(\"sm_item_balance.table_item_balance.category_from\");\n      this.hide(\"sm_item_balance.table_item_balance.category_to\");\n      this.display(\"sm_item_balance.table_item_balance.category\");\n    }\n\n    // Step 2: Fetch item data\n    db.collection(\"Item\")\n      .where({\n        id: materialId,\n      })\n      .get()\n      .then((response) => {\n        if (!response.data || response.data.length === 0) {\n          console.error(\"No item found for material ID:\", materialId);\n          return;\n        }\n\n        console.log(\"response item\", response);\n        const itemData = response.data[0]; // itemData is defined here\n        console.log(\"itemData\", itemData);\n\n        // Set item data and disable fields\n        this.setData({\n          [`sm_item_balance.material_id`]: itemData.material_code,\n          [`sm_item_balance.material_name`]: itemData.material_name,\n          [`sm_item_balance.row_index`]: rowIndex,\n        });\n        this.disabled(\"sm_item_balance.material_id\");\n        this.disabled(\"sm_item_balance.material_name\");\n        this.disabled(\"sm_item_balance.row_index\");\n\n        // Step 3: Handle batch vs. non-batch logic\n        if (itemData.item_batch_management == 1) {\n          // Batch-managed item\n          this.display(\"sm_item_balance.table_item_balance.batch_id\");\n          this.disabled(\"sm_item_balance.table_item_balance.batch_id\");\n\n          db.collection(\"item_batch_balance\")\n            .where({\n              material_id: materialId,\n            })\n            .get()\n            .then((response) => {\n              console.log(\"response item_batch_balance\", response.data);\n              const itemBalanceData = response.data || [];\n\n              const mappedData = Array.isArray(itemBalanceData)\n                ? itemBalanceData.map(item => ({ ...item, balance_id: item.id }))\n                : itemBalanceData.id ? [{ ...itemBalanceData, balance_id: itemBalanceData.id }] : [];\n\n              console.log(\"mappedData (batch)\", mappedData);\n\n              if (allData.balance_index && Array.isArray(allData.balance_index)) {\n                const filteredBalanceIndex = allData.balance_index.filter(balanceItem =>\n                  mappedData.some(item => item.balance_id === balanceItem.balance_id)\n                );\n\n                console.log(\"filteredBalanceIndex (batch)\", filteredBalanceIndex);\n\n                this.setData({\n                  [`sm_item_balance.table_item_balance`]: filteredBalanceIndex,\n                });\n              } else {\n                this.setData({\n                  [`sm_item_balance.table_item_balance`]: mappedData,\n                });\n              }\n            })\n            .catch((error) => {\n              console.error(\"Error fetching item batch balance data:\", error);\n            });\n        } else {\n          // Non-batch-managed item\n          this.hide(\"sm_item_balance.table_item_balance.batch_id\");\n\n          db.collection(\"item_balance\")\n            .where({\n              material_id: materialId,\n            })\n            .get()\n            .then((response) => {\n              console.log(\"response item_balance\", response.data);\n              const itemBalanceData = response.data || [];\n\n              const mappedData = Array.isArray(itemBalanceData)\n                ? itemBalanceData.map(item => ({ ...item, balance_id: item.id }))\n                : itemBalanceData.id ? [{ ...itemBalanceData, balance_id: itemBalanceData.id }] : [];\n\n              console.log(\"mappedData (non-batch)\", mappedData);\n\n              if (allData.balance_index && Array.isArray(allData.balance_index)) {\n                const filteredBalanceIndex = allData.balance_index.filter(balanceItem =>\n                  mappedData.some(item => item.balance_id === balanceItem.balance_id)\n                );\n\n                console.log(\"filteredBalanceIndex (non-batch)\", filteredBalanceIndex);\n\n                this.setData({\n                  [`sm_item_balance.table_item_balance`]: filteredBalanceIndex,\n                  [`sm_item_balance.table_item_balance.unit_price`]: itemData.purchase_unit_price, // Now in scope\n                });\n                this.disabled([`sm_item_balance.table_item_balance`], true);\n                this.disabled(\"sm_item_balance.table_item_balance.unit_price\", true);\n              } else {\n                this.setData({\n                  [`sm_item_balance.table_item_balance`]: mappedData,\n                });\n              }\n            })\n            .catch((error) => {\n              console.error(\"Error fetching item balance data:\", error);\n            });\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error fetching item data:\", error);\n      });\n  })\n  .catch((error) => {\n    console.error(\"Error fetching movement type:\", error);\n  });"
            }
          }
        ]
      },
      {
        "key": "ide756fa",
        "name": "onClick_issueIFT",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "yu3berpj",
            "action": "js",
            "options": {
              "func": "class StockAdjuster {\n  constructor(db) {\n    this.db = db;\n    this.categoryMap = {\n      Unrestricted: \"unrestricted_qty\",\n      \"Quality Inspection\": \"qualityinsp_qty\",\n      Blocked: \"block_qty\",\n      Reserved: \"reserved_qty\",\n      \"In Transit\": \"intransit_qty\",\n    };\n  }\n\n  // Helper functions for consistent decimal formatting\n  roundQty(value) {\n    return Number(Number(value).toFixed(3));\n  }\n\n  roundPrice(value) {\n    return Number(Number(value).toFixed(4));\n  }\n\n  validateRequiredFields(data, requiredFields, context = \"\") {\n    const missingFields = requiredFields.filter(\n      (field) => !data[field] && data[field] !== 0\n    );\n    if (missingFields.length > 0) {\n      return `Please fill in all required fields marked with (*) ${context}: ${missingFields.join(\n        \", \"\n      )}`;\n    }\n    return null;\n  }\n\n  async processStockAdjustment(db, self, organizationId) {\n    const errors = [];\n    const allData = self.getValues();\n\n    // Step 1: Validate top-level required fields\n    const requiredTopLevelFields = [\n      \"issuing_operation_faci\",\n      \"receiving_operation_faci\",\n      \"stock_movement_no\",\n      \"movement_type\",\n      \"issue_date\",\n    ];\n    const topLevelValidationError = this.validateRequiredFields(\n      allData,\n      requiredTopLevelFields\n    );\n    if (topLevelValidationError) {\n      errors.push(topLevelValidationError);\n    }\n\n    const stockMovementId = allData.id;\n    const stockMovementIssuingPlantId = allData.issuing_operation_faci;\n    const stockMovementReceivingPlantId = allData.receiving_operation_faci;\n    const stockMovementNumber = allData.stock_movement_no;\n    // Step 3: Validate stock movement items\n    let processedItems = [];\n    if (allData.stock_movement && allData.stock_movement.length > 0) {\n      const itemValidationErrors = await this.validateStockMovementItems(\n        allData\n      );\n      errors.push(...itemValidationErrors);\n      processedItems = this.processStockMovementItems(allData);\n    } else {\n      errors.push(\"Stock movement items are required\");\n    }\n\n    // Step 4: Display errors if any\n    if (errors.length > 0) {\n      const errorMessage = errors.join(\"\\n\");\n      if (self && self.parentGenerateForm) {\n        await self.parentGenerateForm.$alert(\n          errorMessage,\n          \"Validation Errors\",\n          {\n            confirmButtonText: \"OK\",\n            type: \"error\",\n          }\n        );\n      } else {\n        alert(errorMessage);\n      }\n      throw new Error(\"Validation failed with multiple errors\");\n    }\n\n    // Step 5: Show confirmation popup before proceeding\n    return new Promise((resolve, reject) => {\n      if (self && self.parentGenerateForm) {\n        self.parentGenerateForm\n          .$confirm(\n            \"All validations passed. Proceed with processing the stock movement?\",\n            \"Confirm Stock Movement\",\n            {\n              confirmButtonText: \"Proceed\",\n              cancelButtonText: \"Cancel\",\n              type: \"success\",\n            }\n          )\n          .then(async () => {\n            try {\n              const updateResults = await this.updateRelatedTables(\n                stockMovementId,\n                processedItems,\n                stockMovementIssuingPlantId,\n                stockMovementReceivingPlantId,\n                stockMovementNumber,\n                allData,\n                self,\n                organizationId\n              );\n              resolve({\n                ...updateResults,\n              });\n            } catch (err) {\n              const processingErrors = [err.message];\n              const errorMessage = processingErrors.join(\"\\n\");\n              if (self && self.parentGenerateForm) {\n                await self.parentGenerateForm.$alert(\n                  errorMessage,\n                  \"Processing Errors\",\n                  {\n                    confirmButtonText: \"OK\",\n                    type: \"error\",\n                  }\n                );\n              } else {\n                alert(errorMessage);\n              }\n              reject(new Error(\"Processing failed with errors\"));\n            }\n          })\n          .catch(() => {\n            reject(new Error(\"Stock movement cancelled by user\"));\n          });\n      } else {\n        console.warn(\"No context provided, proceeding without confirmation\");\n        this.updateRelatedTables(\n          processedItems,\n          stockMovementIssuingPlantId,\n          stockMovementReceivingPlantId,\n          stockMovementNumber,\n          allData,\n          self,\n          organizationId\n        )\n          .then((updateResults) => {\n            resolve({\n              ...updateResults,\n            });\n          })\n          .catch((err) => {\n            const errorMessage = `Processing failed: ${err.message}`;\n            alert(errorMessage);\n            reject(new Error(\"Processing failed with errors\"));\n          });\n      }\n    });\n  }\n\n  async validateStockMovementItems(allData) {\n    const errors = [];\n    for (const stockItem of allData.stock_movement) {\n      const requiredFields = [\"item_selection\", \"total_quantity\"];\n      const itemValidationError = this.validateRequiredFields(\n        stockItem,\n        requiredFields,\n        `for item ${stockItem.item_selection || \"unknown\"}`\n      );\n      if (itemValidationError) {\n        errors.push(itemValidationError);\n        continue;\n      }\n\n      // Fetch material data and validate\n      try {\n        const materialResponse = await this.db\n          .collection(\"Item\")\n          .where({ id: stockItem.item_selection })\n          .get();\n        const materialData = materialResponse.data[0];\n        if (!materialData) {\n          errors.push(`Material not found for ID: ${stockItem.item_selection}`);\n          continue;\n        }\n        if (!materialData.id) {\n          errors.push(\n            `Invalid material data: material_id is missing for item ${stockItem.item_selection}`\n          );\n          continue;\n        }\n        if (!materialData.material_costing_method) {\n          errors.push(\n            `Material costing method is not defined for item ${stockItem.item_selection}`\n          );\n          continue;\n        }\n        if (!allData.issuing_operation_faci) {\n          errors.push(\n            `Plant ID is required for costing update for item ${stockItem.item_selection}`\n          );\n          continue;\n        }\n      } catch (error) {\n        errors.push(\n          `Failed to fetch material data for item ${stockItem.item_selection}: ${error.message}`\n        );\n        continue;\n      }\n\n      // Validate balances\n      const relatedBalances = allData.balance_index.filter(\n        (balance) => balance.material_id === stockItem.item_selection\n      );\n      if (!relatedBalances.length) {\n        errors.push(`No balances found for item ${stockItem.item_selection}`);\n        continue;\n      }\n\n      for (const balance of relatedBalances) {\n        const balanceRequiredFields = [\"material_id\"];\n        const balanceValidationError = this.validateRequiredFields(\n          balance,\n          balanceRequiredFields,\n          `for balance of item ${stockItem.item_selection}`\n        );\n        if (balanceValidationError) {\n          errors.push(balanceValidationError);\n          continue;\n        }\n\n        // Validate intransit quantity\n        try {\n          const materialResponse = await this.db\n            .collection(\"Item\")\n            .where({ id: balance.material_id })\n            .get();\n          const materialData = materialResponse.data[0];\n\n          // Standardize batch management check\n          const isBatchManaged =\n            materialData.item_batch_management == \"1\" ||\n            materialData.item_isbatch_managed == \"1\";\n          const collectionName = isBatchManaged\n            ? \"item_batch_balance\"\n            : \"item_balance\";\n\n          const balanceResponse = await this.db\n            .collection(collectionName)\n            .where({ id: balance.balance_id })\n            .get();\n          const balanceData = balanceResponse.data[0];\n          if (!balanceData) {\n            errors.push(`Balance not found for ID: ${balance.balance_id}`);\n            continue;\n          }\n          if ((balanceData.intransit_qty || 0) < stockItem.received_quantity) {\n            errors.push(\n              `Insufficient intransit quantity for item ${\n                stockItem.item_selection\n              }. Available: ${balanceData.intransit_qty || 0}, Requested: ${\n                stockItem.received_quantity\n              }`\n            );\n          }\n        } catch (error) {\n          errors.push(\n            `Failed to validate balance for item ${stockItem.item_selection}: ${error.message}`\n          );\n        }\n      }\n    }\n    return errors;\n  }\n\n  processStockMovementItems(allData) {\n    const processedItems = [];\n\n    allData.stock_movement.forEach((stockItem) => {\n      const itemDetails = {\n        item_selection: stockItem.item_selection,\n        total_quantity: stockItem.total_quantity,\n      };\n\n      const relatedBalances = allData.balance_index\n        .filter((balance) => balance.material_id === stockItem.item_selection)\n        .map((balance) => ({\n          material_id: balance.material_id,\n          balance_id: balance.balance_id,\n          batch_id: balance.batch_id,\n          category: balance.category,\n          location_id: balance.location_id,\n          sm_quantity: balance.sm_quantity,\n        }));\n\n      processedItems.push({\n        itemDetails,\n        balances: relatedBalances,\n      });\n    });\n    console.log(\"processedItems\", processedItems);\n    return processedItems;\n  }\n\n  async updateRelatedTables(\n    stockMovementId,\n    processedItems,\n    stockMovementIssuingPlantId,\n    stockMovementReceivingPlantId,\n    stockMovementNumber,\n    allData,\n    self,\n    organizationId\n  ) {\n    const results = {\n      balanceUpdates: [],\n      inventoryMovements: [],\n      costingUpdates: [],\n      stockMovementUpdates: {\n        issuing: null,\n        receiving: null,\n      },\n    };\n    const errors = [];\n\n    for (const item of processedItems) {\n      const { itemDetails, balances } = item;\n\n      for (const balance of balances) {\n        try {\n          const issuingBalanceUpdate = await this.updateIssuingBalance(\n            balance.balance_id,\n            balance.material_id,\n            balance.sm_quantity,\n            balance.category\n          );\n          results.balanceUpdates.push({ issuing: issuingBalanceUpdate });\n        } catch (err) {\n          errors.push(\n            `Failed to update issuing balance for item ${balance.material_id}: ${err.message}`\n          );\n          continue;\n        }\n\n        try {\n          const inventoryMovement = await this.recordInventoryMovement(\n            balance.material_id,\n            balance.sm_quantity,\n            balance.category,\n            balance.location_id,\n            stockMovementIssuingPlantId,\n            stockMovementReceivingPlantId,\n            stockMovementNumber,\n            balance.batch_id,\n            organizationId\n          );\n          results.inventoryMovements.push(inventoryMovement);\n        } catch (err) {\n          errors.push(\n            `Failed to record inventory movement for item ${balance.material_id}: ${err.message}`\n          );\n          continue;\n        }\n      }\n    }\n\n    try {\n      const issuingStockMovementResponse = await this.db\n        .collection(\"stock_movement\")\n        .where({ id: stockMovementId })\n        .get();\n      const issuingStockMovement = issuingStockMovementResponse.data[0];\n\n      if (issuingStockMovement) {\n        const updateData = {\n          stock_movement_status: \"In Progress\",\n          update_time: new Date().toISOString(),\n        };\n\n        console.log(\"Update data:\", updateData);\n\n        await this.db\n          .collection(\"stock_movement\")\n          .doc(issuingStockMovement.id)\n          .update(updateData);\n\n        console.log(\"Update operation completed\");\n\n        await new Promise((resolve) => setTimeout(resolve, 500));\n\n        const updatedResponse = await this.db\n          .collection(\"stock_movement\")\n          .doc(issuingStockMovement.id)\n          .get();\n\n        if (!updatedResponse.data || !Array.isArray(updatedResponse.data)) {\n          console.log(\"Updated document response format:\", updatedResponse);\n\n          results.stockMovementUpdates.issuing =\n            updatedResponse.data || updatedResponse;\n        } else {\n          results.stockMovementUpdates.issuing = updatedResponse.data[0];\n        }\n\n        // Verify the update went through\n        console.log(\n          \"Updated document data:\",\n          results.stockMovementUpdates.issuing\n        );\n      } else {\n        errors.push(\n          `Issuing stock movement not found for stock_movement_no: ${stockMovementNumber}`\n        );\n      }\n    } catch (err) {\n      console.error(\"Detailed error:\", err);\n      errors.push(`Failed to update issuing stock movement: ${err.message}`);\n    }\n\n    if (results.stockMovementUpdates.issuing) {\n      try {\n        const receivingIOFT = await this.createReceivingIOFT(\n          stockMovementReceivingPlantId,\n          allData,\n          stockMovementId,\n          self,\n          organizationId\n        );\n        results.receivingIOFT = receivingIOFT.data[0];\n      } catch (err) {\n        errors.push(`Failed to create receiving IOFT: ${err.message}`);\n      }\n    }\n\n    if (errors.length > 0) {\n      throw new Error(errors.join(\"; \"));\n    }\n\n    return results;\n  }\n\n  async updateIssuingBalance(balanceId, materialId, smQuantity, category) {\n    let materialData;\n    try {\n      const materialResponse = await this.db\n        .collection(\"Item\")\n        .where({ id: materialId })\n        .get();\n      materialData = materialResponse.data[0];\n      if (!materialData) {\n        throw new Error(`Material not found for ID: ${materialId}`);\n      }\n    } catch (err) {\n      throw new Error(`Failed to fetch material: ${err.message}`);\n    }\n\n    // Standardize batch management check\n    const isBatchManaged =\n      materialData.item_batch_management == \"1\" ||\n      materialData.item_isbatch_managed == \"1\";\n    const collectionName = isBatchManaged\n      ? \"item_batch_balance\"\n      : \"item_balance\";\n\n    let balanceData;\n    try {\n      const balanceResponse = await this.db\n        .collection(collectionName)\n        .where({ id: balanceId })\n        .get();\n      balanceData = balanceResponse.data[0];\n      if (!balanceData) {\n        throw new Error(`Balance not found for ID: ${balanceId}`);\n      }\n    } catch (err) {\n      throw new Error(`Failed to fetch balance: ${err.message}`);\n    }\n\n    const formattedSmQuantity = this.roundQty(smQuantity);\n\n    const categoryField = this.categoryMap[category];\n\n    const updateData = {\n      [categoryField]: this.roundQty(\n        (balanceData[categoryField] || 0) - formattedSmQuantity\n      ),\n      intransit_qty: this.roundQty(\n        (balanceData.intransit_qty || 0) + formattedSmQuantity\n      ),\n      balance_quantity: this.roundQty(balanceData.balance_quantity),\n      update_time: new Date().toISOString(),\n    };\n\n    try {\n      await this.db\n        .collection(collectionName)\n        .doc(balanceId)\n        .update(updateData);\n    } catch (err) {\n      throw new Error(`Failed to update issuing balance: ${err.message}`);\n    }\n\n    return { balanceId, ...updateData };\n  }\n\n  // Function to get latest FIFO cost price with available quantity check\n  async getLatestFIFOCostPrice(materialData, batchId) {\n    try {\n      const query =\n        materialData.item_batch_management == \"1\" && batchId\n          ? this.db\n              .collection(\"fifo_costing_history\")\n              .where({ material_id: materialData.id, batch_id: batchId })\n          : this.db\n              .collection(\"fifo_costing_history\")\n              .where({ material_id: materialData.id });\n\n      const response = await query.get();\n      const result = response.data;\n\n      if (result && Array.isArray(result) && result.length > 0) {\n        // Sort by FIFO sequence (lowest/oldest first, as per FIFO principle)\n        const sortedRecords = result.sort(\n          (a, b) => a.fifo_sequence - b.fifo_sequence\n        );\n\n        // First look for records with available quantity\n        for (const record of sortedRecords) {\n          const availableQty = this.roundQty(\n            record.fifo_available_quantity || 0\n          );\n          if (availableQty > 0) {\n            console.log(\n              `Found FIFO record with available quantity: Sequence ${record.fifo_sequence}, Cost price ${record.fifo_cost_price}`\n            );\n            return this.roundPrice(record.fifo_cost_price || 0);\n          }\n        }\n\n        // If no records with available quantity, use the most recent record\n        console.warn(\n          `No FIFO records with available quantity found for ${materialData.id}, using most recent cost price`\n        );\n        return this.roundPrice(\n          sortedRecords[sortedRecords.length - 1].fifo_cost_price || 0\n        );\n      }\n\n      console.warn(`No FIFO records found for material ${materialData.id}`);\n      return 0;\n    } catch (error) {\n      console.error(\n        `Error retrieving FIFO cost price for ${materialData.id}:`,\n        error\n      );\n      return 0;\n    }\n  }\n\n  // Function to get Weighted Average cost price\n  async getWeightedAverageCostPrice(materialData, batchId) {\n    try {\n      const query =\n        materialData.item_batch_management == \"1\" && batchId\n          ? this.db\n              .collection(\"wa_costing_method\")\n              .where({ material_id: materialData.id, batch_id: batchId })\n          : this.db\n              .collection(\"wa_costing_method\")\n              .where({ material_id: materialData.id });\n\n      const response = await query.get();\n      const waData = response.data;\n\n      if (waData && Array.isArray(waData) && waData.length > 0) {\n        // Sort by date (newest first) to get the latest record\n        waData.sort((a, b) => {\n          if (a.created_at && b.created_at) {\n            return new Date(b.created_at) - new Date(a.created_at);\n          }\n          return 0;\n        });\n\n        return this.roundPrice(waData[0].wa_cost_price || 0);\n      }\n\n      console.warn(\n        `No weighted average records found for material ${materialData.id}`\n      );\n      return 0;\n    } catch (error) {\n      console.error(\n        `Error retrieving WA cost price for ${materialData.id}:`,\n        error\n      );\n      return 0;\n    }\n  }\n\n  async getFixedCostPrice(materialId) {\n    const query = this.db.collection(\"Item\").where({ id: materialId });\n    const response = await query.get();\n    const result = response.data;\n    return this.roundPrice(result[0].purchase_unit_price || 0);\n  }\n\n  async recordInventoryMovement(\n    materialId,\n    smQuantity,\n    category,\n    locationId,\n    stockMovementIssuingPlantId,\n    stockMovementReceivingPlantId,\n    stockMovementNumber,\n    batchId,\n    organizationId\n  ) {\n    let materialData;\n    try {\n      const materialResponse = await this.db\n        .collection(\"Item\")\n        .where({ id: materialId })\n        .get();\n      materialData = materialResponse.data[0];\n      if (!materialData) {\n        throw new Error(`Material not found for ID: ${materialId}`);\n      }\n    } catch (err) {\n      throw new Error(`Failed to fetch material: ${err.message}`);\n    }\n\n    // Standardize batch management check\n    const isBatchManaged =\n      materialData.item_batch_management == \"1\" ||\n      materialData.item_isbatch_managed == \"1\";\n\n    let unitPrice;\n\n    if (materialData.material_costing_method === \"First In First Out\") {\n      // Get unit price from latest FIFO sequence\n      const fifoCostPrice = await this.getLatestFIFOCostPrice(\n        materialData,\n        batchId\n      );\n      unitPrice = fifoCostPrice;\n    } else if (materialData.material_costing_method === \"Weighted Average\") {\n      // Get unit price from WA cost price\n      const waCostPrice = await this.getWeightedAverageCostPrice(\n        materialData,\n        batchId\n      );\n      unitPrice = waCostPrice;\n    } else if (materialData.material_costing_method === \"Fixed Cost\") {\n      // Get unit price from Fixed Cost\n      const fixedCostPrice = await this.getFixedCostPrice(materialData.id);\n      unitPrice = fixedCostPrice;\n    } else {\n      return Promise.resolve();\n    }\n\n    const formattedSmQuantity = this.roundQty(smQuantity);\n    const formattedUnitPrice = this.roundPrice(unitPrice || 0);\n\n    const outMovement = {\n      transaction_type: \"SM\",\n      trx_no: stockMovementNumber,\n      movement: \"OUT\",\n      inventory_category: category,\n      parent_trx_no: null,\n      unit_price: formattedUnitPrice,\n      total_price: this.roundPrice(formattedUnitPrice * formattedSmQuantity),\n      quantity: formattedSmQuantity,\n      item_id: materialId,\n      uom_id: materialData.based_uom,\n      base_qty: formattedSmQuantity,\n      base_uom_id: materialData.based_uom,\n      bin_location_id: locationId,\n      batch_number_id: isBatchManaged ? batchId : null,\n      costing_method_id: materialData.material_costing_method,\n      organization_id: organizationId,\n      plant_id: stockMovementIssuingPlantId,\n      created_at: new Date(),\n    };\n\n    const inMovement = {\n      transaction_type: \"SM\",\n      trx_no: stockMovementNumber,\n      parent_trx_no: null,\n      movement: \"IN\",\n      unit_price: formattedUnitPrice,\n      total_price: this.roundPrice(formattedUnitPrice * formattedSmQuantity),\n      quantity: formattedSmQuantity,\n      item_id: materialId,\n      inventory_category: \"In Transit\",\n      uom_id: materialData.based_uom,\n      base_qty: formattedSmQuantity,\n      base_uom_id: materialData.based_uom,\n      bin_location_id: locationId,\n      batch_number_id: isBatchManaged ? batchId : null,\n      costing_method_id: materialData.material_costing_method,\n      created_at: new Date(),\n      plant_id: stockMovementReceivingPlantId,\n      organization_id: organizationId,\n    };\n\n    try {\n      const [outResult, inResult] = await Promise.all([\n        this.db.collection(\"inventory_movement\").add(outMovement),\n        this.db.collection(\"inventory_movement\").add(inMovement),\n      ]);\n      return {\n        out: outResult.data[0],\n        in: inResult.data[0],\n      };\n    } catch (err) {\n      throw new Error(`Failed to record inventory movement: ${err.message}`);\n    }\n  }\n\n  async createReceivingIOFT(\n    receivingPlantId,\n    allData,\n    stockMovementId,\n    self,\n    organizationId\n  ) {\n    try {\n      let movementType = allData.movement_type || \"\";\n\n      const prefixResponse = await this.db\n        .collection(\"prefix_configuration\")\n        .where({\n          document_types: \"Stock Movement\",\n          movement_type: movementType,\n          is_deleted: 0,\n          organization_id: organizationId,\n          is_active: 1,\n        })\n        .get();\n\n      if (!prefixResponse.data || prefixResponse.data.length === 0) {\n        throw new Error(\"No prefix configuration found\");\n      }\n\n      const prefixData = prefixResponse.data[0];\n      const now = new Date();\n      let newPrefix = \"\";\n      let prefixToShow;\n      let runningNumber = prefixData.running_number;\n      let isUnique = false;\n      let maxAttempts = 10;\n      let attempts = 0;\n\n      const generatePrefix = (runNumber) => {\n        let generated = prefixData.current_prefix_config;\n        generated = generated.replace(\"prefix\", prefixData.prefix_value);\n        generated = generated.replace(\"suffix\", prefixData.suffix_value);\n        generated = generated.replace(\n          \"month\",\n          String(now.getMonth() + 1).padStart(2, \"0\")\n        );\n        generated = generated.replace(\n          \"day\",\n          String(now.getDate()).padStart(2, \"0\")\n        );\n        generated = generated.replace(\"year\", now.getFullYear());\n        generated = generated.replace(\n          \"running_number\",\n          String(runNumber).padStart(prefixData.padding_zeroes, \"0\")\n        );\n        return generated;\n      };\n\n      const checkUniqueness = async (generatedPrefix) => {\n        const existingDoc = await db\n          .collection(\"stock_movement\")\n          .where({ stock_movement_no: generatedPrefix })\n          .get();\n        return existingDoc.data[0] ? false : true;\n      };\n\n      const findUniquePrefix = async () => {\n        while (!isUnique && attempts < maxAttempts) {\n          attempts++;\n          prefixToShow = generatePrefix(runningNumber);\n          isUnique = await checkUniqueness(prefixToShow);\n          if (!isUnique) {\n            runningNumber++;\n          }\n        }\n\n        if (!isUnique) {\n          throw new Error(\n            \"Could not generate a unique Stock Movement number after maximum attempts\"\n          );\n        } else {\n          newPrefix = prefixToShow;\n          db.collection(\"prefix_configuration\")\n            .where({\n              document_types: \"Stock Movement\",\n              is_deleted: 0,\n              organization_id: organizationId,\n              movement_type: movementType,\n            })\n            .update({\n              running_number: parseInt(runningNumber) + 1,\n              has_record: 1,\n            });\n        }\n      };\n\n      await findUniquePrefix();\n\n      const materialsMap = {};\n\n      for (const item of allData.stock_movement) {\n        const materialResponse = await this.db\n          .collection(\"Item\")\n          .where({ id: item.item_selection })\n          .get();\n\n        if (!materialResponse.data || materialResponse.data.length === 0) {\n          throw new Error(`Material with ID ${item.item_selection} not found`);\n        }\n\n        materialsMap[item.item_selection] = materialResponse.data[0];\n      }\n\n      console.log(\"All Data\", allData);\n\n      const receivingIOFT = {\n        stock_movement_status: \"Created\",\n        stock_movement_no: newPrefix,\n        movement_type: allData.movement_type,\n        issuing_operation_faci: receivingPlantId,\n        movement_id: stockMovementId,\n        stock_movement: allData.stock_movement.map((item) => {\n          const material = materialsMap[item.item_selection];\n          if (!material) {\n            throw new Error(\n              `Material with ID ${item.item_selection} not found`\n            );\n          }\n\n          return {\n            item_selection: item.item_selection,\n            total_quantity: item.total_quantity,\n            received_quantity_uom: material.based_uom,\n            unit_price: material.purchase_unit_price,\n          };\n        }),\n        issue_date: allData.issue_date,\n        issued_by: allData.issued_by || allData.user_id || \"System\",\n        remarks: allData.remarks,\n        organization_id: organizationId,\n        posted_status: \"Unposted\",\n      };\n\n      const result = await this.db\n        .collection(\"stock_movement\")\n        .add(receivingIOFT);\n      console.log(\"Created receiving IOFT:\", result);\n      return result;\n    } catch (error) {\n      console.error(\"Error creating receiving IOFT:\", error);\n      throw new Error(`Failed to create receiving IOFT: ${error.message}`);\n    }\n  }\n}\n\nasync function processFormData(db, self, organizationId) {\n  const adjuster = new StockAdjuster(db);\n  const closeDialog = () => {\n    if (self.parentGenerateForm) {\n      self.parentGenerateForm.$refs.SuPageDialogRef.hide();\n      self.parentGenerateForm.refresh();\n      self.hideLoading();\n    }\n  };\n\n  try {\n    const results = await adjuster.processStockAdjustment(\n      db,\n      self,\n      organizationId\n    );\n    closeDialog();\n    console.log(\"Stock movement processed:\", results);\n    return results;\n  } catch (error) {\n    console.error(\"Error processing stock adjustment:\", error.message);\n    throw error; // Error already displayed in processStockAdjustment\n  }\n}\n\nconst self = this;\nthis.showLoading();\nlet organizationId = this.getVarGlobal(\"deptParentId\");\nconsole.log(\"organization id\", organizationId);\nif (organizationId === \"0\") {\n  organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n}\n\nprocessFormData(db, self, organizationId)\n  .then((results) => console.log(\"Success:\", results))\n  .catch((error) => console.error(\"Error:\", error.message));\n"
            }
          }
        ]
      },
      {
        "key": "bmf3wnmq",
        "name": "onChange_plant",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "w34r713n",
            "action": "js",
            "options": {
              "func": "const data = this.getValues();\nconst plant = this.getValue('issuing_operation_faci');\n\ndb.collection('blade_dept').where({id: plant}).get().then((resPlant) => {\n  this.setData({'organization_id': resPlant.data[0].parent_id})\n})"
            }
          }
        ]
      },
      {
        "key": "ulloejd5",
        "name": "onChange_ulloejd5",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "nqtujnxf",
            "action": "js",
            "options": {
              "func": "const data = this.getValues();\nconst plant = this.getValue('receiving_operation_faci');\n\ndb.collection('blade_dept').where({id: plant}).get().then((resPlant) => {\n  this.setData({'organization_id': resPlant.data[0].parent_id})\n})"
            }
          }
        ]
      },
      {
        "key": "fgivan7v",
        "name": "onChange_fgivan7v",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "odds3jok",
            "action": "js",
            "options": {
              "func": "const data = this.getValues();\nconst plant = this.getValue('issuing_operation_faci');\n\ndb.collection('blade_dept').where({id: plant}).get().then((resPlant) => {\n  this.setData({'organization_id': resPlant.data[0].parent_id})\n})"
            }
          }
        ]
      },
      {
        "key": "26rho8uq",
        "name": "onChange_26rho8uq",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "bmfy28g6",
            "action": "js",
            "options": {
              "func": "const data = this.getValues();\nconst plant = this.getValue('receiving_operation_faci');\n\ndb.collection('blade_dept').where({id: plant}).get().then((resPlant) => {\n  this.setData({'organization_id': resPlant.data[0].parent_id})\n})"
            }
          }
        ]
      },
      {
        "key": "ehri9x1i",
        "name": "on_Click_issue",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "1d31btb5",
            "action": "js",
            "options": {
              "func": "(async () => {\n  try {\n    this.showLoading();\n\n    // Get all data at once\n    const formData = this.getValues();\n\n    const {\n      id: stockMovementId,\n      page_status,\n      issue_date,\n      stock_movement_no,\n      movement_type,\n      movement_type_id,\n      movement_reason,\n      issued_by,\n      issuing_operation_faci,\n      remarks,\n      delivery_method,\n      reference_documents,\n      receiving_operation_faci,\n      movement_id,\n      is_production_order,\n      production_order_id,\n      driver_name,\n      driver_contact_no,\n      vehicle_no,\n      pickup_date,\n      courier_company,\n      shipping_date,\n      freight_charges,\n      tracking_number,\n      est_arrival_date,\n      delivery_cost,\n      est_delivery_date,\n      shipping_company,\n      date_qn0dl3t6,\n      input_77h4nsq8,\n      shipping_method,\n      tracking_no,\n      stock_movement,\n      balance_index,\n      sm_item_balance,\n      table_item_balance,\n      material_id,\n      material_name,\n      row_index,\n    } = formData;\n\n    // Get organization ID\n    let organizationId = this.getVarGlobal(\"deptParentId\");\n    if (organizationId === \"0\") {\n      organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n    }\n\n    // Create entry data\n    const entry = {\n      stock_movement_status: \"Issued\",\n      organization_id: organizationId,\n      posted_status: \"Unposted\",\n      issue_date,\n      stock_movement_no,\n      movement_type,\n      movement_type_id,\n      movement_reason,\n      issued_by,\n      issuing_operation_faci,\n      remarks,\n      delivery_method,\n      reference_documents,\n      receiving_operation_faci,\n      movement_id,\n      is_production_order,\n      production_order_id,\n      driver_name,\n      driver_contact_no,\n      vehicle_no,\n      pickup_date,\n      courier_company,\n      shipping_date,\n      freight_charges,\n      tracking_number,\n      est_arrival_date,\n      delivery_cost,\n      est_delivery_date,\n      shipping_company,\n      date_qn0dl3t6,\n      input_77h4nsq8,\n      shipping_method,\n      tracking_no,\n      stock_movement,\n      balance_index,\n      sm_item_balance,\n      table_item_balance,\n      material_id,\n      material_name,\n      row_index,\n    };\n\n    // Helper function to close dialog\n    const closeDialog = () => {\n      if (this.parentGenerateForm) {\n        this.parentGenerateForm.$refs.SuPageDialogRef.hide();\n        this.parentGenerateForm.refresh();\n        this.hideLoading();\n      }\n    };\n\n    // Helper function to generate a unique prefix\n    const generateUniquePrefix = async (prefixData) => {\n      const now = new Date();\n      let runningNumber = prefixData.running_number;\n      let isUnique = false;\n      let maxAttempts = 10;\n      let attempts = 0;\n      let prefixToShow;\n\n      const generatePrefix = (runNumber) => {\n        let generated = prefixData.current_prefix_config;\n        generated = generated.replace(\"prefix\", prefixData.prefix_value);\n        generated = generated.replace(\"suffix\", prefixData.suffix_value);\n        generated = generated.replace(\n          \"month\",\n          String(now.getMonth() + 1).padStart(2, \"0\")\n        );\n        generated = generated.replace(\n          \"day\",\n          String(now.getDate()).padStart(2, \"0\")\n        );\n        generated = generated.replace(\"year\", now.getFullYear());\n        generated = generated.replace(\n          \"running_number\",\n          String(runNumber).padStart(prefixData.padding_zeroes, \"0\")\n        );\n        return generated;\n      };\n\n      const checkUniqueness = async (generatedPrefix) => {\n        const existingDoc = await db\n          .collection(\"stock_movement\")\n          .where({ stock_movement_no: generatedPrefix })\n          .get();\n        return !existingDoc.data || existingDoc.data.length === 0;\n      };\n\n      while (!isUnique && attempts < maxAttempts) {\n        attempts++;\n        prefixToShow = generatePrefix(runningNumber);\n        isUnique = await checkUniqueness(prefixToShow);\n        if (!isUnique) {\n          runningNumber++;\n        }\n      }\n\n      if (!isUnique) {\n        throw new Error(\n          \"Could not generate a unique Stock Movement number after maximum attempts\"\n        );\n      }\n\n      return { prefixToShow, runningNumber };\n    };\n\n    // Helper function to update prefix running number\n    const updatePrefixRunningNumber = async (movementType, runningNumber) => {\n      await db\n        .collection(\"prefix_configuration\")\n        .where({\n          document_types: \"Stock Movement\",\n          is_deleted: 0,\n          organization_id: organizationId,\n          movement_type: movementType,\n        })\n        .update({\n          running_number: parseInt(runningNumber) + 1,\n          has_record: 1,\n        });\n    };\n\n    try {\n      if (page_status === \"Add\") {\n        // Add mode\n        console.log(\"Processing Add mode\");\n        await db.collection(\"stock_movement\").add(entry);\n\n        // Update prefix running number\n        const prefixEntryResponse = await db\n          .collection(\"prefix_configuration\")\n          .where({\n            document_types: \"Stock Movement\",\n            is_deleted: 0,\n            movement_type: movement_type,\n            organization_id: organizationId,\n            is_active: 1,\n          })\n          .get();\n\n        if (prefixEntryResponse.data && prefixEntryResponse.data.length > 0) {\n          const prefixData = prefixEntryResponse.data[0];\n          await updatePrefixRunningNumber(\n            movement_type,\n            prefixData.running_number\n          );\n        }\n\n        this.$message.success(\"Stock Movement successfully issued\");\n      } else if (page_status === \"Edit\") {\n        // Edit mode\n        console.log(\"Processing Edit mode\");\n        const prefixEntryResponse = await db\n          .collection(\"prefix_configuration\")\n          .where({\n            document_types: \"Stock Movement\",\n            is_deleted: 0,\n            organization_id: organizationId,\n            is_active: 1,\n            movement_type: movement_type,\n          })\n          .get();\n\n        if (prefixEntryResponse.data && prefixEntryResponse.data.length > 0) {\n          const prefixData = prefixEntryResponse.data[0];\n          const { prefixToShow, runningNumber } = await generateUniquePrefix(\n            prefixData\n          );\n\n          // Update entry with new stock_movement_no\n          entry.stock_movement_no = prefixToShow;\n          await db\n            .collection(\"stock_movement\")\n            .doc(stockMovementId)\n            .update(entry);\n\n          // Update prefix running number\n          await updatePrefixRunningNumber(movement_type, runningNumber);\n        } else {\n          await db\n            .collection(\"stock_movement\")\n            .doc(stockMovementId)\n            .update(entry);\n        }\n\n        this.$message.success(\"Stock Movement successfully updated and issued\");\n      }\n\n      // Close dialog on success\n      closeDialog();\n    } catch (error) {\n      console.error(\"Error processing stock movement:\", error);\n      this.$message.error(error.message || \"An error occurred\");\n      this.hideLoading();\n    }\n  } catch (error) {\n    console.error(\"Error in main function:\", error);\n    this.$message.error(error.message || \"An error occurred\");\n    this.hideLoading();\n  }\n})();\n"
            }
          }
        ]
      },
      {
        "key": "ygqhd3jr",
        "name": "onClick_selectCategory",
        "func": "(async () => {\n  const allData = this.getValues();\n  const movementType = allData.movement_type;\n  const rowIndex = arguments[0]?.rowIndex;\n  const movementTypeCategories = {\n    \"Inter Operation Facility Transfer\": [\n      \"Unrestricted\",\n      \"Quality Inspection\",\n      \"Blocked\",\n    ],\n    \"Inter Operation Facility Transfer (Receiving)\": [\n      \"Unrestricted\",\n      \"Quality Inspection\",\n      \"Blocked\",\n    ],\n    \"Location Transfer\": [\n      \"Unrestricted\",\n      \"Quality Inspection\",\n      \"Blocked\",\n      \"Reserved\",\n    ],\n    \"Miscellaneous Issue\": [\"Unrestricted\"],\n    \"Miscellaneous Receipt\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Disposal/Scrap\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Inventory Category Transfer Posting\": [\n      \"Unrestricted\",\n      \"Quality Inspection\",\n      \"Blocked\",\n    ],\n  };\n\n  console.log(\"movementType\", movementType);\n\n  const categoryObjectResponse = await db\n    .collection(\"inventory_category\")\n    .get();\n  const allowedCategories = movementTypeCategories[movementType] || [\n    \"Unrestricted\",\n  ];\n  const filteredCategories = categoryObjectResponse.data.filter((category) =>\n    allowedCategories.includes(category.inventory_category_name)\n  );\n\n  console.log(\"filteredCategories\", filteredCategories);\n\n  await this.setOptionData(\n    [`sm_item_balance.table_item_balance.${rowIndex}.category`],\n    filteredCategories\n  );\n})();\n",
        "type": "js"
      },
      {
        "key": "umqs4zz3",
        "name": "onClick_CategoryFrom",
        "func": "const allData = this.getValues();\nconst movementTypeId = allData.movement_type;\nconst rowIndex = arguments[0]?.rowIndex;\nconst movementTypeCategories = {\n    \"Inter Operation Facility Transfer\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Inter Operation Facility Transfer (Receiving)\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Location Transfer\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\", \"Reserved\"],\n    \"Miscellaneous Issue\": [\"Unrestricted\"],\n    \"Miscellaneous Receipt\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Disposal/Scrap\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Inventory Category Transfer Posting\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"]\n};\n\nconst fetchCategory = async () => {\n    try {\n        const categoryObjectResponse = await db.collection(\"inventory_category\").get();\n\n        const response = await db.collection(\"stock_movement_type\")\n            .where({ id: movementTypeId })\n            .get();\n        if (!response.data[0]) {\n            throw new Error(\"Invalid movement type ID\");\n        }\n        const movementType = response.data[0].sm_type_name;\n\n        // Filter categories based on movement type\n        const allowedCategories = movementTypeCategories[movementType] || [\"Unrestricted\"];\n        const filteredCategories = categoryObjectResponse.data.filter(category => \n            allowedCategories.includes(category.inventory_category_name)\n        );\n\n        // Conditionally set fields based on movement type\n        if (movementType === \"Inventory Category Transfer Posting\") {\n            this.setOptionData(\n                [\n                    `sm_item_balance.table_item_balance.${rowIndex}.category_from`,\n                    `sm_item_balance.table_item_balance.${rowIndex}.category_to`\n                ],\n                filteredCategories\n            );\n        } else {\n            this.setOptionData(\n                [`sm_item_balance.table_item_balance.${rowIndex}.category`],\n                filteredCategories\n            );\n        }\n    } catch (error) {\n        console.error(\"Error fetching category:\", error);\n    }\n};\n\nfetchCategory();",
        "type": "js"
      },
      {
        "key": "ana28wmu",
        "name": "onClick_CategoryTo",
        "func": "const allData = this.getValues();\nconst movementTypeId = allData.movement_type;\nconst rowIndex = arguments[0]?.rowIndex;\nconst movementTypeCategories = {\n    \"Inter Operation Facility Transfer\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Inter Operation Facility Transfer (Receiving)\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Location Transfer\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\", \"Reserved\"],\n    \"Miscellaneous Issue\": [\"Unrestricted\"],\n    \"Miscellaneous Receipt\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Disposal/Scrap\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"],\n    \"Inventory Category Transfer Posting\": [\"Unrestricted\", \"Quality Inspection\", \"Blocked\"]\n};\n\nconst fetchCategory = async () => {\n    try {\n        const categoryObjectResponse = await db.collection(\"inventory_category\").get();\n\n        const response = await db.collection(\"stock_movement_type\")\n            .where({ id: movementTypeId })\n            .get();\n        if (!response.data[0]) {\n            throw new Error(\"Invalid movement type ID\");\n        }\n        const movementType = response.data[0].sm_type_name;\n\n        // Filter categories based on movement type\n        const allowedCategories = movementTypeCategories[movementType] || [\"Unrestricted\"];\n        const filteredCategories = categoryObjectResponse.data.filter(category => \n            allowedCategories.includes(category.inventory_category_name)\n        );\n\n        // Conditionally set fields based on movement type\n        if (movementType === \"Inventory Category Transfer Posting\") {\n            this.setOptionData(\n                [\n                    `sm_item_balance.table_item_balance.${rowIndex}.category_from`,\n                    `sm_item_balance.table_item_balance.${rowIndex}.category_to`\n                ],\n                filteredCategories\n            );\n        } else {\n            this.setOptionData(\n                [`sm_item_balance.table_item_balance.${rowIndex}.category`],\n                filteredCategories\n            );\n        }\n    } catch (error) {\n        console.error(\"Error fetching category:\", error);\n    }\n};\n\nfetchCategory();",
        "type": "js"
      },
      {
        "key": "fbiujspl",
        "name": "onChange_linkProduction",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "jdfndar6",
            "action": "js",
            "options": {
              "func": "const self = this;\nconst allData = self.getValues();\nconst isLink = arguments[0].value\n    if (isLink === 1) {\n        this.display(['production_order_id'], true);\n        this.display(['stock_movement.requested_qty'], true);\n    } else {\n        console.log(\"isLink\",isLink)\n        this.hide(['production_order_id'], true);\n        this.hide(['stock_movement.requested_qty'], true);\n}"
            }
          }
        ]
      },
      {
        "key": "0ehtz1od",
        "name": "onFocus_FilterType",
        "func": "const data = this.getValues();\nconst page_status = data.page_status;\nconsole.log(\"page_status\", page_status);\n\nif (page_status === \"Add\" || page_status === \"Edit\") {\n  (async () => {\n    try {\n      console.log(\"Fetching and filtering movement types\");\n\n      const resDict = await db\n        .collection(\"blade_dict\")\n        .where({ dict_value: \"Stock Movement Type\" })\n        .get();\n      const stockMovementId = resDict.data[0].id;\n\n      const { data: allMovementTypes } = await db\n        .collection(\"blade_dict\")\n        .where({ parent_id: stockMovementId })\n        .get();\n\n      if (!allMovementTypes || !allMovementTypes.length) {\n        console.error(\"No movement types found in database\");\n        return;\n      }\n\n      const restrictedTypes = [\"Good Issue\", \"Production Receipt\"];\n\n      const filteredTypes = allMovementTypes.filter(\n        (type) => !restrictedTypes.includes(type.dict_value)\n      );\n\n      console.log(\n        `Filtered from ${allMovementTypes.length} to ${filteredTypes.length} movement types`\n      );\n\n      console.log(\"filteredTypes\", filteredTypes);\n\n      this.setOptionData([\"movement_type\"], filteredTypes);\n      console.log(\"Movement type options set successfully\");\n    } catch (error) {\n      console.error(\"Error setting movement type options:\", error);\n    }\n  })();\n}\n",
        "type": "js"
      },
      {
        "key": "opst8ztv",
        "name": "onClick_completed_posted",
        "func": "class StockAdjuster {\n  constructor(db) {\n    this.db = db;\n    this.categoryMap = {\n      Unrestricted: \"unrestricted_qty\",\n      \"Quality Inspection\": \"qualityinsp_qty\",\n      Blocked: \"block_qty\",\n      Reserved: \"reserved_qty\",\n    };\n  }\n\n  // Helper functions for consistent decimal formatting\n  roundQty(value) {\n    return parseFloat(parseFloat(value || 0).toFixed(3));\n  }\n\n  roundPrice(value) {\n    return parseFloat(parseFloat(value || 0).toFixed(4));\n  }\n\n  validateRequiredFields(data, requiredFields, context = \"\") {\n    const missingFields = requiredFields.filter(\n      (field) => !data[field] && data[field] !== 0\n    );\n    if (missingFields.length > 0) {\n      throw new Error(\n        `Please fill in all required fields marked with (*) ${context}: ${missingFields.join(\n          \", \"\n        )}`\n      );\n    }\n  }\n\n  async updateProductionOrder(allData, subformData, balanceIndex) {\n    if (allData.is_production_order !== 1 || !allData.production_order_id) {\n      return; // Skip if not a production order or no production order ID\n    }\n\n    const tableMatConfirmation = subformData.map((item) => ({\n      material_id: item.item_selection,\n      material_required_qty: item.total_quantity || item.received_quantity || 0,\n      bin_location_id: item.location_id,\n    }));\n    console.log(\"Table Mat Confirmation\", balanceIndex);\n    try {\n      const productionOrderResponse = await this.db\n        .collection(\"production_order\")\n        .where({ id: allData.production_order_id })\n        .get();\n\n      if (\n        !productionOrderResponse.data ||\n        productionOrderResponse.data.length === 0\n      ) {\n        throw new Error(\n          `Production order ${allData.production_order_id} not found`\n        );\n      }\n      const productionOrderId = productionOrderResponse.data[0].id;\n      await this.db\n        .collection(\"production_order\")\n        .doc(productionOrderId)\n        .update({\n          table_mat_confirmation: tableMatConfirmation,\n          balance_index: balanceIndex || [],\n          production_order_status: \"In Progress\",\n          update_time: new Date().toISOString(),\n        });\n\n      console.log(\n        `Production order ${allData.production_order_id} updated successfully`\n      );\n    } catch (error) {\n      console.error(\"Error updating production order:\", error);\n      throw new Error(`Failed to update production order: ${error.message}`);\n    }\n  }\n\n  async preValidateItems(subformData, movementType, allData) {\n    for (const item of subformData) {\n      this.validateRequiredFields(\n        item,\n        [\"item_selection\"],\n        `for item ${item.item_selection || \"unknown\"}`\n      );\n\n      const materialResponse = await this.db\n        .collection(\"Item\")\n        .where({ id: item.item_selection })\n        .get();\n      const materialData = materialResponse.data[0];\n      // UOM comparison and conversion logic\n      let quantityConverted = item.received_quantity || 0;\n      let selected_uom = materialData.based_uom; // Default to base UOM\n\n      if (\n        movementType === \"Miscellaneous Receipt\" &&\n        item.received_quantity_uom\n      ) {\n        if (item.received_quantity_uom === materialData.based_uom) {\n          selected_uom = materialData.based_uom;\n        } else {\n          const uomConversion = materialData.table_uom_conversion?.find(\n            (conversion) => conversion.alt_uom_id === item.received_quantity_uom\n          );\n          if (uomConversion) {\n            selected_uom = uomConversion.alt_uom_id;\n            quantityConverted =\n              Math.round(\n                (item.received_quantity || 0) * uomConversion.base_qty * 1000\n              ) / 1000;\n          } else {\n            throw new Error(\n              `Invalid UOM ${item.received_quantity_uom} for item ${item.item_selection}`\n            );\n          }\n        }\n      }\n\n      // Always set effective_uom and quantity_converted for the item\n      item.effective_uom = selected_uom;\n      item.quantity_converted = quantityConverted;\n\n      console.log(\n        `preValidateItems: item ${item.item_selection}, effective_uom: ${item.effective_uom}, quantity_converted: ${quantityConverted}`\n      );\n\n      if (\n        movementType === \"Inter Operation Facility Transfer\" ||\n        movementType === \"Miscellaneous Receipt\"\n      ) {\n        if (!item.received_quantity || item.received_quantity <= 0) {\n          continue;\n        }\n      } else {\n        if (!allData.balance_index || !Array.isArray(allData.balance_index)) {\n          throw new Error(\n            `Balance selection (balance_index) is required for item ${item.item_selection}`\n          );\n        }\n\n        const balancesToProcess = allData.balance_index.filter(\n          (balance) => balance.sm_quantity && balance.sm_quantity > 0\n        );\n\n        if (balancesToProcess.length === 0) {\n          continue;\n        }\n\n        if (movementType === \"Location Transfer\") {\n          balancesToProcess.forEach((balance) => {\n            if (!balance.location_id && !item.location_id) {\n              throw new Error(\n                `Receiving bin ID (receiving_bin_id) is required for Location Transfer for item ${item.item_selection}`\n              );\n            }\n          });\n        }\n\n        const collectionName =\n          materialData.item_batch_management == \"1\"\n            ? \"item_batch_balance\"\n            : \"item_balance\";\n        for (const balance of balancesToProcess) {\n          this.validateRequiredFields(\n            balance,\n            [\"sm_quantity\", \"location_id\"],\n            `for balance in item ${item.item_selection}`\n          );\n\n          const balanceResponse = await this.db\n            .collection(collectionName)\n            .where({\n              material_id: materialData.id,\n              location_id: balance.location_id,\n            })\n            .get();\n          const balanceData = balanceResponse.data[0];\n\n          const categoryField =\n            this.categoryMap[balance.category || subformData.category];\n          // if (!categoryField && movementType != 'Inventory Category Transfer Posting') {\n          //     throw new Error(`Invalid category: ${balance.category || 'Unrestricted'}`);\n          // }\n\n          if (!balanceData) {\n            throw new Error(\n              `No existing balance found for item ${item.item_selection} at location ${balance.location_id}`\n            );\n          }\n\n          const currentQty = balanceData[categoryField] || 0;\n          const requestedQty =\n            balance.quantity_converted > 0\n              ? balance.quantity_converted\n              : balance.sm_quantity;\n\n          // if (movementType === 'Miscellaneous Issue' ||\n          //     movementType === 'Disposal/Scrap' ||\n          //     movementType === 'Location Transfer') {\n          //     if (currentQty < requestedQty) {\n          //         throw new Error(`Insufficient quantity in ${balance.category || subformData.category} for item ${item.item_selection} at location ${balance.location_id}. Available: ${currentQty}, Requested: ${requestedQty}`);\n          //     }\n          // } else if (movementType === 'Inventory Category Transfer Posting') {\n          //     if (!balance.category_from || !balance.category_to) {\n          //         throw new Error(`Both category_from and category_to are required for Inventory Category Transfer Posting for item ${item.item_selection}`);\n          //     }\n          //     const fromCategoryField = this.categoryMap[balance.category_from];\n          //     const currentFromQty = balanceData[fromCategoryField] || 0;\n          //     if (currentFromQty < requestedQty) {\n          //         throw new Error(`Insufficient quantity in ${balance.category_from} for item ${item.item_selection} at location ${balance.location_id}. Available: ${currentFromQty}, Requested: ${requestedQty}`);\n          //     }\n          // }\n        }\n      }\n    }\n  }\n\n  async processStockAdjustment(allData, organizationId) {\n    console.log(\"This is all data\", allData);\n    const subformData = allData.stock_movement;\n    const movementType = allData.movement_type;\n    const balanceIndex = allData.balance_index;\n    const requiredTopLevelFields = [\n      \"stock_movement_no\",\n      \"movement_type\",\n      \"issue_date\",\n    ];\n    this.validateRequiredFields(allData, requiredTopLevelFields);\n\n    await this.preValidateItems(subformData, movementType, allData);\n    await this.updateStockMovementTable(\n      allData,\n      subformData,\n      movementType,\n      organizationId\n    );\n\n    // Update production order for Location Transfer if applicable\n    if (\n      movementType === \"Location Transfer\" &&\n      allData.is_production_order === 1\n    ) {\n      await this.updateProductionOrder(allData, subformData, balanceIndex);\n    }\n\n    const updates = await Promise.all(\n      subformData.map((item) =>\n        this.processItem(item, movementType, allData, organizationId)\n      )\n    );\n\n    return updates;\n  }\n\n  async updateStockMovementTable(\n    allData,\n    subformData,\n    movementType,\n    organizationId\n  ) {\n    try {\n      const table_item_balance = allData.sm_item_balance?.table_item_balance;\n      const stockMovementData = {\n        stock_movement_no: allData.stock_movement_no,\n        movement_type: allData.movement_type,\n        movement_type_id: allData.movement_type_id,\n        movement_reason: allData.movement_reason || null,\n        issued_by: allData.issued_by || allData.user_id || \"system\",\n        issue_date: allData.issue_date,\n        issuing_operation_faci: allData.issuing_operation_faci,\n        stock_movement: subformData,\n        sm_item_balance: allData.sm_item_balance,\n        table_item_balance: table_item_balance,\n        remarks: allData.remarks,\n        delivery_method: allData.delivery_method,\n        driver_name: allData.driver_name,\n        vehicle_no: allData.vehicle_no,\n        pickup_date: allData.pickup_date,\n        courier_company: allData.courier_company,\n        tracking_number: allData.tracking_number,\n        est_arrival_date: allData.est_arrival_date,\n        freight_charges: allData.freight_charges,\n        driver_contact_no: allData.driver_contact_no,\n        delivery_cost: allData.delivery_cost,\n        est_delivery_date: allData.est_delivery_date,\n        shipping_company: allData.shipping_company,\n        shipping_method: allData.shipping_method,\n        date_qn0dl3t6: allData.date_qn0dl3t6,\n        input_77h4nsq8: allData.input_77h4nsq8,\n        tracking_no: allData.tracking_no,\n        balance_index: allData.balance_index,\n        organization_id: organizationId,\n        posted_status: \"Pending Post\",\n      };\n\n      const page_status = allData.page_status;\n      const stockMovementNo = allData.id;\n\n      let result;\n\n      if (page_status === \"Add\") {\n        result = await this.db.collection(\"stock_movement\").add({\n          stock_movement_status: \"Completed\",\n          ...stockMovementData,\n        });\n        console.log(\"Stock Movement Added:\", result);\n\n        await this.db\n          .collection(\"prefix_configuration\")\n          .where({\n            document_types: \"Stock Movement\",\n            is_deleted: 0,\n            organization_id: organizationId,\n            is_active: 1,\n            movement_type: movementType,\n          })\n          .get()\n          .then((prefixEntry) => {\n            if (prefixEntry.data.length > 0) {\n              const data = prefixEntry.data[0];\n              return this.db\n                .collection(\"prefix_configuration\")\n                .where({\n                  document_types: \"Stock Movement\",\n                  is_deleted: 0,\n                  organization_id: organizationId,\n                  movement_type: movementType,\n                })\n                .update({\n                  running_number: parseInt(data.running_number) + 1,\n                  has_record: 1,\n                });\n            }\n          });\n      } else if (page_status === \"Edit\") {\n        if (!stockMovementNo) {\n          throw new Error(\"Stock movement number is required for editing\");\n        }\n        const existingRecord = await this.db\n          .collection(\"stock_movement\")\n          .where({ id: stockMovementNo })\n          .get();\n\n        if (existingRecord.data.length === 0) {\n          throw new Error(\n            `Stock movement ${stockMovementNo} not found for editing`\n          );\n        }\n\n        const recordId = existingRecord.data[0].id;\n        result = await this.db\n          .collection(\"stock_movement\")\n          .doc(recordId)\n          .update({\n            stock_movement_status: \"Completed\",\n            ...stockMovementData,\n            update_time: new Date().toISOString(),\n          });\n        console.log(\"Stock Movement Updated:\", result);\n      }\n\n      // Fix for workflow call: Convert callback-style to Promise\n      return new Promise((resolve, reject) => {\n        this.runWorkflow(\n          \"1910197713380311041\",\n          { key: \"value\" },\n          (res) => {\n            console.log(\"Workflow success:\", res);\n            resolve(result); // Resolve with original DB result\n          },\n          (err) => {\n            console.error(\"Workflow error:\", err);\n            // Still resolve with the DB result, as the SM is created/updated successfully\n            // Just log the workflow error, don't reject the whole operation\n            resolve(result);\n          }\n        );\n      });\n    } catch (error) {\n      console.error(\"Error in updateStockMovementTable:\", error);\n      throw error; // Propagate the error\n    }\n  }\n\n  async processItem(item, movementType, allData, organizationId) {\n    try {\n      const materialResponse = await this.db\n        .collection(\"Item\")\n        .where({ id: item.item_selection })\n        .get();\n      const materialData = materialResponse.data[0];\n\n      if (!materialData) {\n        throw new Error(`Material not found for item ${item.item_selection}`);\n      }\n\n      const balancesToProcess =\n        allData.balance_index?.filter(\n          (balance) => balance.sm_quantity && balance.sm_quantity > 0\n        ) || [];\n\n      if (\n        movementType === \"Miscellaneous Receipt\" &&\n        (!item.received_quantity || item.received_quantity <= 0)\n      ) {\n        return {\n          itemId: item.item_selection,\n          status: \"skipped\",\n          reason: \"No received quantity provided\",\n        };\n      }\n\n      const updates = [];\n      for (const balance of balancesToProcess) {\n        try {\n          console.log(\n            `Processing balance for ${item.item_selection} at location ${balance.location_id}`\n          );\n\n          await this.updateQuantities(\n            materialData,\n            movementType,\n            balance,\n            allData,\n            item,\n            organizationId\n          );\n\n          const movementResult = await this.recordInventoryMovement(\n            materialData,\n            movementType,\n            balance,\n            allData,\n            item,\n            organizationId\n          );\n\n          updates.push({\n            balance: balance.location_id,\n            status: \"success\",\n            result: movementResult,\n          });\n        } catch (balanceError) {\n          console.error(\n            `Error processing balance for ${item.item_selection} at ${balance.location_id}:`,\n            balanceError\n          );\n\n          updates.push({\n            balance: balance.location_id,\n            status: \"error\",\n            error: balanceError.message,\n          });\n\n          return {\n            itemId: item.item_selection,\n            status: \"error\",\n            error: balanceError.message,\n          };\n        }\n      }\n\n      if (\n        movementType === \"Miscellaneous Receipt\" &&\n        item.received_quantity > 0\n      ) {\n        try {\n          await this.updateQuantities(\n            materialData,\n            movementType,\n            {},\n            allData,\n            item,\n            organizationId\n          );\n          await this.recordInventoryMovement(\n            materialData,\n            movementType,\n            { sm_quantity: item.received_quantity },\n            allData,\n            item,\n            organizationId\n          );\n\n          updates.push({\n            type: \"receipt\",\n            status: \"success\",\n          });\n        } catch (receiptError) {\n          console.error(\n            `Error processing receipt for ${item.item_selection}:`,\n            receiptError\n          );\n\n          updates.push({\n            type: \"receipt\",\n            status: \"error\",\n            error: receiptError.message,\n          });\n          return {\n            itemId: item.item_selection,\n            status: \"error\",\n            error: receiptError.message,\n          };\n        }\n      }\n\n      return {\n        itemId: item.item_selection,\n        status: updates.some((u) => u.status === \"error\")\n          ? \"partial\"\n          : \"success\",\n        details: updates,\n      };\n    } catch (error) {\n      console.error(`Error in processItem for ${item.item_selection}:`, error);\n      return {\n        itemId: item.item_selection,\n        status: \"failed\",\n        error: error.message,\n      };\n    }\n  }\n\n  async updateQuantities(\n    materialData,\n    movementType,\n    balance,\n    allData,\n    subformData,\n    organizationId\n  ) {\n    const collectionName =\n      materialData.item_batch_management == \"1\"\n        ? \"item_batch_balance\"\n        : \"item_balance\";\n    let qtyChangeValue =\n      movementType === \"Miscellaneous Receipt\"\n        ? subformData.quantity_converted || subformData.received_quantity || 0\n        : balance.quantity_converted || balance.sm_quantity || 0;\n    const locationId = balance.location_id || subformData.location_id;\n    const effectiveUom =\n      balance.effective_uom ||\n      subformData.effective_uom ||\n      materialData.based_uom;\n\n    console.log(\n      `updateQuantities: item ${materialData.id}, movement ${movementType}, effectiveUom: ${effectiveUom}, qtyChangeValue: ${qtyChangeValue}`\n    );\n\n    if (qtyChangeValue === 0) return;\n\n    if (!locationId && movementType !== \"Miscellaneous Receipt\") {\n      throw new Error(\"Location ID is required\");\n    }\n\n    if (!effectiveUom) {\n      throw new Error(`Effective UOM is undefined for item ${materialData.id}`);\n    }\n\n    // Derive the category field without modifying balance.category\n    const categoryKey =\n      movementType === \"Location Transfer\"\n        ? \"Unrestricted\"\n        : movementType === \"Miscellaneous Receipt\"\n        ? subformData.category || \"Unrestricted\"\n        : balance.category || \"Unrestricted\";\n    const categoryField = this.categoryMap[categoryKey];\n\n    // if (!categoryField && movementType != 'Inventory Category Transfer Posting') {\n    // throw new Error(`Invalid category: ${categoryKey}`);\n    // }\n\n    const queryConditions = {\n      material_id: materialData.id,\n      location_id: locationId,\n    };\n\n    if (materialData.item_batch_management == \"1\" && balance.batch_id) {\n      queryConditions.batch_id = balance.batch_id;\n    }\n\n    const balanceResponse = await this.db\n      .collection(collectionName)\n      .where(queryConditions)\n      .get();\n\n    let balanceData = balanceResponse.data[0];\n\n    let updateData = balanceData\n      ? { ...balanceData }\n      : {\n          material_id: materialData.id,\n          location_id: locationId,\n          balance_quantity: 0,\n          unrestricted_qty: 0,\n          qualityinsp_qty: 0,\n          block_qty: 0,\n          reserved_qty: 0,\n          batch_id:\n            materialData.item_batch_management == \"1\" ? balance.batch_id : null,\n          plant_id: allData.issuing_operation_faci,\n          create_user: allData.user_id || \"system\",\n          issue_date: allData.issue_date,\n          update_user: allData.user_id || \"system\",\n          is_deleted: 0,\n          tenant_id: allData.tenant_id || \"000000\",\n          organization_id: organizationId,\n        };\n\n    switch (movementType) {\n      case \"Inter Operation Facility Transfer\":\n        updateData.balance_quantity =\n          (updateData.balance_quantity || 0) + qtyChangeValue;\n        updateData[categoryField] =\n          (updateData[categoryField] || 0) + qtyChangeValue;\n        break;\n\n      case \"Location Transfer\":\n        updateData.balance_quantity =\n          (updateData.balance_quantity || 0) - qtyChangeValue;\n        updateData[categoryField] =\n          (updateData[categoryField] || 0) - qtyChangeValue;\n        break;\n\n      case \"Miscellaneous Issue\":\n      case \"Disposal/Scrap\":\n        updateData.balance_quantity =\n          (updateData.balance_quantity || 0) - qtyChangeValue;\n        updateData[categoryField] =\n          (updateData[categoryField] || 0) - qtyChangeValue;\n        break;\n\n      case \"Miscellaneous Receipt\":\n        updateData.balance_quantity =\n          (updateData.balance_quantity || 0) + qtyChangeValue;\n        updateData[categoryField] =\n          (updateData[categoryField] || 0) + qtyChangeValue;\n        if (materialData.item_batch_management == \"1\") {\n          const batchId = await this.createBatch(\n            materialData,\n            qtyChangeValue,\n            allData,\n            subformData,\n            organizationId\n          );\n          console.log(\"batchId\", batchId);\n          updateData.batch_id = batchId;\n        }\n        break;\n\n      case \"Inventory Category Transfer Posting\":\n        if (!balance.category_from || !balance.category_to) {\n          throw new Error(\"Both category_from and category_to are required\");\n        }\n        const fromCategoryField = this.categoryMap[balance.category_from];\n        const toCategoryField = this.categoryMap[balance.category_to];\n        updateData[fromCategoryField] =\n          (updateData[fromCategoryField] || 0) - qtyChangeValue;\n        updateData[toCategoryField] =\n          (updateData[toCategoryField] || 0) + qtyChangeValue;\n        break;\n\n      default:\n        throw new Error(`Unsupported movement type: ${movementType}`);\n    }\n\n    updateData.update_time = new Date().toISOString();\n    updateData.update_user = allData.user_id || \"system\";\n\n    if (!balanceData) {\n      await this.db.collection(collectionName).add(updateData);\n    } else {\n      const updateFields = {\n        balance_quantity: updateData.balance_quantity,\n        unrestricted_qty: updateData.unrestricted_qty,\n        qualityinsp_qty: updateData.qualityinsp_qty,\n        block_qty: updateData.block_qty,\n        reserved_qty: updateData.reserved_qty,\n        update_time: updateData.update_time,\n        update_user: updateData.update_user,\n        plant_id: updateData.plant_id,\n      };\n      if (materialData.item_batch_management == \"1\") {\n        updateFields.batch_id = updateData.batch_id;\n      }\n      await this.db\n        .collection(collectionName)\n        .doc(balanceData.id)\n        .update(updateFields);\n    }\n\n    if (\n      [\n        \"Miscellaneous Issue\",\n        \"Disposal/Scrap\",\n        \"Miscellaneous Receipt\",\n      ].includes(movementType)\n    ) {\n      const qtyChange =\n        movementType === \"Miscellaneous Receipt\"\n          ? qtyChangeValue\n          : -qtyChangeValue;\n      await this.updateCostingMethod(\n        materialData,\n        qtyChange,\n        allData.issuing_operation_faci,\n        subformData,\n        updateData,\n        organizationId\n      );\n    }\n\n    if (movementType === \"Location Transfer\") {\n      await this.updateReceivingLocation(\n        materialData,\n        collectionName,\n        subformData.location_id,\n        qtyChangeValue,\n        balance,\n        allData,\n        subformData,\n        movementType,\n        organizationId\n      );\n    }\n  }\n\n  async updateReceivingLocation(\n    materialData,\n    collectionName,\n    receivingLocationId,\n    qtyChangeValue,\n    balance,\n    allData,\n    subformData,\n    movementType,\n    organizationId\n  ) {\n    if (!receivingLocationId) {\n      throw new Error(\n        \"Receiving location ID is required for Location Transfer\"\n      );\n    }\n\n    const effectiveUom =\n      balance.effective_uom ||\n      subformData.effective_uom ||\n      materialData.based_uom;\n    qtyChangeValue = balance.quantity_converted || qtyChangeValue;\n\n    console.log(\n      `updateReceivingLocation: item ${materialData.id}, effectiveUom: ${effectiveUom}, qtyChangeValue: ${qtyChangeValue}`\n    );\n\n    if (!effectiveUom) {\n      throw new Error(\n        `Effective UOM is undefined for item ${materialData.id} in receiving location`\n      );\n    }\n\n    // For batch-managed items, we need to check for the specific batch\n    const queryConditions = {\n      material_id: materialData.id,\n      location_id: receivingLocationId,\n    };\n\n    // Add batch_id to query conditions for batch-managed items\n    if (materialData.item_batch_management == \"1\" && balance.batch_id) {\n      queryConditions.batch_id = balance.batch_id;\n    }\n\n    const balanceResponse = await this.db\n      .collection(collectionName)\n      .where(queryConditions)\n      .get();\n\n    let balanceData = balanceResponse.data[0];\n\n    let updateData = balanceData\n      ? { ...balanceData }\n      : {\n          material_id: materialData.id,\n          location_id: receivingLocationId,\n          balance_quantity: 0,\n          unrestricted_qty: 0,\n          qualityinsp_qty: 0,\n          block_qty: 0,\n          reserved_qty: 0,\n          batch_id:\n            materialData.item_batch_management == \"1\" ? balance.batch_id : null,\n          plant_id: allData.issuing_operation_faci,\n          create_user: allData.user_id || \"system\",\n          issue_date: allData.issue_date,\n          update_user: allData.user_id || \"system\",\n          is_deleted: 0,\n          tenant_id: allData.tenant_id || \"000000\",\n          organization_id: organizationId,\n        };\n\n    const categoryField =\n      movementType === \"Location Transfer\"\n        ? this.categoryMap[\"Unrestricted\"]\n        : movementType === \"Miscellaneous Receipt\"\n        ? this.categoryMap[subformData.category || \"Unrestricted\"]\n        : this.categoryMap[balance.category || \"Unrestricted\"];\n\n    updateData.balance_quantity =\n      (updateData.balance_quantity || 0) + qtyChangeValue;\n    updateData[categoryField] =\n      (updateData[categoryField] || 0) + qtyChangeValue;\n\n    updateData.update_time = new Date().toISOString();\n    updateData.update_user = allData.user_id || \"system\";\n\n    if (!balanceData) {\n      // For new entries, ensure we're creating a properly-formatted record\n      await this.db.collection(collectionName).add(updateData);\n      console.log(\n        `Created new ${collectionName} record for batch ${balance.batch_id} at location ${receivingLocationId}`\n      );\n    } else {\n      const updateFields = {\n        balance_quantity: updateData.balance_quantity,\n        unrestricted_qty: updateData.unrestricted_qty,\n        qualityinsp_qty: updateData.qualityinsp_qty,\n        block_qty: updateData.block_qty,\n        reserved_qty: updateData.reserved_qty,\n        update_time: updateData.update_time,\n        update_user: updateData.update_user,\n        plant_id: updateData.plant_id,\n      };\n\n      // Only update batch_id if it's a batch-managed item and not already set\n      if (materialData.item_batch_management == \"1\") {\n        updateFields.batch_id = updateData.batch_id;\n      }\n\n      await this.db\n        .collection(collectionName)\n        .doc(balanceData.id)\n        .update(updateFields);\n\n      console.log(\n        `Updated existing ${collectionName} record for batch ${balance.batch_id} at location ${receivingLocationId}`\n      );\n    }\n  }\n\n  async updatePendingReceive(materialId, receivedQty, allData) {\n    const pendingRecQuery = await this.db\n      .collection(\"stock_movement\")\n      .where({ stock_movement_no: allData.stock_movement_no })\n      .get();\n  }\n\n  async createBatch(\n    materialData,\n    quantity,\n    allData,\n    subformData,\n    organizationId\n  ) {\n    const batchNumber = `BATCH-${Date.now()}-${Math.random()\n      .toString(36)\n      .substr(2, 5)}`;\n    const batchData = {\n      batch_number: subformData.batch_id || batchNumber,\n      material_id: materialData.id,\n      initial_quantity: quantity,\n      plant_id: allData.issuing_operation_faci,\n      transaction_no: allData.stock_movement_no,\n      organization_id: organizationId,\n      created_at: new Date(),\n      create_user: allData.user_id || \"system\",\n    };\n\n    try {\n      await this.db.collection(\"batch\").add(batchData);\n\n      await new Promise((resolve) => setTimeout(resolve, 300));\n\n      const batchQuery = await this.db\n        .collection(\"batch\")\n        .where({\n          batch_number: subformData.batch_id || batchNumber,\n          material_id: materialData.id,\n        })\n        .get();\n\n      if (!batchQuery.data || !batchQuery.data.length) {\n        throw new Error(\"Batch was created but could not be retrieved\");\n      }\n\n      return batchQuery.data[0].id;\n    } catch (error) {\n      console.error(\"Error creating or retrieving batch:\", error);\n      throw new Error(`Failed to create batch: ${error.message}`);\n    }\n  }\n\n  async updateCostingMethod(\n    materialData,\n    quantityChange,\n    plantId,\n    subformData,\n    balanceData,\n    organizationId\n  ) {\n    try {\n      console.log(\"updateCostingMethod inputs:\", {\n        materialData,\n        quantityChange,\n        plantId,\n        subformData,\n        balanceData,\n      });\n\n      if (!materialData?.id) {\n        throw new Error(\"Invalid material data: material_id is missing\");\n      }\n\n      if (!materialData.material_costing_method) {\n        throw new Error(\"Material costing method is not defined\");\n      }\n\n      if (!plantId) {\n        throw new Error(\"Plant ID is required for costing update\");\n      }\n\n      const costingMethod = materialData.material_costing_method;\n      const qtyChangeValue =\n        subformData.quantity_converted || quantityChange || 0;\n\n      if (qtyChangeValue === 0) {\n        console.log(\"No quantity change, skipping costing update\");\n        return;\n      }\n\n      if (\n        ![\"Weighted Average\", \"First In First Out\", \"Fixed Cost\"].includes(\n          costingMethod\n        )\n      ) {\n        throw new Error(`Unsupported costing method: ${costingMethod}`);\n      }\n\n      // Determine unit price: balance > subformData > materialData\n      const unitPrice =\n        balanceData.unit_price && balanceData.unit_price !== 0\n          ? balanceData.unit_price\n          : subformData.unit_price && subformData.unit_price !== 0\n          ? subformData.unit_price\n          : materialData.purchase_unit_price || 0;\n\n      if (unitPrice === 0) {\n        console.warn(\"Unit price is zero, proceeding with costing update\");\n      }\n\n      if (costingMethod === \"Weighted Average\") {\n        const waQuery =\n          materialData.item_batch_management == \"1\" && balanceData.batch_id\n            ? this.db.collection(\"wa_costing_method\").where({\n                material_id: materialData.id,\n                batch_id: balanceData.batch_id,\n                plant_id: plantId,\n              })\n            : this.db\n                .collection(\"wa_costing_method\")\n                .where({ material_id: materialData.id, plant_id: plantId });\n\n        const waResponse = await waQuery.get();\n        if (!waResponse || !waResponse.data) {\n          throw new Error(\"Failed to retrieve weighted average costing data\");\n        }\n\n        const waData = waResponse.data;\n\n        let newWaQuantity, newWaCostPrice;\n\n        if (waData.length === 0 && qtyChangeValue > 0) {\n          // Create new WA record for first receipt\n          newWaQuantity = this.roundQty(qtyChangeValue);\n          newWaCostPrice = this.roundPrice(unitPrice);\n\n          await this.db.collection(\"wa_costing_method\").add({\n            material_id: materialData.id,\n            batch_id:\n              materialData.item_batch_management == \"1\"\n                ? balanceData.batch_id\n                : null,\n            plant_id: plantId,\n            organization_id: organizationId,\n            wa_quantity: newWaQuantity,\n            wa_cost_price: newWaCostPrice,\n            created_at: new Date().toISOString(),\n          });\n        } else if (waData.length > 0) {\n          // Debug logging\n          console.log(\"WA Data found:\", {\n            count: waData.length,\n            firstItem: waData[0],\n            dataTypes: waData.map((item) => typeof item),\n            hasCreatedAt: waData.map((item) => Boolean(item.created_at)),\n            hasId: waData.map((item) => Boolean(item.id)),\n          });\n\n          let latestWa;\n          try {\n            latestWa = waData.sort(\n              (a, b) =>\n                new Date(b.created_at || 0) - new Date(a.created_at || 0)\n            )[0];\n\n            if (!latestWa) {\n              throw new Error(\"No WA records found after sorting\");\n            }\n\n            if (!latestWa.id) {\n              throw new Error(\"Latest WA record has no ID\");\n            }\n\n            console.log(\"Latest WA record:\", {\n              id: latestWa.id,\n              wa_quantity: latestWa.wa_quantity,\n              wa_cost_price: latestWa.wa_cost_price,\n              created_at: latestWa.created_at,\n            });\n          } catch (sortError) {\n            console.error(\"Error during WA record sorting:\", sortError);\n            throw new Error(\n              `Error processing WA records: ${sortError.message}`\n            );\n          }\n\n          const currentQty = this.roundQty(latestWa.wa_quantity || 0);\n          const currentCostPrice = this.roundPrice(latestWa.wa_cost_price || 0);\n\n          if (qtyChangeValue > 0) {\n            // Receipt\n            newWaQuantity = this.roundQty(currentQty + qtyChangeValue);\n            const currentTotalCost = this.roundPrice(\n              currentCostPrice * currentQty\n            );\n            const newTotalCost = this.roundPrice(unitPrice * qtyChangeValue);\n            newWaCostPrice =\n              newWaQuantity > 0\n                ? this.roundPrice(\n                    (currentTotalCost + newTotalCost) / newWaQuantity\n                  )\n                : 0;\n          } else {\n            // Delivery\n            const deliveredQuantity = Math.abs(qtyChangeValue);\n            newWaQuantity = this.roundQty(currentQty - deliveredQuantity);\n\n            if (newWaQuantity < 0) {\n              throw new Error(\n                `Insufficient WA quantity: available ${currentQty}, requested ${deliveredQuantity}`\n              );\n            }\n\n            // const currentTotalCost = this.roundPrice(\n            //   currentCostPrice * currentQty\n            // );\n            // const deliveryTotalCost = this.roundPrice(\n            //   currentCostPrice * deliveredQuantity\n            // );\n            // newWaCostPrice =\n            //   newWaQuantity > 0\n            //     ? this.roundPrice(\n            //         (currentTotalCost - deliveryTotalCost) / newWaQuantity\n            //       )\n            //     : 0;\n            newWaCostPrice = currentCostPrice;\n          }\n\n          await this.db\n            .collection(\"wa_costing_method\")\n            .doc(latestWa.id)\n            .update({\n              wa_quantity: newWaQuantity,\n              wa_cost_price: newWaCostPrice,\n              updated_at: new Date().toISOString(),\n            });\n        } else {\n          console.log(\"waQuery\", waQuery);\n          console.log(\"waResponse\", waQuery);\n          throw new Error(\n            `No WA costing record found for deduction: material ${materialData.id}, plant ${plantId}`\n          );\n        }\n      } else if (costingMethod === \"First In First Out\") {\n        const fifoQuery =\n          materialData.item_batch_management == \"1\" && balanceData.batch_id\n            ? this.db.collection(\"fifo_costing_history\").where({\n                material_id: materialData.id,\n                batch_id: balanceData.batch_id,\n              })\n            : this.db\n                .collection(\"fifo_costing_history\")\n                .where({ material_id: materialData.id });\n\n        const fifoResponse = await fifoQuery.get();\n        if (!fifoResponse || !fifoResponse.data) {\n          throw new Error(\"Failed to retrieve FIFO costing data\");\n        }\n\n        const fifoData = Array.isArray(fifoResponse.data)\n          ? fifoResponse.data\n          : [];\n\n        if (qtyChangeValue > 0) {\n          // Receipt - Create a new FIFO layer\n          const latestSequence =\n            fifoData.length > 0\n              ? Math.max(...fifoData.map((record) => record.fifo_sequence || 0))\n              : 0;\n\n          await this.db.collection(\"fifo_costing_history\").add({\n            material_id: materialData.id,\n            batch_id:\n              materialData.item_batch_management == \"1\"\n                ? balanceData.batch_id\n                : null,\n            plant_id: plantId,\n            organization_id: organizationId,\n            fifo_initial_quantity: this.roundQty(qtyChangeValue),\n            fifo_available_quantity: this.roundQty(qtyChangeValue),\n            fifo_cost_price: this.roundPrice(unitPrice),\n            fifo_sequence: latestSequence + 1,\n            created_at: new Date().toISOString(),\n          });\n        } else if (qtyChangeValue < 0) {\n          // Delivery - Reduce quantities from oldest FIFO layers first\n          let remainingDeduction = Math.abs(qtyChangeValue);\n\n          // Sort by sequence (oldest first per FIFO principle)\n          const sortedFifoData = fifoData.sort(\n            (a, b) => (a.fifo_sequence || 0) - (b.fifo_sequence || 0)\n          );\n\n          // Verify we have enough total quantity\n          const totalAvailable = this.roundQty(\n            sortedFifoData.reduce(\n              (sum, record) => sum + (record.fifo_available_quantity || 0),\n              0\n            )\n          );\n\n          if (totalAvailable < remainingDeduction) {\n            throw new Error(\n              `Insufficient FIFO quantity: available ${totalAvailable}, requested ${remainingDeduction}`\n            );\n          }\n\n          // Deduct from each layer starting with the oldest (lowest sequence)\n          for (const record of sortedFifoData) {\n            if (remainingDeduction <= 0) break;\n\n            const available = this.roundQty(\n              record.fifo_available_quantity || 0\n            );\n            if (available <= 0) continue;\n\n            const deduction = Math.min(available, remainingDeduction);\n            const newAvailable = this.roundQty(available - deduction);\n\n            await this.db\n              .collection(\"fifo_costing_history\")\n              .doc(record.id)\n              .update({\n                fifo_available_quantity: newAvailable,\n                updated_at: new Date().toISOString(),\n              });\n\n            remainingDeduction -= deduction;\n          }\n\n          if (remainingDeduction > 0) {\n            throw new Error(\n              `Insufficient FIFO quantity: remaining ${remainingDeduction} after processing all layers`\n            );\n          }\n        }\n      } else if (costingMethod === \"Fixed Cost\") {\n        console.log(\"Fixed Cost method - no costing records to update\");\n        return;\n      }\n    } catch (error) {\n      console.error(\"Detailed error in updateCostingMethod:\", {\n        message: error.message || \"Unknown error\",\n        stack: error.stack || \"No stack trace\",\n        material_id: materialData.id,\n        quantityChange,\n        plantId,\n        costing_method: materialData.material_costing_method,\n        batch_id: balanceData.batch_id,\n        subformData,\n        balanceData,\n      });\n      throw new Error(\n        `Failed to update costing method: ${error.message || \"Unknown error\"}`\n      );\n    }\n  }\n\n  // Function to get latest FIFO cost price with available quantity check\n  async getLatestFIFOCostPrice(materialData, batchId) {\n    try {\n      const query =\n        materialData.item_batch_management == \"1\" && batchId\n          ? this.db\n              .collection(\"fifo_costing_history\")\n              .where({ material_id: materialData.id, batch_id: batchId })\n          : this.db\n              .collection(\"fifo_costing_history\")\n              .where({ material_id: materialData.id });\n\n      const response = await query.get();\n      const result = response.data;\n\n      if (result && Array.isArray(result) && result.length > 0) {\n        // Sort by FIFO sequence (lowest/oldest first, as per FIFO principle)\n        const sortedRecords = result.sort(\n          (a, b) => a.fifo_sequence - b.fifo_sequence\n        );\n\n        // First look for records with available quantity\n        for (const record of sortedRecords) {\n          const availableQty = this.roundQty(\n            record.fifo_available_quantity || 0\n          );\n          if (availableQty > 0) {\n            console.log(\n              `Found FIFO record with available quantity: Sequence ${record.fifo_sequence}, Cost price ${record.fifo_cost_price}`\n            );\n            return this.roundPrice(record.fifo_cost_price || 0);\n          }\n        }\n\n        // If no records with available quantity, use the most recent record\n        console.warn(\n          `No FIFO records with available quantity found for ${materialData.id}, using most recent cost price`\n        );\n        return this.roundPrice(\n          sortedRecords[sortedRecords.length - 1].fifo_cost_price || 0\n        );\n      }\n\n      console.warn(`No FIFO records found for material ${materialData.id}`);\n      return 0;\n    } catch (error) {\n      console.error(\n        `Error retrieving FIFO cost price for ${materialData.id}:`,\n        error\n      );\n      return 0;\n    }\n  }\n\n  // Function to get Weighted Average cost price\n  async getWeightedAverageCostPrice(materialData, batchId) {\n    try {\n      const query =\n        materialData.item_batch_management == \"1\" && batchId\n          ? this.db\n              .collection(\"wa_costing_method\")\n              .where({ material_id: materialData.id, batch_id: batchId })\n          : this.db\n              .collection(\"wa_costing_method\")\n              .where({ material_id: materialData.id });\n\n      const response = await query.get();\n      const waData = response.data;\n\n      if (waData && Array.isArray(waData) && waData.length > 0) {\n        // Sort by date (newest first) to get the latest record\n        waData.sort((a, b) => {\n          if (a.created_at && b.created_at) {\n            return new Date(b.created_at) - new Date(a.created_at);\n          }\n          return 0;\n        });\n\n        return this.roundPrice(waData[0].wa_cost_price || 0);\n      }\n\n      console.warn(\n        `No weighted average records found for material ${materialData.id}`\n      );\n      return 0;\n    } catch (error) {\n      console.error(\n        `Error retrieving WA cost price for ${materialData.id}:`,\n        error\n      );\n      return 0;\n    }\n  }\n\n  async getFixedCostPrice(materialId) {\n    const query = this.db.collection(\"Item\").where({ id: materialId });\n    const response = await query.get();\n    const result = response.data;\n    return this.roundPrice(result[0].purchase_unit_price || 0);\n  }\n\n  async recordInventoryMovement(\n    materialData,\n    movementType,\n    balance,\n    allData,\n    subformData,\n    organizationId\n  ) {\n    console.log(\"recordInventoryMovement inputs:\", {\n      materialData,\n      movementType,\n      balance,\n      subformData,\n    });\n\n    const originalQty =\n      balance.sm_quantity || subformData.received_quantity || 0;\n    const convertedQty =\n      balance.quantity_converted ||\n      subformData.quantity_converted ||\n      originalQty;\n    const effectiveUom =\n      balance.effective_uom ||\n      subformData.effective_uom ||\n      materialData.based_uom;\n\n    console.log(\n      `recordInventoryMovement: item ${materialData.id}, effectiveUom: ${effectiveUom}, originalQty: ${originalQty}, convertedQty: ${convertedQty}`\n    );\n\n    if (!effectiveUom) {\n      throw new Error(\n        `Effective UOM is undefined for item ${materialData.id} in inventory movement`\n      );\n    }\n\n    let unitPrice =\n      balance.unit_price && balance.unit_price !== 0\n        ? balance.unit_price\n        : subformData.unit_price && subformData.unit_price !== 0\n        ? subformData.unit_price\n        : materialData.purchase_unit_price || 0;\n\n    console.log(\"unitPrice JN\", unitPrice);\n\n    if (materialData.material_costing_method === \"First In First Out\") {\n      // Get unit price from latest FIFO sequence\n      const fifoCostPrice = await this.getLatestFIFOCostPrice(\n        materialData,\n        balance.batch_id\n      );\n      unitPrice = this.roundPrice(fifoCostPrice);\n    } else if (materialData.material_costing_method === \"Weighted Average\") {\n      // Get unit price from WA cost price\n      const waCostPrice = await this.getWeightedAverageCostPrice(\n        materialData,\n        balance.batch_id\n      );\n      unitPrice = this.roundPrice(waCostPrice);\n    } else if (materialData.material_costing_method === \"Fixed Cost\") {\n      // Get unit price from Fixed Cost\n      const fixedCostPrice = await this.getFixedCostPrice(materialData.id);\n      unitPrice = this.roundPrice(fixedCostPrice);\n    } else {\n      return Promise.resolve();\n    }\n\n    let receiptUnitPrice = unitPrice;\n    if (movementType === \"Miscellaneous Receipt\") {\n      receiptUnitPrice =\n        balance.unit_price && balance.unit_price !== 0\n          ? balance.unit_price\n          : subformData.unit_price && subformData.unit_price !== 0\n          ? subformData.unit_price\n          : materialData.purchase_unit_price || 0;\n    }\n\n    const formattedUnitPrice = this.roundPrice(\n      movementType === \"Miscellaneous Receipt\" ? receiptUnitPrice : unitPrice\n    );\n    const formattedConvertedQty = this.roundQty(convertedQty);\n    const formattedOriginalQty = this.roundQty(originalQty);\n\n    const baseMovementData = {\n      transaction_type: \"SM\",\n      trx_no: allData.stock_movement_no,\n      unit_price: formattedUnitPrice,\n      total_price: this.roundPrice(formattedUnitPrice * formattedConvertedQty),\n      quantity: formattedOriginalQty,\n      item_id: materialData.id,\n      inventory_category: balance.category || subformData.category,\n      uom_id: effectiveUom,\n      base_qty: formattedConvertedQty,\n      base_uom_id: materialData.based_uom,\n      batch_number_id:\n        materialData.item_batch_management == \"1\" ? balance.batch_id : null,\n      costing_method_id: materialData.material_costing_method,\n      plant_id: allData.issuing_operation_faci,\n      created_at: new Date(),\n      organization_id: organizationId,\n    };\n\n    switch (movementType) {\n      case \"Location Transfer\":\n        let productionOrderNo = null;\n        if (allData.is_production_order === 1) {\n          const productionOrder = await this.db\n            .collection(\"production_order\")\n            .where({\n              id: allData.production_order_id,\n            })\n            .get();\n          productionOrderNo =\n            productionOrder.data[0]?.production_order_no || null;\n          console.log(\"Production Order No:\", productionOrderNo);\n        }\n        const outMovement = {\n          ...baseMovementData,\n          movement: \"OUT\",\n          parent_trx_no: productionOrderNo,\n          bin_location_id: balance.location_id,\n          inventory_category: \"Unrestricted\",\n        };\n        const inMovement = {\n          ...baseMovementData,\n          movement: \"IN\",\n          bin_location_id: subformData.location_id,\n          parent_trx_no: productionOrderNo,\n          inventory_category: \"Unrestricted\",\n        };\n        const [outResult, inResult] = await Promise.all([\n          this.db.collection(\"inventory_movement\").add(outMovement),\n          this.db.collection(\"inventory_movement\").add(inMovement),\n        ]);\n        return [outResult, inResult];\n\n      case \"Miscellaneous Issue\":\n      case \"Disposal/Scrap\":\n        const outData = {\n          ...baseMovementData,\n          movement: \"OUT\",\n          bin_location_id: balance.location_id,\n        };\n        return await this.db.collection(\"inventory_movement\").add(outData);\n\n      case \"Miscellaneous Receipt\":\n        const inData = {\n          ...baseMovementData,\n          movement: \"IN\",\n          bin_location_id: subformData.location_id || balance.location_id,\n          batch_number_id:\n            materialData.item_batch_management == \"1\"\n              ? baseMovementData.batch_number_id\n              : null,\n        };\n        return await this.db.collection(\"inventory_movement\").add(inData);\n\n      case \"Inventory Category Transfer Posting\":\n        const outMovementICT = {\n          ...baseMovementData,\n          movement: \"OUT\",\n          inventory_category: balance.category_from,\n          bin_location_id: balance.location_id,\n        };\n        const inMovementICT = {\n          ...baseMovementData,\n          movement: \"IN\",\n          inventory_category: balance.category_to,\n          bin_location_id: balance.location_id,\n        };\n        const [outResultICT, inResultICT] = await Promise.all([\n          this.db.collection(\"inventory_movement\").add(outMovementICT),\n          this.db.collection(\"inventory_movement\").add(inMovementICT),\n        ]);\n        return [outResultICT, inResultICT];\n\n      default:\n        const movement =\n          movementType === \"Inter Operation Facility Transfer\" ? \"IN\" : \"OUT\";\n        const binLocationId =\n          movement === \"IN\"\n            ? subformData.location_id || balance.location_id\n            : balance.location_id;\n        const movementData = {\n          ...baseMovementData,\n          movement,\n          bin_location_id: binLocationId,\n        };\n        return await this.db.collection(\"inventory_movement\").add(movementData);\n    }\n  }\n\n  async preCheckQuantitiesAndCosting(allData, context) {\n    try {\n      console.log(\"Starting preCheckQuantitiesAndCosting with data:\", allData);\n\n      // Step 1: Validate top-level required fields\n      try {\n        const requiredTopLevelFields = [\n          \"stock_movement_no\",\n          \"movement_type\",\n          \"issue_date\",\n          \"issuing_operation_faci\",\n        ];\n        this.validateRequiredFields(allData, requiredTopLevelFields);\n      } catch (error) {\n        // Show required fields error as an alert\n        if (context && context.parentGenerateForm) {\n          context.parentGenerateForm.$alert(\n            error.message,\n            \"Missing Required Fields\",\n            {\n              confirmButtonText: \"OK\",\n              type: \"warning\",\n            }\n          );\n        } else {\n          alert(error.message);\n        }\n        throw error; // Stop further processing\n      }\n\n      // Step 2: Get movement type details\n      const movementType = allData.movement_type;\n\n      // Step 3: Validate subform data\n      const subformData = allData.stock_movement;\n      if (!subformData || subformData.length === 0) {\n        throw new Error(\"Stock movement items are required\");\n      }\n\n      // Step 4: Perform item validations and quantity checks\n      await this.preValidateItems(subformData, movementType, allData);\n\n      // Step 5: Check quantities and costing records for deduction movements\n      for (const item of subformData) {\n        const materialResponse = await this.db\n          .collection(\"Item\")\n          .where({ id: item.item_selection })\n          .get();\n        const materialData = materialResponse.data[0];\n        if (!materialData) {\n          throw new Error(`Material not found: ${item.item_selection}`);\n        }\n        if (!materialData.based_uom) {\n          throw new Error(\n            `Base UOM is missing for item ${item.item_selection}`\n          );\n        }\n        const balancesToProcess =\n          allData.balance_index?.filter(\n            (balance) => balance.sm_quantity && balance.sm_quantity > 0\n          ) || [];\n\n        if (\n          [\n            \"Miscellaneous Issue\",\n            \"Disposal/Scrap\",\n            \"Location Transfer\",\n            \"Inventory Category Transfer Posting\",\n          ].includes(movementType)\n        ) {\n          for (const balance of balancesToProcess) {\n            const collectionName =\n              materialData.item_batch_management == \"1\"\n                ? \"item_batch_balance\"\n                : \"item_balance\";\n            const balanceResponse = await this.db\n              .collection(collectionName)\n              .where({\n                material_id: materialData.id,\n                location_id: balance.location_id,\n              })\n              .get();\n            const balanceData = balanceResponse.data[0];\n\n            // if (!balanceData) {\n            //     throw new Error(`No existing balance found for item ${item.item_selection} at location ${balance.location_id}`);\n            // }\n\n            const categoryField =\n              movementType === \"Location Transfer\"\n                ? this.categoryMap[\"Unrestricted\"]\n                : this.categoryMap[\n                    balance.category || subformData.category || \"Unrestricted\"\n                  ];\n            const currentQty = balanceData[categoryField] || 0;\n            const requestedQty =\n              balance.quantity_converted || balance.sm_quantity;\n\n            if (currentQty < requestedQty) {\n              throw new Error(\n                `Insufficient quantity in ${\n                  balance.category || \"Unrestricted\"\n                } for item ${item.item_selection} at location ${\n                  balance.location_id\n                }. Available: ${currentQty}, Requested: ${requestedQty}`\n              );\n            }\n\n            // Step 6: Check costing records for deduction\n            if (\n              [\"Miscellaneous Issue\", \"Disposal/Scrap\"].includes(movementType)\n            ) {\n              const costingMethod = materialData.material_costing_method;\n              if (!costingMethod) {\n                throw new Error(\n                  `Costing method not defined for item ${item.item_selection}`\n                );\n              }\n\n              if (costingMethod === \"Weighted Average\") {\n                const waQuery =\n                  materialData.item_batch_management == \"1\" && balance.batch_id\n                    ? this.db.collection(\"wa_costing_method\").where({\n                        material_id: materialData.id,\n                        batch_id: balance.batch_id,\n                        plant_id: allData.issuing_operation_faci,\n                      })\n                    : this.db.collection(\"wa_costing_method\").where({\n                        material_id: materialData.id,\n                        plant_id: allData.issuing_operation_faci,\n                      });\n\n                const waResponse = await waQuery.get();\n                if (!waResponse.data || waResponse.data.length === 0) {\n                  throw new Error(\n                    `No costing record found for deduction for item ${item.item_selection} (Weighted Average)`\n                  );\n                }\n\n                const waData = waResponse.data[0];\n                if ((waData.wa_quantity || 0) < requestedQty) {\n                  throw new Error(\n                    `Insufficient WA quantity for item ${item.item_selection}. Available: ${waData.wa_quantity}, Requested: ${requestedQty}`\n                  );\n                }\n              } else if (costingMethod === \"First In First Out\") {\n                const fifoQuery =\n                  materialData.item_batch_management == \"1\" && balance.batch_id\n                    ? this.db.collection(\"fifo_costing_history\").where({\n                        material_id: materialData.id,\n                        batch_id: balance.batch_id,\n                      })\n                    : this.db\n                        .collection(\"fifo_costing_history\")\n                        .where({ material_id: materialData.id });\n\n                const fifoResponse = await fifoQuery.get();\n                if (!fifoResponse.data || fifoResponse.data.length === 0) {\n                  throw new Error(\n                    `No costing record found for deduction for item ${item.item_selection} (FIFO)`\n                  );\n                }\n\n                const fifoData = fifoResponse.data;\n                const totalAvailable = fifoData.reduce(\n                  (sum, record) => sum + (record.fifo_available_quantity || 0),\n                  0\n                );\n                if (totalAvailable < requestedQty) {\n                  throw new Error(\n                    `Insufficient FIFO quantity for item ${item.item_selection}. Available: ${totalAvailable}, Requested: ${requestedQty}`\n                  );\n                }\n              }\n            }\n          }\n        }\n      }\n\n      console.log(\"⭐ Validation successful - all checks passed\");\n      return true;\n    } catch (error) {\n      // Step 8: Handle errors (excluding required fields, which are handled above)\n      console.error(\"Error in preCheckQuantitiesAndCosting:\", error.message);\n      // if (error.message.includes('Please fill in all required fields')) {\n      //     // Skip popup for required fields errors, as they are already handled as alerts\n      //     throw error;\n      // }\n      if (context && context.parentGenerateForm) {\n        context.parentGenerateForm.$alert(error.message, \"Validation Error\", {\n          confirmButtonText: \"OK\",\n          type: \"error\",\n        });\n      } else {\n        alert(error.message);\n      }\n      console.error(\"❌ Validation failed with error:\", error.message);\n      throw error;\n    }\n  }\n}\n\n// Modified processFormData to use preCheckQuantitiesAndCosting\nasync function processFormData(db, formData, context, organizationId) {\n  const adjuster = new StockAdjuster(db);\n\n  // Properly bind all necessary context functions\n  if (context) {\n    adjuster.getVarGlobal = context.getVarGlobal.bind(context);\n    adjuster.getVarSystem = context.getVarSystem.bind(context);\n    adjuster.runWorkflow = context.runWorkflow.bind(context);\n    adjuster.parentGenerateForm = context.parentGenerateForm;\n  }\n\n  try {\n    console.log(\"🔍 Running pre-validation checks\");\n    const isValid = await adjuster.preCheckQuantitiesAndCosting(\n      formData,\n      context\n    );\n    console.log(\"✅ Validation result:\", isValid);\n\n    if (isValid) {\n      console.log(\"📝 Processing stock adjustment\");\n      const results = await adjuster.processStockAdjustment(\n        formData,\n        organizationId\n      );\n      console.log(\"✓ Stock adjustment completed\");\n      return results;\n    }\n  } catch (error) {\n    console.error(\"❌ Error in processFormData:\", error);\n    throw error;\n  } finally {\n    // Don't close dialog here - we'll handle it in the main handler\n    console.log(\"⚙️ ProcessFormData completed (finally block)\");\n  }\n}\n\n// Example usage remains the same\nconst self = this;\nconst allData = self.getValues();\nlet organizationId = this.getVarGlobal(\"deptParentId\");\nconsole.log(\"organization id\", organizationId);\nif (organizationId === \"0\") {\n  organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n}\n\nconsole.log(\"Starting Save as Completed process\");\nself.showLoading();\n\n// Improved handler with proper error management\nprocessFormData(db, allData, self, organizationId)\n  .then((results) => {\n    console.log(\"ProcessFormData completed successfully\", results);\n    if (allData.page_status === \"Add\") {\n      self.$message.success(\"New stock movement created successfully\");\n    } else if (allData.page_status === \"Edit\") {\n      self.$message.success(\"Stock movement updated successfully\");\n    }\n\n    // Explicit UI cleanup after successful completion\n    self.hideLoading();\n    if (\n      self.parentGenerateForm &&\n      self.parentGenerateForm.$refs.SuPageDialogRef\n    ) {\n      self.parentGenerateForm.$refs.SuPageDialogRef.hide();\n      self.parentGenerateForm.refresh();\n    }\n  })\n  .catch((error) => {\n    console.error(\"Error in Save as Completed:\", error);\n    self.hideLoading();\n    self.$message.error(error.message || \"An unknown error occurred\");\n\n    // Still try to clean up UI on error\n    if (\n      self.parentGenerateForm &&\n      self.parentGenerateForm.$refs.SuPageDialogRef\n    ) {\n      self.parentGenerateForm.$refs.SuPageDialogRef.hide();\n    }\n  });\n",
        "type": "js"
      },
      {
        "key": "qcb8dogc",
        "name": "onClick_post",
        "func": "const data = this.getValues();\nconst page_status = data.page_status;\nconst stockMovementId = data.id;\n\nconst closeDialog = () => {\n  if (this.parentGenerateForm) {\n    this.parentGenerateForm.$refs.SuPageDialogRef.hide();\n    this.parentGenerateForm.refresh();\n    this.hideLoading();\n  }\n};\n\nthis.showLoading();\n\nlet organizationId = this.getVarGlobal(\"deptParentId\");\nif (organizationId === \"0\") {\n  organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n}\n\nconst {\n  issue_date,\n  stock_movement_no,\n  movement_type,\n  movement_type_id,\n  movement_reason,\n  issued_by,\n  issuing_operation_faci,\n  remarks,\n  delivery_method,\n  reference_documents,\n  receiving_operation_faci,\n  movement_id,\n  is_production_order,\n  production_order_id,\n  driver_name,\n  driver_contact_no,\n  vehicle_no,\n  pickup_date,\n  courier_company,\n  shipping_date,\n  freight_charges,\n  tracking_number,\n  est_arrival_date,\n  delivery_cost,\n  est_delivery_date,\n  shipping_company,\n  date_qn0dl3t6,\n  input_77h4nsq8,\n  shipping_method,\n  tracking_no,\n  stock_movement,\n  balance_index,\n  sm_item_balance,\n  table_item_balance,\n  material_id,\n  material_name,\n  row_index,\n} = data;\n\nconst entry = {\n  stock_movement_status: \"Completed\",\n  organization_id: organizationId,\n  posted_status: \"Pending Post\",\n  issue_date,\n  stock_movement_no,\n  movement_type,\n  movement_type_id,\n  movement_reason,\n  issued_by,\n  issuing_operation_faci,\n  remarks,\n  delivery_method,\n  reference_documents,\n  receiving_operation_faci,\n  movement_id,\n  is_production_order,\n  production_order_id,\n  driver_name,\n  driver_contact_no,\n  vehicle_no,\n  pickup_date,\n  courier_company,\n  shipping_date,\n  freight_charges,\n  tracking_number,\n  est_arrival_date,\n  delivery_cost,\n  est_delivery_date,\n  shipping_company,\n  date_qn0dl3t6,\n  input_77h4nsq8,\n  shipping_method,\n  tracking_no,\n  stock_movement,\n  balance_index,\n  sm_item_balance,\n  table_item_balance,\n  material_id,\n  material_name,\n  row_index,\n};\n\ndb.collection(\"stock_movement\")\n  .doc(stockMovementId)\n  .update(entry)\n  .then(async () => {\n    await this.runWorkflow(\n      \"1910197713380311041\",\n      { key: \"value\" },\n      (res) => {\n        console.log(\"成功结果：\", res);\n        this.$message.success(\"Stock Movement posted successfully.\");\n      },\n      (err) => {\n        console.error(\"失败结果：\", err);\n        this.$message.error(err);\n      }\n    );\n  })\n  .then(() => {\n    closeDialog();\n  })\n  .catch((error) => {\n    closeDialog();\n    this.$message.error(error);\n  });\n",
        "type": "js"
      },
      {
        "key": "bfcrovt9",
        "name": "onFocus_bfcrovt9",
        "func": "",
        "type": "rule"
      },
      {
        "key": "ja69og58",
        "name": "onClick_ja69og58",
        "func": "",
        "type": "rule"
      },
      {
        "key": "5g7lz3wl",
        "name": "onBlur_5g7lz3wl",
        "func": "",
        "type": "rule"
      },
      {
        "key": "r8t26tyr",
        "name": "onFocus_r8t26tyr",
        "func": "",
        "type": "rule"
      },
      {
        "key": "kwe2etps",
        "name": "onChange_kwe2etps",
        "func": "console.log('arguments[0]', arguments[0])",
        "type": "js"
      },
      {
        "key": "fksr8haf",
        "name": "onClick_selectCategory_mainTable",
        "func": "(async () => {\n  const allData = this.getValues();\n  const movementType = allData.movement_type;\n  const rowIndex = arguments[0]?.rowIndex;\n  console.log(\"rowIndex\", rowIndex)\n  const movementTypeCategories = {\n    \"Inter Operation Facility Transfer\": [\n      {\n        value: \"Unrestricted\",\n        label: \"Unrestricted\",\n      },\n      {\n        value: \"Quality Inspection\",\n        label: \"Quality Inspection\",\n      },\n      {\n        value: \"Blocked\",\n        label: \"Blocked\",\n      },\n    ],\n    \"Inter Operation Facility Transfer (Receiving)\": [\n      {\n        value: \"Unrestricted\",\n        label: \"Unrestricted\",\n      },\n      {\n        value: \"Quality Inspection\",\n        label: \"Quality Inspection\",\n      },\n      {\n        value: \"Blocked\",\n        label: \"Blocked\",\n      },\n    ],\n    \"Location Transfer\": [\n      {\n        value: \"Unrestricted\",\n        label: \"Unrestricted\",\n      },\n      {\n        value: \"Quality Inspection\",\n        label: \"Quality Inspection\",\n      },\n      {\n        value: \"Blocked\",\n        label: \"Blocked\",\n      },\n      {\n        value: \"Reserved\",\n        label: \"Reserved\",\n      },\n    ],\n    \"Miscellaneous Issue\": [\n      {\n        value: \"Unrestricted\",\n        label: \"Unrestricted\",\n      },\n    ],\n    \"Miscellaneous Receipt\": [\n      {\n        value: \"Unrestricted\",\n        label: \"Unrestricted\",\n      },\n      {\n        value: \"Quality Inspection\",\n        label: \"Quality Inspection\",\n      },\n      {\n        value: \"Blocked\",\n        label: \"Blocked\",\n      },\n    ],\n    \"Disposal/Scrap\": [\n      {\n        value: \"Unrestricted\",\n        label: \"Unrestricted\",\n      },\n      {\n        value: \"Quality Inspection\",\n        label: \"Quality Inspection\",\n      },\n      {\n        value: \"Blocked\",\n        label: \"Blocked\",\n      },\n    ],\n    \"Inventory Category Transfer Posting\": [\n      {\n        value: \"Unrestricted\",\n        label: \"Unrestricted\",\n      },\n      {\n        value: \"Quality Inspection\",\n        label: \"Quality Inspection\",\n      },\n      {\n        value: \"Blocked\",\n        label: \"Blocked\",\n      },\n    ],\n  };\n\n  const allowedCategories = movementTypeCategories[movementType];\n\n  await this.setOptionData(\n    [`stock_movement.${rowIndex}.category`],\n    allowedCategories\n  );\n\n  console.log(\"allowedCategories\", allowedCategories);\n})();\n",
        "type": "js"
      },
      {
        "key": "qx2wq86n",
        "name": "onChange_qx2wq86n",
        "func": "",
        "type": "rule"
      },
      {
        "key": "mtwvoslq",
        "name": "onChange_mtwvoslq",
        "func": "",
        "type": "rule"
      },
      {
        "key": "g8bubh0a",
        "name": "onFocus_g8bubh0a",
        "func": "",
        "type": "rule"
      }
    ],
    "uniqueGroup": [],
    "params": [
      {
        "key": "ak4zr6ah",
        "name": "page_status",
        "title": "",
        "description": "",
        "bsonType": "string",
        "isExpand": false,
        "children": []
      },
      {
        "key": "cmqni73o",
        "name": "stock_movement_no",
        "title": "",
        "description": "",
        "bsonType": "string",
        "isExpand": false,
        "children": []
      }
    ],
    "deps": {},
    "paramsDeps": {},
    "styleSheets": ".padding{\n  padding:20px\n}\n\n.max-width{\n  max-width:300px\n}\n\n.margin{\n  margin-left: 15px\n}\n\n.marginright{\n  margin-right: 20px;\n  margin-top : 3px;\n}\n\n.fixbutton{\n  position: fixed;\n  bottom: 0;\n  right: 0;\n}\n\n\n\n",
    "dataSource": []
  }
}
