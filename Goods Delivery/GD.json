{
  "list": [
    {
      "name": "Flex",
      "type": "flex",
      "el": "su-fm-flex",
      "mainIcon": "自动布局",
      "typeIcon": "自动布局",
      "icon": "icon-zhediemianban",
      "group": "Design",
      "groupSort": 6,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "title": "",
        "customClass": "",
        "hidden": false,
        "recursive": false,
        "recursiveStyleFx": "",
        "slotTarget": "",
        "defaultValue": "",
        "flexDirection": "row",
        "flexWrap": "nowrap",
        "alignItems": "",
        "justifyContent": "",
        "hGap": "",
        "vGap": "",
        "grid": {
          "row": {
            "value": "",
            "visible": true
          },
          "col": {
            "value": "",
            "visible": true
          },
          "use": false
        },
        "padding": ["", "", "", ""],
        "margin": ["", "", "", ""],
        "boxSizing": "border-box",
        "width": "",
        "height": "",
        "radius": ["", "", "", ""],
        "position": "",
        "positions": ["", "", "", ""],
        "zIndex": "",
        "flex": "",
        "flexGrow": "",
        "flexShrink": "",
        "fills": [],
        "borders": [],
        "effects": [],
        "states": [],
        "hoverClass": "",
        "overflow": "",
        "styleFx": "",
        "behave": "",
        "remoteFunc": "func_mdwk5w3a",
        "remoteOption": "option_mdwk5w3a",
        "tableColumn": false,
        "subform": false,
        "props": {},
        "datasource": {
          "rules": {
            "collectionId": "",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "remote": false,
        "remoteType": "datasource",
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        }
      },
      "list": [
        {
          "name": "",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Goods Delivery",
            "customClass": "marginright",
            "hidden": false,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "",
            "color": "#333333",
            "fontSize": "24px",
            "fontWeight": "700",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_y4rgcxwx",
            "remoteOption": "option_y4rgcxwx",
            "tableColumn": false,
            "subform": false,
            "dynamicValueFx": "",
            "dynamicValueType": "fx",
            "isDynamicValue": false
          },
          "events": {
            "onClick": ""
          },
          "key": "y4rgcxwx",
          "model": "goods_delivery_title",
          "rules": []
        },
        {
          "name": "Draft Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Draft Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .draft-button {\n            padding: 0 20px;\n            border: 2px solid #8C95A4;\n            background-color: #D0D5DD;\n            color: #4D5A74;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"draft-button\">Draft</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_2333cpso",
            "remoteOption": "option_2333cpso",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true
          },
          "events": {
            "onChange": ""
          },
          "key": "2333cpso",
          "model": "draft_status",
          "rules": []
        },
        {
          "name": "Created status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Draft Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #C6DFFF;\n        }\n\n        .created-button {\n            padding: 0 20px;\n            border: 2px solid #036DF8;\n            background-color: #C6DFFF;\n            color: #4D5A74;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"created-button\">Created</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_2333cpso",
            "remoteOption": "option_2333cpso",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true
          },
          "events": {
            "onChange": ""
          },
          "key": "g4fgeq5k",
          "model": "created_status",
          "rules": []
        },
        {
          "name": "Completed Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Completed Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .completed-button {\n            padding: 0 20px;\n            border: 2px solid #00AE00;\n            background-color: #C5F5C5;\n            color: #016701;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"completed-button\">Completed</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_2333cpso",
            "remoteOption": "option_2333cpso",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true
          },
          "events": {
            "onChange": ""
          },
          "key": "dltj9f0j",
          "model": "completed_status",
          "rules": []
        },
        {
          "name": "Cancel Status",
          "type": "html",
          "icon": "icon-html",
          "mainIcon": "HTML",
          "typeIcon": "HTML",
          "group": "View",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Cancelled Button</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            background-color: #f4f4f9;\n        }\n\n        .cancelled-button {\n            padding: 0 20px;\n            border: 2px solid #F90A0A;\n            background-color: #FDC4C4;\n            color: #A30505;\n            font-size: 14px;\n            font-family: Arial, sans-serif;\n            border-radius: 20px;\n            cursor: default;\n            transition: background-color 0.3s;\n            width: max-content;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"cancelled-button\">Cancelled</div>\n</body>\n</html>",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "required": false,
            "width": "",
            "tip": "",
            "remoteFunc": "func_2333cpso",
            "remoteOption": "option_2333cpso",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true
          },
          "events": {
            "onChange": ""
          },
          "key": "1xiumwkt",
          "model": "cancel_status",
          "rules": []
        }
      ],
      "events": {
        "onClick": ""
      },
      "key": "mdwk5w3a",
      "model": "flex_svdwewwe",
      "rules": []
    },
    {
      "name": "Page Status",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_sd2kmalk",
        "remoteOption": "option_sd2kmalk",
        "tableColumn": false,
        "subform": false,
        "dynamicValueType": "fx",
        "isDynamicValue": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "huejkepf",
      "model": "page_status",
      "rules": []
    },
    {
      "name": "GD Status",
      "type": "select",
      "mainIcon": "下拉单选",
      "typeIcon": "下拉单选",
      "icon": "icon-select",
      "group": "Select",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-select",
      "options": {
        "defaultValue": "",
        "multiple": false,
        "disabled": false,
        "clearable": false,
        "placeholder": "",
        "required": false,
        "requiredMessage": "",
        "validatorCheck": false,
        "validator": "",
        "width": "",
        "options": [
          {
            "value": "Option 1",
            "label": "Option 1"
          },
          {
            "value": "Option 2",
            "label": "Option 2"
          },
          {
            "value": "Option 3",
            "label": "Option 3"
          }
        ],
        "remote": true,
        "remoteType": "innerdatasource",
        "remoteOption": "option_kier9mkm",
        "filterable": false,
        "pagingEnabled": true,
        "remoteOptions": [],
        "props": {
          "value": "dict_key",
          "label": "dict_key",
          "cascade": "",
          "children": "children",
          "image": "",
          "icon": ""
        },
        "remoteFunc": "func_kier9mkm",
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "customProps": {},
        "tip": "",
        "tableColumn": false,
        "subform": false,
        "paging_enabled": 0,
        "paging_way": "Pagination",
        "page_size": 10,
        "more_fields": [],
        "columns": [],
        "datasource": {
          "source": "系统字典(勿删):Table:1897577528487428098",
          "rules": {
            "collectionId": "1897577528487428098",
            "list": [
              {
                "id": 1747835469005,
                "parentId": 1747835469006,
                "isTop": true,
                "type": "branch",
                "operator": "all",
                "prop": "",
                "valueType": "",
                "value": "",
                "level": 1,
                "children": [
                  {
                    "id": 1723795236686,
                    "parentId": 1747835469005,
                    "isTop": false,
                    "prop": "parent_id",
                    "operator": "numberEqual",
                    "valueType": "value",
                    "value": "1914242988707749889",
                    "type": "leaf",
                    "level": 2,
                    "propLabel": "父主键",
                    "valueLabel": "",
                    "operatorLabel": "等于",
                    "valueTypeLabel": "值"
                  },
                  {
                    "id": 1747835469008,
                    "isTop": false,
                    "parentId": 1747835469005,
                    "type": "branch",
                    "operator": "any",
                    "level": 2,
                    "children": [
                      {
                        "id": 1747835469007,
                        "parentId": 1747835469008,
                        "isTop": false,
                        "prop": "dict_key",
                        "operator": "equal",
                        "valueType": "value",
                        "value": "Draft",
                        "type": "leaf",
                        "level": 3,
                        "propLabel": "字典值",
                        "valueLabel": "",
                        "operatorLabel": "等于",
                        "valueTypeLabel": "值"
                      },
                      {
                        "id": 1747835469010,
                        "parentId": 1747835469008,
                        "isTop": false,
                        "prop": "dict_key",
                        "operator": "equal",
                        "valueType": "value",
                        "value": "Created",
                        "type": "leaf",
                        "level": 3,
                        "propLabel": "字典值",
                        "valueLabel": "",
                        "operatorLabel": "等于",
                        "valueTypeLabel": "值"
                      },
                      {
                        "id": 1747835469009,
                        "parentId": 1747835469008,
                        "isTop": false,
                        "prop": "dict_key",
                        "operator": "equal",
                        "valueType": "value",
                        "value": "Completed",
                        "type": "leaf",
                        "level": 3,
                        "propLabel": "字典值",
                        "valueLabel": "",
                        "operatorLabel": "等于",
                        "valueTypeLabel": "值"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        },
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        }
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "kier9mkm",
      "model": "gd_status",
      "rules": []
    },
    {
      "name": "SI Status",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_sd2kmalk",
        "remoteOption": "option_sd2kmalk",
        "tableColumn": false,
        "subform": false,
        "dynamicValueType": "fx",
        "isDynamicValue": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "4i9ckdk8",
      "model": "si_status",
      "rules": []
    },
    {
      "name": "SR Status",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_sd2kmalk",
        "remoteOption": "option_sd2kmalk",
        "tableColumn": false,
        "subform": false,
        "dynamicValueType": "fx",
        "isDynamicValue": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "qzhrlwhw",
      "model": "sr_status",
      "rules": []
    },
    {
      "name": "Has SR",
      "type": "switch",
      "mainIcon": "开关",
      "typeIcon": "开关",
      "icon": "icon-switch",
      "group": "Select",
      "groupSort": 8,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": 0,
        "required": false,
        "requiredMessage": "",
        "validatorCheck": false,
        "validator": "",
        "disabled": false,
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "width": "",
        "customProps": {},
        "tip": "",
        "booleanValueMode": false,
        "alignright": false,
        "checkboxMode": false,
        "remoteFunc": "func_2cw9c5ob",
        "remoteOption": "option_2cw9c5ob",
        "tableColumn": false,
        "subform": false
      },
      "events": {
        "onChange": ""
      },
      "key": "2cw9c5ob",
      "model": "has_sr",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Plant",
              "type": "treeselect",
              "mainIcon": "下拉树状单选",
              "typeIcon": "下拉树状单选",
              "icon": "icon-shuxuanzeqi",
              "group": "Select",
              "groupSort": 4,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "width": "",
                "placeholder": "",
                "disabled": false,
                "clearable": true,
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1",
                    "children": [
                      {
                        "value": "Option 1 - children",
                        "label": "Option 1 - children"
                      }
                    ]
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2",
                    "children": [
                      {
                        "value": "Option 2 - children",
                        "label": "Option 2 - children"
                      }
                    ]
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_49s6nfv7",
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "dept_name",
                  "children": "children",
                  "cascade": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_49s6nfv7",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "required": true,
                "validatorCheck": false,
                "validator": "",
                "multiple": false,
                "filterable": true,
                "checkStrictly": false,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 0,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "组织机构(勿删勿改):Table:1789995126399348747",
                  "rules": {
                    "collectionId": "1789995126399348747",
                    "list": [
                      {
                        "id": 1747540652719,
                        "parentId": 1747540652720,
                        "isTop": true,
                        "type": "branch",
                        "operator": "any",
                        "prop": "",
                        "valueType": "",
                        "value": "",
                        "level": 1,
                        "children": [
                          {
                            "id": 1747540652722,
                            "isTop": false,
                            "parentId": 1747540652719,
                            "type": "branch",
                            "operator": "any",
                            "level": 2,
                            "children": [
                              {
                                "id": 1723795236686,
                                "parentId": 1747540652722,
                                "isTop": false,
                                "prop": "id",
                                "operator": "numberEqual",
                                "valueType": "field",
                                "value": "{{system:deptIds}}",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "主键ID",
                                "valueLabel": "",
                                "operatorLabel": "等于",
                                "valueTypeLabel": "字段"
                              },
                              {
                                "id": 1747540652723,
                                "parentId": 1747540652722,
                                "isTop": false,
                                "prop": "id",
                                "operator": "numberEqual",
                                "valueType": "field",
                                "value": "{{global:deptParentId}}",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "主键ID",
                                "valueLabel": "",
                                "operatorLabel": "等于",
                                "valueTypeLabel": "字段"
                              }
                            ]
                          },
                          {
                            "id": 1747540652724,
                            "isTop": false,
                            "parentId": 1747540652719,
                            "type": "branch",
                            "operator": "all",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747540652721,
                                "parentId": 1747540652724,
                                "isTop": false,
                                "prop": "id",
                                "operator": "in",
                                "valueType": "formula",
                                "value": "{{global:deptIdList}}.split(',')",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "主键ID",
                                "valueLabel": "",
                                "operatorLabel": "等于任意一个",
                                "valueTypeLabel": "公式"
                              },
                              {
                                "id": 1747540652725,
                                "parentId": 1747540652724,
                                "isTop": false,
                                "prop": "parent_id",
                                "operator": "numberEqual",
                                "valueType": "field",
                                "value": "{{system:deptIds}}",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "父主键",
                                "valueLabel": "",
                                "operatorLabel": "等于",
                                "valueTypeLabel": "字段"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "columns": []
              },
              "events": {
                "onChange": "euds6qdw",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "49s6nfv7",
              "model": "plant_id",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "SO Number",
              "el": "su-fm-table-select",
              "mainIcon": "数据源",
              "typeIcon": "数据源",
              "group": "Select",
              "groupSort": 4,
              "generate": "part",
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "disabled": true,
                "dataBind": true,
                "required": true,
                "validator": "",
                "hideLabel": false,
                "pageSourceId": "1924292321021071361",
                "customProps": {},
                "pagingEnabled": true,
                "multiple": false,
                "placeholder": "Select Sales Order",
                "lazyLoad": true,
                "props": {
                  "value": "id",
                  "label": "so_no",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "datasource": {
                  "source": "Sales Order:Table:1902773735979597826",
                  "rules": {
                    "collectionId": "1902773735979597826",
                    "list": [
                      {
                        "id": 1747796398126,
                        "parentId": 1747796398127,
                        "isTop": true,
                        "type": "branch",
                        "operator": "all",
                        "prop": "",
                        "valueType": "",
                        "value": "",
                        "level": 1,
                        "children": [
                          {
                            "id": 1747796398130,
                            "isTop": false,
                            "parentId": 1747796398126,
                            "type": "branch",
                            "operator": "any",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747796271935,
                                "parentId": 1747796398130,
                                "isTop": false,
                                "prop": "gd_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Fully Delivered",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "GD Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747796398131,
                                "parentId": 1747796398130,
                                "isTop": false,
                                "prop": "gd_status",
                                "operator": "isNull",
                                "valueType": "value",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "GD Status",
                                "valueLabel": "",
                                "operatorLabel": "没有值",
                                "valueTypeLabel": "值"
                              }
                            ]
                          },
                          {
                            "id": 1747796398132,
                            "isTop": false,
                            "parentId": 1747796398126,
                            "type": "branch",
                            "operator": "all",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747796398128,
                                "parentId": 1747796398132,
                                "isTop": false,
                                "prop": "so_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Draft",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "SO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747966337383,
                                "parentId": 1747796398132,
                                "isTop": false,
                                "prop": "so_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Completed",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "SO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747796398133,
                                "parentId": 1747796398132,
                                "isTop": false,
                                "prop": "so_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Cancelled",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "SO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              }
                            ]
                          },
                          {
                            "id": 1747796398134,
                            "isTop": false,
                            "parentId": 1747796398126,
                            "type": "branch",
                            "operator": "any",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747796398129,
                                "parentId": 1747796398134,
                                "isTop": false,
                                "prop": "plant_name",
                                "operator": "numberEqual",
                                "valueType": "field",
                                "value": "{{value:plant_id}}",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "Plant",
                                "valueLabel": "",
                                "operatorLabel": "等于",
                                "valueTypeLabel": "字段"
                              },
                              {
                                "id": 1747796398138,
                                "parentId": 1747796398134,
                                "isTop": false,
                                "prop": "plant_name",
                                "operator": "numberEqual",
                                "valueType": "field",
                                "value": "{{value:organization_id}}",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "Plant",
                                "valueLabel": "",
                                "operatorLabel": "等于",
                                "valueTypeLabel": "字段"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                },
                "remoteFunc": "func_i5lykcqr",
                "remoteOption": "option_i5lykcqr",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "columns": [
                  {
                    "value": "so_no",
                    "label": "SO Number",
                    "item": {
                      "bsonType": "string",
                      "defaultValue": "",
                      "description": "SO Number",
                      "encryptedKey": false,
                      "errorMessage": {
                        "format": "",
                        "pattern": "",
                        "required": ""
                      },
                      "format": "",
                      "historyKey": true,
                      "immutableKey": false,
                      "isRequired": true,
                      "key": "nfwpnnrg",
                      "name": "so_no",
                      "pattern": "",
                      "persistField": true,
                      "primaryKey": false,
                      "title": "SO Number",
                      "validator": "const page_status = this.getParamsVariables('page_status');\n\nif (page_status === 'View' || !value) {\n    callback();\n    return;\n}\n\ndb.collection(\"sales_order\")\n    .where({ so_no: value })\n    .get()\n    .then(response => {\n        const matchingSO = response.data || [];\n\n        if (matchingSO.length === 0) {\n            callback();\n            return;\n        }\n\n        if (page_status === 'Edit') {\n            const currentSoNo = this.getParamsVariables('sales_order_id');\n            const isSameSoNo = matchingSO.some(so_no => so_no.id === currentSoNo);\n            callback(isSameSoNo ? undefined : 'Sales order number already exists.');\n        } else {\n            callback('Sales order number already exists.');\n        }\n    })\n    .catch(error => {\n        console.error(\"Error checking sales order:\", error);\n        callback(\"Error validating sales order number.\");\n    });"
                    }
                  },
                  {
                    "value": "customer_name.customer_com_name",
                    "label": "Customer Name",
                    "item": {
                      "bsonType": "string",
                      "defaultValue": "",
                      "description": "Company Name",
                      "encryptedKey": false,
                      "errorMessage": {
                        "format": "",
                        "pattern": "",
                        "required": ""
                      },
                      "format": "",
                      "historyKey": false,
                      "immutableKey": false,
                      "isRequired": false,
                      "key": "jt3uf55w",
                      "name": "customer_name.customer_com_name",
                      "parent": {
                        "foreignKey": "Customer.id",
                        "multiple": false,
                        "persistField": true,
                        "primaryKey": false
                      },
                      "pattern": "",
                      "persistField": true,
                      "primaryKey": false,
                      "title": "Company Name"
                    }
                  }
                ],
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "remote": true,
                "remoteType": "innerdatasource",
                "pageId": "1924292321054625793"
              },
              "events": {
                "onChange": "24sne8o1"
              },
              "type": "custom",
              "novalid": {},
              "key": "i5lykcqr",
              "model": "fake_so_id",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "SO Number",
              "el": "su-fm-table-select",
              "mainIcon": "数据源",
              "typeIcon": "数据源",
              "group": "Select",
              "groupSort": 4,
              "generate": "part",
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": [],
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "disabled": false,
                "dataBind": true,
                "required": true,
                "validator": "",
                "hideLabel": false,
                "pageSourceId": "1922493222877601793",
                "customProps": {},
                "pagingEnabled": true,
                "multiple": true,
                "placeholder": "Select Sales Order",
                "lazyLoad": true,
                "props": {
                  "value": "id",
                  "label": "so_no",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "datasource": {
                  "source": "Sales Order:Table:1902773735979597826",
                  "rules": {
                    "collectionId": "1902773735979597826",
                    "list": [
                      {
                        "id": 1747796747984,
                        "parentId": 1747796747985,
                        "isTop": true,
                        "type": "branch",
                        "operator": "all",
                        "prop": "",
                        "valueType": "",
                        "value": "",
                        "level": 1,
                        "children": [
                          {
                            "id": 1747796747989,
                            "isTop": false,
                            "parentId": 1747796747984,
                            "type": "branch",
                            "operator": "any",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747796657645,
                                "parentId": 1747796747989,
                                "isTop": false,
                                "prop": "gd_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Fully Delivered",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "GD Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747796747990,
                                "parentId": 1747796747989,
                                "isTop": false,
                                "prop": "gd_status",
                                "operator": "isNull",
                                "valueType": "value",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "GD Status",
                                "valueLabel": "",
                                "operatorLabel": "没有值",
                                "valueTypeLabel": "值"
                              }
                            ]
                          },
                          {
                            "id": 1747796747991,
                            "isTop": false,
                            "parentId": 1747796747984,
                            "type": "branch",
                            "operator": "all",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747796747986,
                                "parentId": 1747796747991,
                                "isTop": false,
                                "prop": "so_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Draft",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "SO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747966365463,
                                "parentId": 1747796747991,
                                "isTop": false,
                                "prop": "so_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Completed",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "SO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              },
                              {
                                "id": 1747796747992,
                                "parentId": 1747796747991,
                                "isTop": false,
                                "prop": "so_status",
                                "operator": "notEqual",
                                "valueType": "value",
                                "value": "Cancelled",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "SO Status",
                                "valueLabel": "",
                                "operatorLabel": "不等于",
                                "valueTypeLabel": "值"
                              }
                            ]
                          },
                          {
                            "id": 1747796747996,
                            "isTop": false,
                            "parentId": 1747796747984,
                            "type": "branch",
                            "operator": "any",
                            "level": 2,
                            "children": [
                              {
                                "id": 1747796747987,
                                "parentId": 1747796747996,
                                "isTop": false,
                                "prop": "plant_name",
                                "operator": "numberEqual",
                                "valueType": "field",
                                "value": "{{value:plant_id}}",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "Plant",
                                "valueLabel": "",
                                "operatorLabel": "等于",
                                "valueTypeLabel": "字段"
                              },
                              {
                                "id": 1747796747997,
                                "parentId": 1747796747996,
                                "isTop": false,
                                "prop": "plant_name",
                                "operator": "numberEqual",
                                "valueType": "field",
                                "value": "{{value:organization_id}}",
                                "type": "leaf",
                                "level": 3,
                                "propLabel": "Plant",
                                "valueLabel": "",
                                "operatorLabel": "等于",
                                "valueTypeLabel": "字段"
                              }
                            ]
                          },
                          {
                            "id": 1747796747988,
                            "parentId": 1747796747984,
                            "isTop": false,
                            "prop": "customer_name",
                            "operator": "equal",
                            "valueType": "field",
                            "value": "{{value:customer_name}}",
                            "type": "leaf",
                            "level": 2,
                            "propLabel": "Customer Name",
                            "valueLabel": "",
                            "operatorLabel": "等于",
                            "valueTypeLabel": "字段"
                          }
                        ]
                      }
                    ]
                  }
                },
                "remoteFunc": "func_q8uk2k9h",
                "remoteOption": "option_q8uk2k9h",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "columns": [
                  {
                    "value": "so_no",
                    "label": "SO Number",
                    "item": {
                      "bsonType": "string",
                      "defaultValue": "",
                      "description": "SO Number",
                      "encryptedKey": false,
                      "errorMessage": {
                        "format": "",
                        "pattern": "",
                        "required": ""
                      },
                      "format": "",
                      "historyKey": true,
                      "immutableKey": false,
                      "isRequired": true,
                      "key": "nfwpnnrg",
                      "name": "so_no",
                      "pattern": "",
                      "persistField": true,
                      "primaryKey": false,
                      "title": "SO Number",
                      "validator": "const page_status = this.getParamsVariables('page_status');\n\nif (page_status === 'View' || !value) {\n    callback();\n    return;\n}\n\ndb.collection(\"sales_order\")\n    .where({ so_no: value })\n    .get()\n    .then(response => {\n        const matchingSO = response.data || [];\n\n        if (matchingSO.length === 0) {\n            callback();\n            return;\n        }\n\n        if (page_status === 'Edit') {\n            const currentSoNo = this.getParamsVariables('sales_order_id');\n            const isSameSoNo = matchingSO.some(so_no => so_no.id === currentSoNo);\n            callback(isSameSoNo ? undefined : 'Sales order number already exists.');\n        } else {\n            callback('Sales order number already exists.');\n        }\n    })\n    .catch(error => {\n        console.error(\"Error checking sales order:\", error);\n        callback(\"Error validating sales order number.\");\n    });"
                    }
                  },
                  {
                    "value": "customer_name.customer_com_name",
                    "label": "Customer Name",
                    "item": {
                      "bsonType": "string",
                      "defaultValue": "",
                      "description": "Company Name",
                      "encryptedKey": false,
                      "errorMessage": {
                        "format": "",
                        "pattern": "",
                        "required": ""
                      },
                      "format": "",
                      "historyKey": false,
                      "immutableKey": false,
                      "isRequired": false,
                      "key": "jt3uf55w",
                      "name": "customer_name.customer_com_name",
                      "parent": {
                        "foreignKey": "Customer.id",
                        "multiple": false,
                        "persistField": true,
                        "primaryKey": false
                      },
                      "pattern": "",
                      "persistField": true,
                      "primaryKey": false,
                      "title": "Company Name"
                    }
                  }
                ],
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "remote": true,
                "remoteType": "innerdatasource",
                "pageId": "1922493222974070789"
              },
              "events": {
                "onChange": "z0ki024a"
              },
              "type": "custom",
              "novalid": {},
              "key": "q8uk2k9h",
              "model": "so_id",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ]
            },
            {
              "name": "栅格布局",
              "type": "grid",
              "mainIcon": "栅格布局",
              "typeIcon": "栅格布局",
              "icon": "icon-RectangleCopy",
              "group": "Layout",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "columns": [
                {
                  "type": "col",
                  "options": {
                    "span": 12,
                    "offset": 0,
                    "push": 0,
                    "pull": 0,
                    "xs": 24,
                    "sm": 12,
                    "md": 21,
                    "lg": 12,
                    "xl": 12,
                    "customClass": ""
                  },
                  "list": [
                    {
                      "name": "Customer Name",
                      "type": "select",
                      "mainIcon": "下拉单选",
                      "typeIcon": "下拉单选",
                      "icon": "icon-select",
                      "group": "Select",
                      "groupSort": 2,
                      "enableScopes": ["Component", "Table", "Page"],
                      "el": "fm-select",
                      "options": {
                        "defaultValue": "",
                        "multiple": false,
                        "disabled": true,
                        "clearable": false,
                        "placeholder": "",
                        "required": true,
                        "requiredMessage": "",
                        "validatorCheck": false,
                        "validator": "",
                        "width": "",
                        "options": [
                          {
                            "value": "Option 1",
                            "label": "Option 1"
                          },
                          {
                            "value": "Option 2",
                            "label": "Option 2"
                          },
                          {
                            "value": "Option 3",
                            "label": "Option 3"
                          }
                        ],
                        "remote": true,
                        "remoteType": "innerdatasource",
                        "remoteOption": "option_s50tohar",
                        "filterable": false,
                        "pagingEnabled": true,
                        "remoteOptions": [],
                        "props": {
                          "value": "id",
                          "label": "customer_com_name",
                          "cascade": "",
                          "children": "",
                          "image": "",
                          "icon": ""
                        },
                        "remoteFunc": "func_s50tohar",
                        "customClass": "",
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "dataBind": true,
                        "customProps": {},
                        "tip": "",
                        "tableColumn": false,
                        "subform": false,
                        "paging_enabled": 1,
                        "paging_way": "Pagination",
                        "page_size": 10,
                        "more_fields": [],
                        "datasource": {
                          "source": "Customer:Table:1902779099617804290",
                          "rules": {
                            "collectionId": "1902779099617804290",
                            "list": [
                              {
                                "id": 1747625496269,
                                "parentId": 1747625496268,
                                "isTop": true,
                                "prop": "",
                                "operator": "",
                                "valueType": "value",
                                "value": "",
                                "type": "leaf",
                                "level": 1
                              }
                            ]
                          }
                        },
                        "url_params": {
                          "list": [
                            {
                              "prop": "",
                              "propLabel": "",
                              "operator": "",
                              "operatorLabel": "",
                              "valueType": "value",
                              "valueTypeLabel": "",
                              "valueLabel": ""
                            }
                          ]
                        },
                        "body_params": {
                          "list": [
                            {
                              "prop": "",
                              "propLabel": "",
                              "operator": "",
                              "operatorLabel": "",
                              "valueType": "value",
                              "valueTypeLabel": "",
                              "valueLabel": ""
                            }
                          ]
                        },
                        "request_params": {
                          "list": [
                            {
                              "prop": "",
                              "propLabel": "",
                              "operator": "",
                              "operatorLabel": "",
                              "valueType": "value",
                              "valueTypeLabel": "",
                              "valueLabel": ""
                            }
                          ]
                        },
                        "columns": []
                      },
                      "events": {
                        "onChange": "a94a6tnd",
                        "onFocus": "",
                        "onBlur": ""
                      },
                      "novalid": {},
                      "key": "s50tohar",
                      "model": "customer_name",
                      "rules": [
                        {
                          "required": true,
                          "message": ""
                        }
                      ]
                    }
                  ],
                  "key": "kjvyipdg"
                },
                {
                  "type": "col",
                  "options": {
                    "span": 12,
                    "offset": 0,
                    "push": 0,
                    "pull": 0,
                    "xs": 24,
                    "sm": 12,
                    "md": 3,
                    "lg": 12,
                    "xl": 12,
                    "customClass": ""
                  },
                  "list": [
                    {
                      "name": "Currency Code",
                      "type": "input",
                      "mainIcon": "单行文本",
                      "typeIcon": "多行文本",
                      "icon": "icon-input",
                      "group": "Text",
                      "groupSort": 1,
                      "enableScopes": ["Component", "Table", "Page"],
                      "el": "fm-input",
                      "options": {
                        "width": "",
                        "defaultValue": "",
                        "required": false,
                        "requiredMessage": "",
                        "dataType": "",
                        "dataTypeCheck": false,
                        "dataTypeMessage": "",
                        "pattern": "",
                        "patternCheck": false,
                        "patternMessage": "",
                        "validatorCheck": false,
                        "validator": "",
                        "placeholder": "",
                        "customClass": "",
                        "disabled": true,
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "dataBind": true,
                        "showPassword": false,
                        "clearable": false,
                        "maxlength": "",
                        "showWordLimit": false,
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_ysaz8e0m",
                        "remoteOption": "option_ysaz8e0m",
                        "tableColumn": false,
                        "subform": false,
                        "hideLabel": true
                      },
                      "events": {
                        "onChange": "",
                        "onFocus": "",
                        "onBlur": ""
                      },
                      "novalid": {},
                      "key": "ysaz8e0m",
                      "model": "currency_code",
                      "rules": []
                    }
                  ],
                  "key": "vj1lalry"
                }
              ],
              "options": {
                "gutter": 4,
                "justify": "start",
                "align": "top",
                "customClass": "",
                "hidden": false,
                "flex": true,
                "responsive": true,
                "remoteFunc": "func_ou38iq5b",
                "remoteOption": "option_ou38iq5b",
                "tableColumn": false,
                "subform": false
              },
              "novalid": {},
              "key": "ou38iq5b",
              "model": "grid_ou38iq5b",
              "rules": []
            },
            {
              "name": "Sales Order Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_azrdcooh",
                "remoteOption": "option_azrdcooh",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "7odm58ru",
              "model": "so_no",
              "rules": []
            },
            {
              "name": "栅格布局",
              "type": "grid",
              "mainIcon": "栅格布局",
              "typeIcon": "栅格布局",
              "icon": "icon-RectangleCopy",
              "group": "Layout",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "columns": [
                {
                  "type": "col",
                  "options": {
                    "span": 12,
                    "offset": 0,
                    "push": 0,
                    "pull": 0,
                    "xs": 24,
                    "sm": 12,
                    "md": 12,
                    "lg": 12,
                    "xl": 12,
                    "customClass": ""
                  },
                  "list": [
                    {
                      "name": "Billing",
                      "type": "textarea",
                      "mainIcon": "多行文本",
                      "typeIcon": "多行文本(1)",
                      "icon": "icon-diy-com-textarea",
                      "group": "Text",
                      "groupSort": 2,
                      "enableScopes": ["Component", "Table", "Page"],
                      "options": {
                        "width": "",
                        "defaultValue": "",
                        "required": false,
                        "requiredMessage": "",
                        "disabled": true,
                        "pattern": "",
                        "patternMessage": "",
                        "validatorCheck": false,
                        "validator": "",
                        "placeholder": "",
                        "customClass": "",
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "dataBind": true,
                        "clearable": false,
                        "maxlength": "",
                        "showWordLimit": false,
                        "rows": 8,
                        "autosize": false,
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_a1n46mac",
                        "remoteOption": "option_a1n46mac",
                        "tableColumn": false,
                        "subform": false,
                        "labelWrap": true
                      },
                      "events": {
                        "onChange": "",
                        "onFocus": "",
                        "onBlur": ""
                      },
                      "novalid": {},
                      "key": "a1n46mac",
                      "model": "gd_billing_address",
                      "rules": []
                    },
                    {
                      "name": "Manage Address",
                      "type": "link",
                      "mainIcon": "链接",
                      "typeIcon": "链接",
                      "icon": "icon-lianjie",
                      "group": "Buttons",
                      "groupSort": 2,
                      "enableScopes": ["Component", "Table", "Page"],
                      "options": {
                        "customClass": "",
                        "disabled": false,
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hideLabel": true,
                        "hidden": false,
                        "linkType": "default",
                        "linkName": "Manage Address",
                        "underline": true,
                        "blank": true,
                        "href": "",
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_xzvk0to9",
                        "remoteOption": "option_xzvk0to9",
                        "tableColumn": false,
                        "subform": false
                      },
                      "events": {
                        "onClick": "pdcfis4b"
                      },
                      "novalid": {},
                      "key": "xzvk0to9",
                      "model": "link_billing_address",
                      "rules": []
                    }
                  ],
                  "key": "6tp9vy9q",
                  "rules": []
                },
                {
                  "type": "col",
                  "options": {
                    "span": 12,
                    "offset": 0,
                    "push": 0,
                    "pull": 0,
                    "xs": 24,
                    "sm": 12,
                    "md": 12,
                    "lg": 12,
                    "xl": 12,
                    "customClass": ""
                  },
                  "list": [
                    {
                      "name": "Shipping",
                      "type": "textarea",
                      "mainIcon": "多行文本",
                      "typeIcon": "多行文本(1)",
                      "icon": "icon-diy-com-textarea",
                      "group": "Text",
                      "groupSort": 2,
                      "enableScopes": ["Component", "Table", "Page"],
                      "options": {
                        "width": "",
                        "defaultValue": "",
                        "required": false,
                        "requiredMessage": "",
                        "disabled": true,
                        "pattern": "",
                        "patternMessage": "",
                        "validatorCheck": false,
                        "validator": "",
                        "placeholder": "",
                        "customClass": "",
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hidden": false,
                        "dataBind": true,
                        "clearable": false,
                        "maxlength": "",
                        "showWordLimit": false,
                        "rows": 8,
                        "autosize": false,
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_a1n46mac",
                        "remoteOption": "option_a1n46mac",
                        "tableColumn": false,
                        "subform": false,
                        "labelWrap": true
                      },
                      "events": {
                        "onChange": "",
                        "onFocus": "",
                        "onBlur": ""
                      },
                      "novalid": {},
                      "key": "fbmorwmf",
                      "model": "gd_shipping_address",
                      "rules": []
                    },
                    {
                      "name": "Manage Address",
                      "type": "link",
                      "mainIcon": "链接",
                      "typeIcon": "链接",
                      "icon": "icon-lianjie",
                      "group": "Buttons",
                      "groupSort": 2,
                      "enableScopes": ["Component", "Table", "Page"],
                      "options": {
                        "customClass": "",
                        "disabled": false,
                        "labelWidth": 100,
                        "isLabelWidth": false,
                        "hideLabel": true,
                        "hidden": false,
                        "linkType": "default",
                        "linkName": "Manage Address",
                        "underline": true,
                        "blank": true,
                        "href": "",
                        "customProps": {},
                        "tip": "",
                        "remoteFunc": "func_xzvk0to9",
                        "remoteOption": "option_xzvk0to9",
                        "tableColumn": false,
                        "subform": false
                      },
                      "events": {
                        "onClick": "e18vu6ag"
                      },
                      "novalid": {},
                      "key": "ofsjjdyq",
                      "model": "link_shipping_address",
                      "rules": []
                    }
                  ],
                  "key": "sxew3spu"
                }
              ],
              "options": {
                "gutter": 32,
                "justify": "start",
                "align": "top",
                "customClass": "",
                "hidden": true,
                "flex": true,
                "responsive": true,
                "remoteFunc": "func_ham7tomf",
                "remoteOption": "option_ham7tomf",
                "tableColumn": false,
                "subform": false
              },
              "novalid": {},
              "key": "ham7tomf",
              "model": "address_grid",
              "rules": []
            },
            {
              "name": "Goods Delivery Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": true,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": true,
                "validator": "const page_status = this.getParamsVariables('page_status');\n\nif (page_status === 'View' || !value) {\n    callback();\n    return;\n}\nlet organizationId = this.getVarGlobal('deptParentId');\n        if(organizationId === '0'){\n            organizationId = this.getVarSystem('deptIds').split(',')[0];\n        }\ndb.collection(\"goods_delivery\")\n    .where({ delivery_no: value , organization_id: organizationId})\n    .get()\n    .then(response => {\n        const matchingGoodsDelivery = response.data || [];\n\n        if (matchingGoodsDelivery.length === 0) {\n            callback();\n            return;\n        }\n\n        if (page_status === 'Edit') {\n            const currentDeliveryNo = this.getParamsVariables('goods_delivery_no');\n            const isSameDelivery = matchingGoodsDelivery.some(goods_delivery => goods_delivery.id === currentDeliveryNo);\n            callback(isSameDelivery ? undefined : 'Good delivery number already exists.');\n        } else {\n            callback('Good delivery number already exists.');\n        }\n    })\n    .catch(error => {\n        console.error(\"Error checking good delivery:\", error);\n        callback(\"Error validating good delivery number.\");\n    });  ",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 120,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_nfwpnnrg",
                "remoteOption": "option_nfwpnnrg",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "key": "nfwpnnrg",
              "model": "delivery_no",
              "rules": [
                {
                  "required": true,
                  "message": ""
                },
                {
                  "func": "const page_status = this.getParamsVariables('page_status');\n\nif (page_status === 'View' || !value) {\n    callback();\n    return;\n}\nlet organizationId = this.getVarGlobal('deptParentId');\n        if(organizationId === '0'){\n            organizationId = this.getVarSystem('deptIds').split(',')[0];\n        }\ndb.collection(\"goods_delivery\")\n    .where({ delivery_no: value , organization_id: organizationId})\n    .get()\n    .then(response => {\n        const matchingGoodsDelivery = response.data || [];\n\n        if (matchingGoodsDelivery.length === 0) {\n            callback();\n            return;\n        }\n\n        if (page_status === 'Edit') {\n            const currentDeliveryNo = this.getParamsVariables('goods_delivery_no');\n            const isSameDelivery = matchingGoodsDelivery.some(goods_delivery => goods_delivery.id === currentDeliveryNo);\n            callback(isSameDelivery ? undefined : 'Good delivery number already exists.');\n        } else {\n            callback('Good delivery number already exists.');\n        }\n    })\n    .catch(error => {\n        console.error(\"Error checking good delivery:\", error);\n        callback(\"Error validating good delivery number.\");\n    });  "
                }
              ],
              "novalid": {}
            },
            {
              "name": "Contact Name",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_azrdcooh",
                "remoteOption": "option_azrdcooh",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "azrdcooh",
              "model": "gd_contact_name",
              "rules": []
            },
            {
              "name": "Contact Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_weulivhf",
                "remoteOption": "option_weulivhf",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "weulivhf",
              "model": "contact_number",
              "rules": []
            },
            {
              "name": "Email Address",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_rdk2wko6",
                "remoteOption": "option_rdk2wko6",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "rdk2wko6",
              "model": "email_address",
              "rules": []
            },
            {
              "name": "Delivery Method",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": true,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_9ojvdo8j",
                "filterable": false,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "dict_key",
                  "label": "dict_key",
                  "cascade": "",
                  "children": "children",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_9ojvdo8j",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "系统字典(勿删):Table:1897577528487428098",
                  "rules": {
                    "collectionId": "1897577528487428098",
                    "list": [
                      {
                        "id": 1747835093446,
                        "parentId": 1747835093445,
                        "isTop": true,
                        "prop": "parent_id",
                        "operator": "numberEqual",
                        "valueType": "value",
                        "value": "1914515096478228481",
                        "type": "leaf",
                        "level": 1,
                        "propLabel": "父主键",
                        "valueLabel": "",
                        "operatorLabel": "等于",
                        "valueTypeLabel": "值"
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "dynamicValueType": "fx",
                "isDynamicValue": false,
                "columns": []
              },
              "events": {
                "onChange": "26roirgf",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "9ojvdo8j",
              "model": "gd_delivery_method",
              "rules": []
            },
            {
              "name": "Delivery Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": true,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "100%",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_putd4jbe",
                "remoteOption": "option_putd4jbe",
                "tableColumn": false,
                "subform": false,
                "dynamicValueFx": "",
                "dynamicValueType": "fx",
                "isDynamicValue": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "key": "putd4jbe",
              "model": "delivery_date",
              "rules": [
                {
                  "required": true,
                  "message": ""
                }
              ],
              "novalid": {}
            },
            {
              "name": "Document Description",
              "type": "textarea",
              "mainIcon": "多行文本",
              "typeIcon": "多行文本(1)",
              "icon": "icon-diy-com-textarea",
              "group": "Text",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "disabled": true,
                "pattern": "",
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "rows": 1,
                "autosize": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_x8w2fz3m",
                "remoteOption": "option_x8w2fz3m",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "x8w2fz3m",
              "model": "document_description",
              "rules": []
            },
            {
              "name": "Organization",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_xp1hmi5v",
                "remoteOption": "option_xp1hmi5v",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "m7plxfjl",
              "model": "organization_id",
              "rules": []
            },
            {
              "name": "Accounting Integration Type",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_xp1hmi5v",
                "remoteOption": "option_xp1hmi5v",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "rvm5fvb4",
              "model": "acc_integration_type",
              "rules": []
            },
            {
              "name": "SO Doc Ref",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_xp1hmi5v",
                "remoteOption": "option_xp1hmi5v",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "zt8gwtgb",
              "model": "so_docref",
              "rules": []
            },
            {
              "name": "GD Dockey",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_k1kuhs9n",
                "remoteOption": "option_k1kuhs9n",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "k1kuhs9n",
              "model": "gd_dockey",
              "rules": []
            }
          ],
          "key": "7xvz6j9q",
          "rules": []
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 11,
            "lg": 12,
            "xl": 12,
            "customClass": "",
            "defaultValue": ""
          },
          "list": [
            {
              "name": "Reference Documents",
              "type": "fileupload",
              "mainIcon": "文件上传",
              "typeIcon": "文件上传",
              "icon": "icon-wenjianshangchuan",
              "group": "Special",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": [],
                "width": "",
                "tokenFunc": "funcGetToken",
                "token": "",
                "tokenType": "datasource",
                "disabled": true,
                "tip": "",
                "action": "/api/blade-resource/oss/endpoint/put-file",
                "customClass": "",
                "limit": 9,
                "multiple": true,
                "isQiniu": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "headers": [],
                "required": false,
                "validatorCheck": false,
                "validator": "",
                "withCredentials": false,
                "remoteFunc": "func_oup1r2dj",
                "remoteOption": "option_oup1r2dj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onSelect": "",
                "onUploadSuccess": "",
                "onUploadError": "",
                "onRemove": ""
              },
              "novalid": {},
              "key": "oup1r2dj",
              "model": "gd_ref_doc",
              "rules": []
            },
            {
              "name": "Last Sync Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD HH:mm:ss",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_qshn7bvl",
                "remoteOption": "option_qshn7bvl",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "qshn7bvl",
              "model": "last_sync_date",
              "rules": []
            },
            {
              "name": "Credit Limit",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": -99999,
                "step": 1,
                "disabled": false,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "precision": 2,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_lgtf8juk",
                "remoteOption": "option_lgtf8juk",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "lgtf8juk",
              "model": "customer_credit_limit",
              "rules": []
            },
            {
              "name": "Overdue Limit",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": -99999,
                "step": 1,
                "disabled": false,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "precision": 2,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_lgtf8juk",
                "remoteOption": "option_lgtf8juk",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "rmdjbxof",
              "model": "overdue_limit",
              "rules": []
            },
            {
              "name": "Outstanding Balance",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": -99999,
                "step": 1,
                "disabled": false,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "precision": 2,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_lgtf8juk",
                "remoteOption": "option_lgtf8juk",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "qv8uymna",
              "model": "outstanding_balance",
              "rules": []
            },
            {
              "name": "Overdue Invoice Total Amount",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": -99999,
                "step": 1,
                "disabled": false,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "precision": 2,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_lgtf8juk",
                "remoteOption": "option_lgtf8juk",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "0qi69d5m",
              "model": "overdue_inv_total_amount",
              "rules": []
            },
            {
              "name": "Is Accurate",
              "type": "switch",
              "mainIcon": "开关",
              "typeIcon": "开关",
              "icon": "icon-switch",
              "group": "Select",
              "groupSort": 8,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": 0,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "disabled": false,
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "width": "",
                "customProps": {},
                "tip": "",
                "booleanValueMode": false,
                "alignright": false,
                "checkboxMode": false,
                "remoteFunc": "func_ewwffe3o",
                "remoteOption": "option_ewwffe3o",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": ""
              },
              "novalid": {},
              "key": "ewwffe3o",
              "model": "is_accurate",
              "rules": []
            }
          ],
          "key": "649i95ck",
          "rules": []
        }
      ],
      "options": {
        "gutter": 32,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_3gt3qjwc",
        "remoteOption": "option_3gt3qjwc",
        "tableColumn": false,
        "subform": false,
        "defaultValue": ""
      },
      "key": "3gt3qjwc",
      "model": "grid_3gt3qjwc",
      "rules": [],
      "novalid": {}
    },
    {
      "name": "",
      "type": "text",
      "mainIcon": "文字",
      "typeIcon": "文字",
      "icon": "icon-wenzishezhi-",
      "group": "View",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": "",
        "customClass": "font-bold",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": false,
        "dataBind": true,
        "required": false,
        "width": "",
        "tip": "",
        "color": "",
        "fontSize": "",
        "lineHeight": "",
        "fontWeight": "",
        "textAlign": "",
        "textDecoration": "",
        "fontStyle": "",
        "margin": "",
        "border": "",
        "padding": "",
        "lines": 0,
        "remoteFunc": "func_zkgc23f8",
        "remoteOption": "option_zkgc23f8",
        "tableColumn": false,
        "subform": false,
        "hideLabel": true
      },
      "events": {
        "onChange": ""
      },
      "key": "zkgc23f8",
      "model": "delivery_method_text",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": "",
            "defaultValue": ""
          },
          "list": [
            {
              "name": "Driver Name",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "1luka5xj",
              "model": "driver_name",
              "rules": []
            },
            {
              "name": "IC No",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "9d8hx8vc",
              "model": "ic_no",
              "rules": []
            },
            {
              "name": "Driver Contact No",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "qx7g2a98",
              "model": "driver_contact_no",
              "rules": []
            }
          ],
          "key": "u6lmdou7",
          "rules": []
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Vehicle Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "hijhu7le",
              "model": "vehicle_no",
              "rules": []
            },
            {
              "name": "Pickup Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "100%",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_aom1udmx",
                "remoteOption": "option_aom1udmx",
                "tableColumn": false,
                "subform": false,
                "dynamicValueType": "fx",
                "isDynamicValue": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "p1sp5g09",
              "model": "pickup_date",
              "rules": []
            },
            {
              "name": "Validity of Collection",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "100%",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_aom1udmx",
                "remoteOption": "option_aom1udmx",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "aom1udmx",
              "model": "validity_of_collection",
              "rules": []
            }
          ],
          "key": "66o0o48m"
        }
      ],
      "options": {
        "gutter": 32,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": true,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_airhcuul",
        "remoteOption": "option_airhcuul",
        "tableColumn": false,
        "subform": false,
        "defaultValue": ""
      },
      "key": "k6e8u59y",
      "model": "self_pickup",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": "",
            "defaultValue": ""
          },
          "list": [
            {
              "name": "Courier Company",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_axo7s0cn",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "courier_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_axo7s0cn",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Courier Company:Table:1901984960940724226",
                  "rules": {
                    "collectionId": "1901984960940724226",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "axo7s0cn",
              "model": "courier_company",
              "rules": []
            },
            {
              "name": "Shipping Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "100%",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_aom1udmx",
                "remoteOption": "option_aom1udmx",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "59j3runv",
              "model": "shipping_date",
              "rules": []
            },
            {
              "name": "Freight Charges",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "875d795v",
              "model": "freight_charges",
              "rules": []
            }
          ],
          "key": "b2nwhl8m",
          "rules": []
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Tracking Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "iz3k2bx7",
              "model": "tracking_number",
              "rules": []
            },
            {
              "name": "Est. Arrival Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "100%",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_aom1udmx",
                "remoteOption": "option_aom1udmx",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "dwoc73sn",
              "model": "est_arrival_date",
              "rules": []
            }
          ],
          "key": "mbz6jabw"
        }
      ],
      "options": {
        "gutter": 32,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": true,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_airhcuul",
        "remoteOption": "option_airhcuul",
        "tableColumn": false,
        "subform": false,
        "defaultValue": ""
      },
      "key": "vfdic6de",
      "model": "courier_service",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": "",
            "defaultValue": ""
          },
          "list": [
            {
              "name": "Driver Name",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "xy9ih2hm",
              "model": "driver_name",
              "rules": []
            },
            {
              "name": "Driver Contact No.",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "4er1dsam",
              "model": "driver_contact_no",
              "rules": []
            },
            {
              "name": "IC No",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "kfc7tdp5",
              "model": "ic_no",
              "rules": []
            }
          ],
          "key": "c2wqzp7m",
          "rules": []
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Vehicle Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "l3cczc2q",
              "model": "vehicle_no",
              "rules": []
            },
            {
              "name": "Est. Delivery Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "100%",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_aom1udmx",
                "remoteOption": "option_aom1udmx",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "lovfo0nk",
              "model": "est_delivery_date",
              "rules": []
            },
            {
              "name": "Delivery Cost",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "r325ng8f",
              "model": "delivery_cost",
              "rules": []
            }
          ],
          "key": "kz11yq0q"
        }
      ],
      "options": {
        "gutter": 32,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": true,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_airhcuul",
        "remoteOption": "option_airhcuul",
        "tableColumn": false,
        "subform": false,
        "defaultValue": ""
      },
      "key": "1thxpat6",
      "model": "company_truck",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": "",
            "defaultValue": ""
          },
          "list": [
            {
              "name": "Shipping Company",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_v6lkq82e",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "courier_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_v6lkq82e",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Courier Company:Table:1901984960940724226",
                  "rules": {
                    "collectionId": "1901984960940724226",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "v6lkq82e",
              "model": "shipping_company",
              "rules": []
            },
            {
              "name": "Shipping Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "100%",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_aom1udmx",
                "remoteOption": "option_aom1udmx",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "k19esqb1",
              "model": "shipping_date",
              "rules": []
            },
            {
              "name": "Freight Charges",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "eghvlawi",
              "model": "freight_charges",
              "rules": []
            }
          ],
          "key": "szc1k49g",
          "rules": []
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Shipping Method",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": false,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_ujqxidig",
                "filterable": true,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "shipping_method_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_ujqxidig",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": false,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Shipping Method:Table:1902675462858063873",
                  "rules": {
                    "collectionId": "1902675462858063873",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "ujqxidig",
              "model": "shipping_method",
              "rules": []
            },
            {
              "name": "Est. Arrival Date",
              "type": "date",
              "mainIcon": "日期",
              "typeIcon": "日期",
              "icon": "icon-date",
              "group": "DateTime",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "defaultValue": "",
                "readonly": false,
                "disabled": false,
                "editable": false,
                "clearable": true,
                "placeholder": "",
                "startPlaceholder": "",
                "endPlaceholder": "",
                "type": "timestamp",
                "timeStampType": "timestamp",
                "format": "YYYY-MM-DD",
                "timestamp": false,
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "100%",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_aom1udmx",
                "remoteOption": "option_aom1udmx",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "mqa340vr",
              "model": "est_arrival_date",
              "rules": []
            },
            {
              "name": "Tracking Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "v0ous0pk",
              "model": "tracking_number",
              "rules": []
            }
          ],
          "key": "mz3h76xc"
        }
      ],
      "options": {
        "gutter": 32,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": true,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_airhcuul",
        "remoteOption": "option_airhcuul",
        "tableColumn": false,
        "subform": false,
        "defaultValue": ""
      },
      "key": "dcfiqsy7",
      "model": "shipping_service",
      "rules": []
    },
    {
      "name": "栅格布局",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "Vehicle Number",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "wp18pgsl",
              "model": "tpt_vehicle_number",
              "rules": []
            },
            {
              "name": "Transport Name",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "ulwfqexf",
              "model": "tpt_transport_name",
              "rules": []
            }
          ],
          "key": "icuodn9g",
          "rules": []
        },
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "IC No.",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "d9dhw716",
              "model": "tpt_ic_no",
              "rules": []
            },
            {
              "name": "Driver Contact No",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_1luka5xj",
                "remoteOption": "option_1luka5xj",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "dyre13eb",
              "model": "tpt_driver_contact_no",
              "rules": []
            }
          ],
          "key": "izi6szoy"
        }
      ],
      "options": {
        "gutter": 32,
        "justify": "start",
        "align": "top",
        "customClass": "",
        "hidden": true,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_gd8iis99",
        "remoteOption": "option_gd8iis99",
        "tableColumn": false,
        "subform": false
      },
      "key": "gd8iis99",
      "model": "third_party_transporter",
      "rules": []
    },
    {
      "name": "标签页",
      "type": "tabs",
      "mainIcon": "标签页",
      "typeIcon": "标签页",
      "icon": "icon-tabs",
      "group": "Layout",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "tabs": [
        {
          "label": "Item Table",
          "name": "tab_1",
          "list": []
        }
      ],
      "options": {
        "type": "",
        "tabPosition": "top",
        "customClass": "",
        "hidden": false,
        "remoteFunc": "func_4brs8igt",
        "remoteOption": "option_4brs8igt",
        "tableColumn": false,
        "subform": false
      },
      "key": "4brs8igt",
      "model": "tabs_4brs8igt",
      "rules": []
    },
    {
      "name": "",
      "type": "table",
      "mainIcon": "子表单",
      "typeIcon": "子表单",
      "icon": "icon-table",
      "group": "Container",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": [],
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": false,
        "dataBind": true,
        "disabled": false,
        "required": false,
        "validatorCheck": false,
        "validator": "",
        "paging": false,
        "pageSize": 5,
        "isAdd": false,
        "isDelete": true,
        "showControl": true,
        "virtualTable": true,
        "sortable": true,
        "tip": "",
        "remoteFunc": "func_fwii8mvb",
        "remoteOption": "option_fwii8mvb",
        "tableColumn": false,
        "subform": false,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onRowAdd": "",
        "onRowRemove": "",
        "onPageChange": ""
      },
      "tableColumns": [
        {
          "name": "Item Code",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": true,
            "clearable": true,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_uuu60u46",
            "filterable": false,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "id",
              "label": "material_code",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_uuu60u46",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "Item:Table:1901546842240438273",
              "rules": {
                "collectionId": "1901546842240438273",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "columns": []
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "uuu60u46",
          "model": "material_id",
          "rules": []
        },
        {
          "name": "Item Name",
          "type": "textarea",
          "mainIcon": "多行文本",
          "typeIcon": "多行文本(1)",
          "icon": "icon-diy-com-textarea",
          "group": "Text",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "disabled": true,
            "pattern": "",
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "rows": 1,
            "autosize": true,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_n4mzolqk",
            "remoteOption": "option_n4mzolqk",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "n4mzolqk",
          "model": "material_name",
          "rules": []
        },
        {
          "name": "\tDescription",
          "type": "textarea",
          "mainIcon": "多行文本",
          "typeIcon": "多行文本(1)",
          "icon": "icon-diy-com-textarea",
          "group": "Text",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "disabled": true,
            "pattern": "",
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "rows": 1,
            "autosize": true,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_kgcorp5e",
            "remoteOption": "option_kgcorp5e",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "kgcorp5e",
          "model": "gd_material_desc",
          "rules": []
        },
        {
          "name": "Ordered Qty",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 3,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_grma24hr",
            "remoteOption": "option_grma24hr",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "grma24hr",
          "model": "gd_order_quantity",
          "rules": []
        },
        {
          "name": "Delivered Qty",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 3,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_grma24hr",
            "remoteOption": "option_grma24hr",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "5a4f9brn",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "lt9a019b",
          "model": "gd_delivered_qty",
          "rules": []
        },
        {
          "name": "Undelivered Qty",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 3,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_grma24hr",
            "remoteOption": "option_grma24hr",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "wlzv4azq",
          "model": "gd_undelivered_qty",
          "rules": []
        },
        {
          "name": "UOM",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": true,
            "clearable": true,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_yhg5d748",
            "filterable": false,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "id",
              "label": "uom_name",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_yhg5d748",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "UOM:Table:1901805375573839874",
              "rules": {
                "collectionId": "1901805375573839874",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "columns": []
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "key": "yhg5d748",
          "model": "gd_order_uom_id",
          "rules": [],
          "novalid": {}
        },
        {
          "name": "Select Delivery Qty",
          "type": "link",
          "mainIcon": "链接",
          "typeIcon": "链接",
          "icon": "icon-lianjie",
          "group": "Buttons",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": false,
            "hidden": false,
            "linkType": "default",
            "linkName": "Select Stock",
            "underline": false,
            "blank": true,
            "href": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_8e8sn64f",
            "remoteOption": "option_8e8sn64f",
            "tableColumn": true,
            "subform": false,
            "dynamicValueType": "fx",
            "isDynamicValue": false,
            "fixedColumn": true,
            "fixedColumnPosition": "right"
          },
          "events": {
            "onClick": "25kwxnrd"
          },
          "novalid": {},
          "key": "8e8sn64f",
          "model": "gd_delivery_qty",
          "rules": []
        },
        {
          "name": "Good Delivery Qty",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": true,
            "validator": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[1];\n\nconst order_quantity = parseFloat(data.table_gd[index].gd_order_quantity || 0);\nconst gd_undelivered_qty = parseFloat(data.table_gd[index].gd_undelivered_qty || 0);\nconst gd_initial_delivered_qty = parseFloat(data.table_gd[index].gd_initial_delivered_qty || 0);\nconst quantity = value;\nconst delivered_quantity = parseFloat(\n  data.table_gd[index].gd_delivered_qty || 0\n);\nconst materialId = data.table_gd[index].material_id;\n\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\nif (Object.keys(window.validationState).length === 0) {\n  const rowCount = data.table_gd.length;\n  for (let i = 0; i < rowCount; i++) {\n    window.validationState[i] = true;\n  }\n}\n\n(async () => {\n  try {\n\n    if (!materialId) {\n      window.validationState[index] = true;\n      if(quantity > gd_undelivered_qty) {\n        window.validationState[index] = false;\n        callback('Quantity exceed delivered limit.');\n      } else {\n        window.validationState[index] = true;\n        callback();\n      }\n    } else {\n      const itemRes = await db.collection(\"Item\").where({ id: materialId }).get();\n\n      if (!itemRes.data || !itemRes.data.length) {\n        console.warn(`Item not found: ${materialId}`);\n        window.validationState[index] = true;\n        callback();\n        return;\n      }\n\n\n      const itemData = itemRes.data[0];\n      let orderLimit = order_quantity;\n\n      if (itemData.over_delivery_tolerance > 0) {\n        orderLimit =\n          order_quantity +\n          order_quantity * (itemData.over_delivery_tolerance / 100);\n      }\n\n      if (delivered_quantity > orderLimit) {\n        window.validationState[index] = false;\n        callback(\"Quantity exceeds delivery limit\");\n      } else {\n        window.validationState[index] = true;\n        callback();\n      }\n    }\n\n    \n  } catch (error) {\n    console.error(\"Error during validation:\", error);\n    window.validationState[index] = false;\n    callback(\"Error checking quantity limit\");\n  }\n})();\n",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "precision": 3,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_grma24hr",
            "remoteOption": "option_grma24hr",
            "tableColumn": true,
            "subform": false,
            "fixedColumn": true,
            "fixedColumnPosition": "right"
          },
          "events": {
            "onChange": "qwkdom4g",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "7n57i3iw",
          "model": "gd_qty",
          "rules": [
            {
              "func": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[1];\n\nconst order_quantity = parseFloat(data.table_gd[index].gd_order_quantity || 0);\nconst gd_undelivered_qty = parseFloat(data.table_gd[index].gd_undelivered_qty || 0);\nconst gd_initial_delivered_qty = parseFloat(data.table_gd[index].gd_initial_delivered_qty || 0);\nconst quantity = value;\nconst delivered_quantity = parseFloat(\n  data.table_gd[index].gd_delivered_qty || 0\n);\nconst materialId = data.table_gd[index].material_id;\n\n// Create or use a global validation state\nif (!window.validationState) {\n  window.validationState = {};\n}\n\nif (Object.keys(window.validationState).length === 0) {\n  const rowCount = data.table_gd.length;\n  for (let i = 0; i < rowCount; i++) {\n    window.validationState[i] = true;\n  }\n}\n\n(async () => {\n  try {\n\n    if (!materialId) {\n      window.validationState[index] = true;\n      if(quantity > gd_undelivered_qty) {\n        window.validationState[index] = false;\n        callback('Quantity exceed delivered limit.');\n      } else {\n        window.validationState[index] = true;\n        callback();\n      }\n    } else {\n      const itemRes = await db.collection(\"Item\").where({ id: materialId }).get();\n\n      if (!itemRes.data || !itemRes.data.length) {\n        console.warn(`Item not found: ${materialId}`);\n        window.validationState[index] = true;\n        callback();\n        return;\n      }\n\n\n      const itemData = itemRes.data[0];\n      let orderLimit = order_quantity;\n\n      if (itemData.over_delivery_tolerance > 0) {\n        orderLimit =\n          order_quantity +\n          order_quantity * (itemData.over_delivery_tolerance / 100);\n      }\n\n      if (delivered_quantity > orderLimit) {\n        window.validationState[index] = false;\n        callback(\"Quantity exceeds delivery limit\");\n      } else {\n        window.validationState[index] = true;\n        callback();\n      }\n    }\n\n    \n  } catch (error) {\n    console.error(\"Error during validation:\", error);\n    window.validationState[index] = false;\n    callback(\"Error checking quantity limit\");\n  }\n})();\n"
            }
          ]
        },
        {
          "name": "Good Delivery Qty(UOM)",
          "type": "select",
          "mainIcon": "下拉单选",
          "typeIcon": "下拉单选",
          "icon": "icon-select",
          "group": "Select",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-select",
          "options": {
            "defaultValue": "",
            "multiple": false,
            "disabled": true,
            "clearable": true,
            "placeholder": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "width": "",
            "options": [
              {
                "value": "Option 1",
                "label": "Option 1"
              },
              {
                "value": "Option 2",
                "label": "Option 2"
              },
              {
                "value": "Option 3",
                "label": "Option 3"
              }
            ],
            "remote": true,
            "remoteType": "innerdatasource",
            "remoteOption": "option_yhg5d748",
            "filterable": false,
            "pagingEnabled": true,
            "remoteOptions": [],
            "props": {
              "value": "id",
              "label": "uom_name",
              "cascade": "",
              "children": "",
              "image": "",
              "icon": ""
            },
            "remoteFunc": "func_yhg5d748",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "customProps": {},
            "tip": "",
            "tableColumn": true,
            "subform": false,
            "paging_enabled": 1,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "datasource": {
              "source": "UOM:Table:1901805375573839874",
              "rules": {
                "collectionId": "1901805375573839874",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "fixedColumn": false,
            "fixedColumnPosition": "right"
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "key": "033mcaxt",
          "model": "good_delivery_uom_id",
          "rules": [],
          "novalid": {}
        },
        {
          "name": "SO number",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_7m2s9ltb",
            "remoteOption": "option_7m2s9ltb",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "7m2s9ltb",
          "model": "line_so_no",
          "rules": []
        },
        {
          "name": "Delivery Summary",
          "type": "textarea",
          "mainIcon": "多行文本",
          "typeIcon": "多行文本(1)",
          "icon": "icon-diy-com-textarea",
          "group": "Text",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "disabled": true,
            "pattern": "",
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "rows": 1,
            "autosize": true,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_zgwkowhf",
            "remoteOption": "option_zgwkowhf",
            "tableColumn": true,
            "subform": false,
            "fixedColumn": true,
            "fixedColumnPosition": "right"
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "zgwkowhf",
          "model": "view_stock",
          "rules": []
        },
        {
          "name": "SO ID",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_0pj5cg7g",
            "remoteOption": "option_0pj5cg7g",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "0pj5cg7g",
          "model": "line_so_id",
          "rules": []
        },
        {
          "name": "Temporary Qty Data",
          "type": "textarea",
          "mainIcon": "多行文本",
          "typeIcon": "多行文本(1)",
          "icon": "icon-diy-com-textarea",
          "group": "Text",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "disabled": true,
            "pattern": "",
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "rows": 2,
            "autosize": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_pps1udti",
            "remoteOption": "option_pps1udti",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "pps1udti",
          "model": "temp_qty_data",
          "rules": []
        },
        {
          "name": "Prev Temporary Qty Data",
          "type": "textarea",
          "mainIcon": "多行文本",
          "typeIcon": "多行文本(1)",
          "icon": "icon-diy-com-textarea",
          "group": "Text",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "disabled": true,
            "pattern": "",
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "rows": 2,
            "autosize": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_pps1udti",
            "remoteOption": "option_pps1udti",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "9va6rg5h",
          "model": "prev_temp_qty_data",
          "rules": []
        },
        {
          "name": "Initial Delivered Qty",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_grma24hr",
            "remoteOption": "option_grma24hr",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "u6pt25un",
          "model": "gd_initial_delivered_qty",
          "rules": []
        },
        {
          "name": "Unit Price",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "precision": 4,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_grma24hr",
            "remoteOption": "option_grma24hr",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "j9azlicj",
          "model": "unit_price",
          "rules": []
        },
        {
          "name": "Total Price",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "precision": 4,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_grma24hr",
            "remoteOption": "option_grma24hr",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "2988xnsa",
          "model": "total_price",
          "rules": []
        },
        {
          "name": "Base Qty",
          "type": "number",
          "icon": "icon-number",
          "mainIcon": "数字",
          "typeIcon": "数字",
          "group": "Number",
          "groupSort": 2,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-number",
          "options": {
            "width": "",
            "required": false,
            "requiredMessage": "",
            "validatorCheck": false,
            "validator": "",
            "defaultValue": 0,
            "min": 0,
            "step": 1,
            "disabled": true,
            "controls": false,
            "controlsPosition": "",
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "precision": 0,
            "customProps": {
              "progressColor": "",
              "dividingNumber": "",
              "showNumber": "",
              "viewMode": "",
              "format": "rmb",
              "cacheProp": true
            },
            "tip": "",
            "remoteFunc": "func_grma24hr",
            "remoteOption": "option_grma24hr",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "aawoq56s",
          "model": "base_qty",
          "rules": []
        },
        {
          "name": "Base UOM",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_lxe2sw8f",
            "remoteOption": "option_lxe2sw8f",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "lxe2sw8f",
          "model": "base_uom_id",
          "rules": []
        },
        {
          "name": "Fifo Sequence",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_qnqhntdf",
            "remoteOption": "option_qnqhntdf",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "qnqhntdf",
          "model": "fifo_sequence",
          "rules": []
        },
        {
          "name": "Costing Method",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_qnqhntdf",
            "remoteOption": "option_qnqhntdf",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "1i0x2bh7",
          "model": "item_costing_method",
          "rules": []
        },
        {
          "name": "Return Qty",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_qnqhntdf",
            "remoteOption": "option_qnqhntdf",
            "tableColumn": true,
            "subform": false
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "novalid": {},
          "key": "79quw7z9",
          "model": "return_qty",
          "rules": []
        }
      ],
      "key": "fwii8mvb",
      "model": "table_gd",
      "rules": []
    },
    {
      "name": "Grid",
      "type": "grid",
      "mainIcon": "栅格布局",
      "typeIcon": "栅格布局",
      "icon": "icon-RectangleCopy",
      "group": "Layout",
      "groupSort": 0,
      "enableScopes": ["Component", "Table", "Page"],
      "columns": [
        {
          "type": "col",
          "options": {
            "span": 12,
            "offset": 0,
            "push": 0,
            "pull": 0,
            "xs": 24,
            "sm": 12,
            "md": 12,
            "lg": 12,
            "xl": 12,
            "customClass": ""
          },
          "list": [
            {
              "name": "",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": true,
                "dataBind": true,
                "precision": 4,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_ffsjazgw",
                "remoteOption": "option_ffsjazgw",
                "tableColumn": false,
                "subform": false,
                "hideLabel": true
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "key": "ffsjazgw",
              "model": "gd_total",
              "rules": [],
              "novalid": {}
            }
          ],
          "key": "xy02owyh"
        }
      ],
      "options": {
        "gutter": 0,
        "justify": "end",
        "align": "top",
        "customClass": "",
        "hidden": false,
        "flex": true,
        "responsive": true,
        "remoteFunc": "func_wqt265o3",
        "remoteOption": "option_wqt265o3",
        "tableColumn": false,
        "subform": false
      },
      "key": "wqt265o3",
      "model": "grid_wqt265o3",
      "rules": []
    },
    {
      "name": "Remarks",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": true,
        "labelWidth": 150,
        "isLabelWidth": true,
        "hidden": false,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_6q0xg8pd",
        "remoteOption": "option_6q0xg8pd",
        "tableColumn": false,
        "subform": false
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "6q0xg8pd",
      "model": "order_remark",
      "rules": []
    },
    {
      "name": "自动布局",
      "type": "flex",
      "el": "su-fm-flex",
      "mainIcon": "自动布局",
      "typeIcon": "自动布局",
      "icon": "icon-zhediemianban",
      "group": "Design",
      "groupSort": 6,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "title": "布局",
        "customClass": "",
        "hidden": false,
        "recursive": false,
        "recursiveStyleFx": "",
        "slotTarget": "",
        "defaultValue": "",
        "flexDirection": "column",
        "flexWrap": "",
        "alignItems": "",
        "justifyContent": "",
        "hGap": "",
        "vGap": "",
        "grid": {
          "row": {
            "value": "",
            "visible": true
          },
          "col": {
            "value": "",
            "visible": true
          },
          "use": false
        },
        "padding": ["", "", "", ""],
        "margin": ["", "", "", ""],
        "boxSizing": "border-box",
        "width": "",
        "height": "70px",
        "radius": ["", "", "", ""],
        "position": "",
        "positions": ["", "", "", ""],
        "zIndex": "",
        "flex": "",
        "flexGrow": "",
        "flexShrink": "",
        "fills": [
          {
            "type": "color",
            "value": "#ffffffff",
            "mode": "aspectFill",
            "rotate": "",
            "visible": true
          }
        ],
        "borders": [],
        "effects": [],
        "states": [],
        "hoverClass": "",
        "overflow": "",
        "styleFx": "",
        "behave": "",
        "remoteFunc": "func_ga5tsjpo",
        "remoteOption": "option_ga5tsjpo",
        "tableColumn": false,
        "subform": false,
        "props": {},
        "datasource": {
          "rules": {
            "collectionId": "",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "remote": false,
        "remoteType": "datasource",
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "paging_enabled": 0,
        "paging_way": "Pagination",
        "page_size": 10,
        "more_fields": [],
        "columns": []
      },
      "list": [],
      "events": {
        "onClick": ""
      },
      "key": "ga5tsjpo",
      "model": "flex_ga5tsjpo",
      "rules": []
    },
    {
      "name": "Flex",
      "type": "flex",
      "el": "su-fm-flex",
      "mainIcon": "自动布局",
      "typeIcon": "自动布局",
      "icon": "icon-zhediemianban",
      "group": "Design",
      "groupSort": 6,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "title": "布局",
        "customClass": "fixbutton",
        "hidden": false,
        "recursive": false,
        "recursiveStyleFx": "",
        "slotTarget": "",
        "defaultValue": "",
        "flexDirection": "row",
        "flexWrap": "nowrap",
        "alignItems": "flex-end",
        "justifyContent": "flex-end",
        "hGap": "",
        "vGap": "",
        "grid": {
          "row": {
            "value": "",
            "visible": true
          },
          "col": {
            "value": "",
            "visible": true
          },
          "use": false
        },
        "padding": ["10px", "", "", ""],
        "margin": ["", "", "", ""],
        "boxSizing": "border-box",
        "width": "80%",
        "height": "",
        "radius": ["", "", "", ""],
        "position": "",
        "positions": ["", "", "", ""],
        "zIndex": "",
        "flex": "",
        "flexGrow": "",
        "flexShrink": "",
        "fills": [
          {
            "type": "color",
            "value": "#ffffffff",
            "mode": "aspectFill",
            "rotate": "",
            "visible": true
          }
        ],
        "borders": [],
        "effects": [],
        "states": [],
        "hoverClass": "",
        "overflow": "",
        "styleFx": "",
        "behave": "",
        "remoteFunc": "func_xb1nc9sx",
        "remoteOption": "option_xb1nc9sx",
        "tableColumn": false,
        "subform": false,
        "props": {},
        "datasource": {
          "rules": {
            "collectionId": "",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "remote": false,
        "remoteType": "datasource",
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "paging_enabled": 0,
        "paging_way": "Pagination",
        "page_size": 10,
        "more_fields": [],
        "columns": []
      },
      "list": [
        {
          "name": "Draft",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": false,
            "buttonSize": "default",
            "buttonType": "info",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Save as Draft",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_sedssq8s",
            "remoteOption": "option_sedssq8s",
            "tableColumn": false,
            "subform": false,
            "shadow": "large"
          },
          "events": {
            "onClick": "13hi9auo"
          },
          "key": "sedssq8s",
          "model": "button_save_as_draft",
          "rules": []
        },
        {
          "name": "Created",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "margin",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": false,
            "buttonSize": "default",
            "buttonType": "primary",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Created",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_sedssq8s",
            "remoteOption": "option_sedssq8s",
            "tableColumn": false,
            "subform": false,
            "shadow": "large",
            "select-card_n7ge7fmb": [],
            "immutable": false
          },
          "events": {
            "onClick": "loukrz3x"
          },
          "key": "6yfuyk4q",
          "model": "button_save_as_created",
          "rules": []
        },
        {
          "name": "Completed",
          "type": "button",
          "mainIcon": "按钮",
          "typeIcon": "按钮",
          "icon": "icon-button",
          "group": "Buttons",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "customClass": "margin marginright",
            "disabled": false,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hideLabel": true,
            "hidden": false,
            "buttonSize": "default",
            "buttonType": "success",
            "buttonPlain": true,
            "buttonRound": true,
            "buttonCircle": false,
            "buttonName": "Completed",
            "width": "",
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_sedssq8s",
            "remoteOption": "option_sedssq8s",
            "tableColumn": false,
            "subform": false,
            "shadow": "large",
            "dynamicValueType": "fx",
            "isDynamicValue": false,
            "defaultValue": ""
          },
          "events": {
            "onClick": "145p4b81",
            "onConfirm": "yc259hzm"
          },
          "key": "k9r6wd6j",
          "model": "button_save_as_completed",
          "rules": []
        }
      ],
      "events": {
        "onClick": "13hi9auo"
      },
      "key": "xb1nc9sx",
      "model": "flex_button",
      "rules": []
    },
    {
      "name": "对话框",
      "type": "dialog",
      "mainIcon": "对话框",
      "typeIcon": "对话框",
      "icon": "icon-Dialog",
      "group": "Container",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": {},
        "visible": false,
        "drawerMode": false,
        "customClass": "",
        "title": "Confirm Inventory",
        "width": "",
        "top": "15vh",
        "center": false,
        "cancelText": "Cancel",
        "showClose": true,
        "okText": "Confirm",
        "showCancel": true,
        "showOk": true,
        "confirmLoading": false,
        "dataBind": true,
        "remoteFunc": "func_652a3p76",
        "remoteOption": "option_652a3p76",
        "tableColumn": false,
        "subform": false
      },
      "list": [
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "The system suggests goods issuance based on the inventory's earliest created date as below.",
            "customClass": "",
            "hidden": false,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "20px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_x8o6g5gp",
            "remoteOption": "option_x8o6g5gp",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "x8o6g5gp",
          "model": "utext_x8o6g5gp",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Manual selection will override the system selection",
            "customClass": "",
            "hidden": false,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "20px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_wcdxef36",
            "remoteOption": "option_wcdxef36",
            "tableColumn": false,
            "subform": false,
            "height": "40px"
          },
          "events": {
            "onClick": ""
          },
          "key": "wcdxef36",
          "model": "utext_wcdxef36",
          "rules": []
        },
        {
          "name": "栅格布局",
          "type": "grid",
          "mainIcon": "栅格布局",
          "typeIcon": "栅格布局",
          "icon": "icon-RectangleCopy",
          "group": "Layout",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "columns": [
            {
              "type": "col",
              "options": {
                "span": 12,
                "offset": 0,
                "push": 0,
                "pull": 0,
                "xs": 24,
                "sm": 12,
                "md": 12,
                "lg": 12,
                "xl": 12,
                "customClass": ""
              },
              "list": [
                {
                  "name": "Item Code",
                  "type": "input",
                  "mainIcon": "单行文本",
                  "typeIcon": "多行文本",
                  "icon": "icon-input",
                  "group": "Text",
                  "groupSort": 1,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-input",
                  "options": {
                    "width": "",
                    "defaultValue": "",
                    "required": false,
                    "requiredMessage": "",
                    "dataType": "",
                    "dataTypeCheck": false,
                    "dataTypeMessage": "",
                    "pattern": "",
                    "patternCheck": false,
                    "patternMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "placeholder": "",
                    "customClass": "",
                    "disabled": true,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "showPassword": false,
                    "clearable": false,
                    "maxlength": "",
                    "showWordLimit": false,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_0qj7xszn",
                    "remoteOption": "option_0qj7xszn",
                    "tableColumn": false,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "0qj7xszn",
                  "model": "material_code",
                  "rules": []
                },
                {
                  "name": "Item Name",
                  "type": "input",
                  "mainIcon": "单行文本",
                  "typeIcon": "多行文本",
                  "icon": "icon-input",
                  "group": "Text",
                  "groupSort": 1,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-input",
                  "options": {
                    "width": "",
                    "defaultValue": "",
                    "required": false,
                    "requiredMessage": "",
                    "dataType": "",
                    "dataTypeCheck": false,
                    "dataTypeMessage": "",
                    "pattern": "",
                    "patternCheck": false,
                    "patternMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "placeholder": "",
                    "customClass": "",
                    "disabled": true,
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "showPassword": false,
                    "clearable": false,
                    "maxlength": "",
                    "showWordLimit": false,
                    "customProps": {},
                    "tip": "",
                    "remoteFunc": "func_94xf3hok",
                    "remoteOption": "option_94xf3hok",
                    "tableColumn": false,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "94xf3hok",
                  "model": "material_name",
                  "rules": []
                },
                {
                  "name": "UOM",
                  "type": "select",
                  "mainIcon": "下拉单选",
                  "typeIcon": "下拉单选",
                  "icon": "icon-select",
                  "group": "Select",
                  "groupSort": 2,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-select",
                  "options": {
                    "defaultValue": "",
                    "multiple": false,
                    "disabled": true,
                    "clearable": false,
                    "placeholder": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "width": "",
                    "options": [
                      {
                        "value": "Option 1",
                        "label": "Option 1"
                      },
                      {
                        "value": "Option 2",
                        "label": "Option 2"
                      },
                      {
                        "value": "Option 3",
                        "label": "Option 3"
                      }
                    ],
                    "remote": true,
                    "remoteType": "innerdatasource",
                    "remoteOption": "option_up5monrd",
                    "filterable": false,
                    "pagingEnabled": true,
                    "remoteOptions": [],
                    "props": {
                      "value": "id",
                      "label": "uom_name",
                      "cascade": "",
                      "children": "",
                      "image": "",
                      "icon": ""
                    },
                    "remoteFunc": "func_up5monrd",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": false,
                    "dataBind": true,
                    "customProps": {},
                    "tip": "",
                    "tableColumn": false,
                    "subform": false,
                    "paging_enabled": 1,
                    "paging_way": "Pagination",
                    "page_size": 10,
                    "more_fields": [],
                    "columns": [],
                    "datasource": {
                      "source": "UOM:Table:1901805375573839874",
                      "rules": {
                        "collectionId": "1901805375573839874",
                        "list": [
                          {
                            "id": 1723795236686,
                            "parentId": 1723795236685,
                            "isTop": true,
                            "prop": "",
                            "operator": "",
                            "valueType": "",
                            "value": "",
                            "type": "leaf",
                            "level": 1
                          }
                        ]
                      }
                    },
                    "url_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "valueLabel": ""
                        }
                      ]
                    },
                    "body_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "valueLabel": ""
                        }
                      ]
                    },
                    "request_params": {
                      "list": [
                        {
                          "prop": "",
                          "propLabel": "",
                          "operator": "",
                          "operatorLabel": "",
                          "valueType": "value",
                          "valueTypeLabel": "",
                          "valueLabel": ""
                        }
                      ]
                    }
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "up5monrd",
                  "model": "material_uom",
                  "rules": []
                },
                {
                  "name": "Row Index",
                  "type": "number",
                  "icon": "icon-number",
                  "mainIcon": "金额",
                  "typeIcon": "金额",
                  "group": "Number",
                  "groupSort": 0,
                  "enableScopes": ["Component", "Table", "Page"],
                  "el": "fm-number-rmb",
                  "options": {
                    "width": "",
                    "required": false,
                    "requiredMessage": "",
                    "validatorCheck": false,
                    "validator": "",
                    "defaultValue": 0,
                    "min": 0,
                    "max": 9999999,
                    "step": 1,
                    "disabled": true,
                    "controls": false,
                    "controlsPosition": "",
                    "customClass": "",
                    "labelWidth": 100,
                    "isLabelWidth": false,
                    "hidden": true,
                    "dataBind": true,
                    "precision": 0,
                    "customProps": {
                      "progressColor": "",
                      "dividingNumber": "",
                      "showNumber": "",
                      "viewMode": "",
                      "format": "rmb",
                      "cacheProp": true
                    },
                    "tip": "",
                    "remoteFunc": "func_45kyl96d",
                    "remoteOption": "option_45kyl96d",
                    "tableColumn": false,
                    "subform": false
                  },
                  "events": {
                    "onChange": "",
                    "onFocus": "",
                    "onBlur": ""
                  },
                  "novalid": {},
                  "key": "45kyl96d",
                  "model": "row_index",
                  "rules": []
                }
              ],
              "key": "ugsh508i"
            }
          ],
          "options": {
            "gutter": 0,
            "justify": "start",
            "align": "top",
            "customClass": "",
            "hidden": false,
            "flex": true,
            "responsive": true,
            "remoteFunc": "func_ngrf4riu",
            "remoteOption": "option_ngrf4riu",
            "tableColumn": false,
            "subform": false
          },
          "key": "ngrf4riu",
          "model": "grid_ngrf4riu",
          "rules": []
        },
        {
          "name": "Item Balance",
          "type": "table",
          "mainIcon": "子表单",
          "typeIcon": "子表单",
          "icon": "icon-table",
          "group": "Container",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": [],
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "disabled": false,
            "required": false,
            "validatorCheck": false,
            "validator": "",
            "paging": false,
            "pageSize": 5,
            "isAdd": false,
            "isDelete": false,
            "showControl": true,
            "virtualTable": true,
            "tip": "",
            "remoteFunc": "func_hoosq80l",
            "remoteOption": "option_hoosq80l",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true
          },
          "events": {
            "onChange": "",
            "onRowAdd": "",
            "onRowRemove": "",
            "onPageChange": ""
          },
          "tableColumns": [
            {
              "name": "Batch Number",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": true,
                "clearable": false,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_l953m1d5",
                "filterable": false,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "batch_number",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_l953m1d5",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": true,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Batch:Table:1902719754154655746",
                  "rules": {
                    "collectionId": "1902719754154655746",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "columns": []
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "l953m1d5",
              "model": "batch_id",
              "rules": []
            },
            {
              "name": "Location",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": true,
                "clearable": false,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_l953m1d5",
                "filterable": false,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "bin_location_combine",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_l953m1d5",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": true,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Bin Location:Table:1902282127538507778",
                  "rules": {
                    "collectionId": "1902282127538507778",
                    "list": [
                      {
                        "id": 1746428557549,
                        "parentId": 1746428557548,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "uytdqhhe",
              "model": "location_id",
              "rules": []
            },
            {
              "name": "Unrestricted",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_i79htokp",
                "remoteOption": "option_i79htokp",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "i79htokp",
              "model": "unrestricted_qty",
              "rules": []
            },
            {
              "name": "Reserved",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_i79htokp",
                "remoteOption": "option_i79htokp",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "ebtc2ysm",
              "model": "reserved_qty",
              "rules": []
            },
            {
              "name": "Quality Inspection",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_i79htokp",
                "remoteOption": "option_i79htokp",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "pi7xdd0c",
              "model": "qualityinsp_qty",
              "rules": []
            },
            {
              "name": "Blocked",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_i79htokp",
                "remoteOption": "option_i79htokp",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "2m0kzor9",
              "model": "block_qty",
              "rules": []
            },
            {
              "name": "In Transit",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_i79htokp",
                "remoteOption": "option_i79htokp",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "s9e5l96l",
              "model": "intransit_qty",
              "rules": []
            },
            {
              "name": "Balance Quantity",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_i79htokp",
                "remoteOption": "option_i79htokp",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "gbal55pp",
              "model": "balance_quantity",
              "rules": []
            },
            {
              "name": "Quantity",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": true,
                "validator": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconst rowIndex = data.gd_item_balance.row_index;\nconst gdStatus = data.gd_status;\n\nconst materialId = data.table_gd[rowIndex].material_id;\nconst gd_order_quantity = parseFloat(\n  data.table_gd[rowIndex].gd_order_quantity || 0\n);\nconst initialDeliveredQty = parseFloat(\n  data.table_gd[rowIndex].gd_initial_delivered_qty || 0\n);\n\nlet currentDialogTotal = 0;\nfor (let i = 0; i < data.gd_item_balance.table_item_balance.length; i++) {\n  currentDialogTotal += parseFloat(\n    data.gd_item_balance.table_item_balance[i].gd_quantity || 0\n  );\n}\n\nconst gd_delivered_qty = initialDeliveredQty + currentDialogTotal;\n\nconst parsedValue = parseFloat(value);\nconst unrestricted_field =\n  data.gd_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field =\n  data.gd_item_balance.table_item_balance[index].reserved_qty;\n\nif (!window.validationState) {\n  window.validationState = {};\n}\n\nif (Object.keys(window.validationState).length === 0) {\n  const rowCount = data.gd_item_balance.table_item_balance.length;\n  for (let i = 0; i < rowCount; i++) {\n    window.validationState[i] = true;\n  }\n}\n\nif (gdStatus === \"Created\" && reserved_field < parsedValue) {\n  window.validationState[index] = false;\n  callback(\"Reserved quantity is not enough\");\n  return;\n} else if (gdStatus !== \"Created\" && unrestricted_field < parsedValue) {\n  window.validationState[index] = false;\n  callback(\"Unrestricted quantity is not enough\");\n  return;\n}\n\n(async () => {\n  try {\n    console.log(\"materialid\", materialId);\n    if (materialId) {\n      const { data } = await db\n        .collection(\"Item\")\n        .where({ id: materialId })\n        .get();\n\n      console.log(\"data\", data);\n      if (data && data[0]) {\n        const orderLimit =\n          (gd_order_quantity * (100 + data[0].over_delivery_tolerance)) / 100;\n        console.log(\"Order limit with tolerance:\", orderLimit);\n        console.log(\"Initial delivered quantity:\", initialDeliveredQty);\n        console.log(\"Current dialog total:\", currentDialogTotal);\n        console.log(\"Total delivered quantity:\", gd_delivered_qty);\n\n        if (orderLimit < gd_delivered_qty) {\n          window.validationState[index] = false;\n          callback(\"Quantity exceeds delivery limit\");\n          return;\n        }\n      }\n    }\n\n    window.validationState[index] = true;\n    callback();\n  } catch (error) {\n    console.error(\"Error during validation:\", error);\n    window.validationState[index] = false;\n    callback(\"Error validating quantity\");\n  }\n})();\n",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": false,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 300,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_buyedf5h",
                "remoteOption": "option_buyedf5h",
                "tableColumn": true,
                "subform": false,
                "fixedColumn": true,
                "fixedColumnPosition": "right"
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "buyedf5h",
              "model": "gd_quantity",
              "rules": [
                {
                  "func": "const data = this.getValues();\nconst fieldParts = rule.field.split(\".\");\nconst index = fieldParts[2];\nconst rowIndex = data.gd_item_balance.row_index;\nconst gdStatus = data.gd_status;\n\nconst materialId = data.table_gd[rowIndex].material_id;\nconst gd_order_quantity = parseFloat(\n  data.table_gd[rowIndex].gd_order_quantity || 0\n);\nconst initialDeliveredQty = parseFloat(\n  data.table_gd[rowIndex].gd_initial_delivered_qty || 0\n);\n\nlet currentDialogTotal = 0;\nfor (let i = 0; i < data.gd_item_balance.table_item_balance.length; i++) {\n  currentDialogTotal += parseFloat(\n    data.gd_item_balance.table_item_balance[i].gd_quantity || 0\n  );\n}\n\nconst gd_delivered_qty = initialDeliveredQty + currentDialogTotal;\n\nconst parsedValue = parseFloat(value);\nconst unrestricted_field =\n  data.gd_item_balance.table_item_balance[index].unrestricted_qty;\nconst reserved_field =\n  data.gd_item_balance.table_item_balance[index].reserved_qty;\n\nif (!window.validationState) {\n  window.validationState = {};\n}\n\nif (Object.keys(window.validationState).length === 0) {\n  const rowCount = data.gd_item_balance.table_item_balance.length;\n  for (let i = 0; i < rowCount; i++) {\n    window.validationState[i] = true;\n  }\n}\n\nif (gdStatus === \"Created\" && reserved_field < parsedValue) {\n  window.validationState[index] = false;\n  callback(\"Reserved quantity is not enough\");\n  return;\n} else if (gdStatus !== \"Created\" && unrestricted_field < parsedValue) {\n  window.validationState[index] = false;\n  callback(\"Unrestricted quantity is not enough\");\n  return;\n}\n\n(async () => {\n  try {\n    console.log(\"materialid\", materialId);\n    if (materialId) {\n      const { data } = await db\n        .collection(\"Item\")\n        .where({ id: materialId })\n        .get();\n\n      console.log(\"data\", data);\n      if (data && data[0]) {\n        const orderLimit =\n          (gd_order_quantity * (100 + data[0].over_delivery_tolerance)) / 100;\n        console.log(\"Order limit with tolerance:\", orderLimit);\n        console.log(\"Initial delivered quantity:\", initialDeliveredQty);\n        console.log(\"Current dialog total:\", currentDialogTotal);\n        console.log(\"Total delivered quantity:\", gd_delivered_qty);\n\n        if (orderLimit < gd_delivered_qty) {\n          window.validationState[index] = false;\n          callback(\"Quantity exceeds delivery limit\");\n          return;\n        }\n      }\n    }\n\n    window.validationState[index] = true;\n    callback();\n  } catch (error) {\n    console.error(\"Error during validation:\", error);\n    window.validationState[index] = false;\n    callback(\"Error validating quantity\");\n  }\n})();\n"
                }
              ]
            }
          ],
          "key": "hoosq80l",
          "model": "table_item_balance",
          "rules": []
        }
      ],
      "events": {
        "onCancel": "y99itn3l",
        "onConfirm": "yc259hzm"
      },
      "key": "652a3p76",
      "model": "gd_item_balance",
      "rules": []
    },
    {
      "name": "对话框",
      "type": "dialog",
      "mainIcon": "对话框",
      "typeIcon": "对话框",
      "icon": "icon-Dialog",
      "group": "Container",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": {},
        "visible": false,
        "drawerMode": false,
        "customClass": "",
        "title": "Insufficient Inventory Alert",
        "width": "",
        "top": "15vh",
        "center": false,
        "cancelText": "Close",
        "showClose": true,
        "okText": "Confirm",
        "showCancel": true,
        "showOk": false,
        "confirmLoading": false,
        "dataBind": true,
        "remoteFunc": "func_hdabtm28",
        "remoteOption": "option_hdabtm28",
        "tableColumn": false,
        "subform": false
      },
      "list": [
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "The requested quantity for below items in the sales order exceeds the available inventory. Please review the details below:",
            "customClass": "",
            "hidden": false,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_aywpg49g",
            "remoteOption": "option_aywpg49g",
            "tableColumn": false,
            "subform": false,
            "height": "30px"
          },
          "events": {
            "onClick": ""
          },
          "key": "aywpg49g",
          "model": "utext_aywpg49g",
          "rules": []
        },
        {
          "name": "Insufficient Inventory",
          "type": "table",
          "mainIcon": "子表单",
          "typeIcon": "子表单",
          "icon": "icon-table",
          "group": "Container",
          "groupSort": 0,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": [],
            "customClass": "",
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": false,
            "dataBind": true,
            "disabled": false,
            "required": false,
            "validatorCheck": false,
            "validator": "",
            "paging": false,
            "pageSize": 5,
            "isAdd": false,
            "isDelete": false,
            "showControl": true,
            "virtualTable": true,
            "tip": "",
            "remoteFunc": "func_vnyb7y4o",
            "remoteOption": "option_vnyb7y4o",
            "tableColumn": false,
            "subform": false,
            "hideLabel": true
          },
          "events": {
            "onChange": "",
            "onRowAdd": "",
            "onRowRemove": "",
            "onPageChange": ""
          },
          "tableColumns": [
            {
              "name": "Item Code",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": true,
                "clearable": true,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_uuu60u46",
                "filterable": false,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "material_code",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_uuu60u46",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": true,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "datasource": {
                  "source": "Item:Table:1901546842240438273",
                  "rules": {
                    "collectionId": "1901546842240438273",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "columns": []
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "5213mefs",
              "model": "material_id",
              "rules": []
            },
            {
              "name": "Item Name",
              "type": "input",
              "mainIcon": "单行文本",
              "typeIcon": "多行文本",
              "icon": "icon-input",
              "group": "Text",
              "groupSort": 1,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-input",
              "options": {
                "width": "",
                "defaultValue": "",
                "required": false,
                "requiredMessage": "",
                "dataType": "",
                "dataTypeCheck": false,
                "dataTypeMessage": "",
                "pattern": "",
                "patternCheck": false,
                "patternMessage": "",
                "validatorCheck": false,
                "validator": "",
                "placeholder": "",
                "customClass": "",
                "disabled": true,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "showPassword": false,
                "clearable": false,
                "maxlength": "",
                "showWordLimit": false,
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_xkxxx5ny",
                "remoteOption": "option_xkxxx5ny",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "ixa7krsg",
              "model": "material_name",
              "rules": []
            },
            {
              "name": "Item UOM",
              "type": "select",
              "mainIcon": "下拉单选",
              "typeIcon": "下拉单选",
              "icon": "icon-select",
              "group": "Select",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-select",
              "options": {
                "defaultValue": "",
                "multiple": false,
                "disabled": true,
                "clearable": false,
                "placeholder": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "width": "",
                "options": [
                  {
                    "value": "Option 1",
                    "label": "Option 1"
                  },
                  {
                    "value": "Option 2",
                    "label": "Option 2"
                  },
                  {
                    "value": "Option 3",
                    "label": "Option 3"
                  }
                ],
                "remote": true,
                "remoteType": "innerdatasource",
                "remoteOption": "option_nm97yq9q",
                "filterable": false,
                "pagingEnabled": true,
                "remoteOptions": [],
                "props": {
                  "value": "id",
                  "label": "uom_name",
                  "cascade": "",
                  "children": "",
                  "image": "",
                  "icon": ""
                },
                "remoteFunc": "func_nm97yq9q",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "customProps": {},
                "tip": "",
                "tableColumn": true,
                "subform": false,
                "paging_enabled": 1,
                "paging_way": "Pagination",
                "page_size": 10,
                "more_fields": [],
                "columns": [],
                "datasource": {
                  "source": "UOM:Table:1901805375573839874",
                  "rules": {
                    "collectionId": "1901805375573839874",
                    "list": [
                      {
                        "id": 1723795236686,
                        "parentId": 1723795236685,
                        "isTop": true,
                        "prop": "",
                        "operator": "",
                        "valueType": "",
                        "value": "",
                        "type": "leaf",
                        "level": 1
                      }
                    ]
                  }
                },
                "url_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "body_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                },
                "request_params": {
                  "list": [
                    {
                      "prop": "",
                      "propLabel": "",
                      "operator": "",
                      "operatorLabel": "",
                      "valueType": "value",
                      "valueTypeLabel": "",
                      "valueLabel": ""
                    }
                  ]
                }
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "nm97yq9q",
              "model": "material_uom",
              "rules": []
            },
            {
              "name": "Order Quantity",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_z9pso0ym",
                "remoteOption": "option_z9pso0ym",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "z9pso0ym",
              "model": "order_quantity",
              "rules": []
            },
            {
              "name": "Undelivered Quantity",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_z9pso0ym",
                "remoteOption": "option_z9pso0ym",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "8g1gnpai",
              "model": "undelivered_qty",
              "rules": []
            },
            {
              "name": "Available Quantity",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_7enon0e2",
                "remoteOption": "option_7enon0e2",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "7enon0e2",
              "model": "available_qty",
              "rules": []
            },
            {
              "name": "Shortfall",
              "type": "number",
              "icon": "icon-number",
              "mainIcon": "数字",
              "typeIcon": "数字",
              "group": "Number",
              "groupSort": 2,
              "enableScopes": ["Component", "Table", "Page"],
              "el": "fm-number",
              "options": {
                "width": "",
                "required": false,
                "requiredMessage": "",
                "validatorCheck": false,
                "validator": "",
                "defaultValue": 0,
                "min": 0,
                "step": 1,
                "disabled": true,
                "controls": false,
                "controlsPosition": "",
                "customClass": "",
                "labelWidth": 100,
                "isLabelWidth": false,
                "hidden": false,
                "dataBind": true,
                "precision": 0,
                "customProps": {
                  "progressColor": "",
                  "dividingNumber": "",
                  "showNumber": "",
                  "viewMode": "",
                  "format": "rmb",
                  "cacheProp": true
                },
                "tip": "",
                "remoteFunc": "func_jxo70u5q",
                "remoteOption": "option_jxo70u5q",
                "tableColumn": true,
                "subform": false
              },
              "events": {
                "onChange": "",
                "onFocus": "",
                "onBlur": ""
              },
              "novalid": {},
              "key": "jxo70u5q",
              "model": "shortfall_qty",
              "rules": []
            }
          ],
          "key": "vnyb7y4o",
          "model": "table_insufficient",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "You can proceed with a partial delivery for available quantity. Return to the form page to confirm your selection or adjust the quantities for further processing.",
            "customClass": "",
            "hidden": false,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_qtpo9idh",
            "remoteOption": "option_qtpo9idh",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "qtpo9idh",
          "model": "utext_qtpo9idh",
          "rules": []
        }
      ],
      "events": {
        "onCancel": "5zn3n4yv",
        "onConfirm": ""
      },
      "key": "hdabtm28",
      "model": "dialog_insufficient",
      "rules": []
    },
    {
      "name": "Address",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "mxt0o5xy",
      "model": "billing_address_name",
      "rules": []
    },
    {
      "name": "Address",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "o825en4o",
      "model": "billing_address_phone",
      "rules": []
    },
    {
      "name": "Address",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "unjry2r2",
      "model": "billing_address_line_1",
      "rules": []
    },
    {
      "name": "Address Line 2",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "it78tv1l",
      "model": "billing_address_line_2",
      "rules": []
    },
    {
      "name": "Address Line 3",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "6si0ko9d",
      "model": "billing_address_line_3",
      "rules": []
    },
    {
      "name": "Address Line 4",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "i5flwczz",
      "model": "billing_address_line_4",
      "rules": []
    },
    {
      "name": "City",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_4hv4g8bc",
        "remoteOption": "option_4hv4g8bc",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "novalid": {},
      "key": "4hv4g8bc",
      "model": "billing_address_city",
      "rules": []
    },
    {
      "name": "Postal Code",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_4hv4g8bc",
        "remoteOption": "option_4hv4g8bc",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "novalid": {},
      "key": "mn9ln74r",
      "model": "billing_postal_code",
      "rules": []
    },
    {
      "name": "State",
      "type": "select",
      "mainIcon": "下拉单选",
      "typeIcon": "下拉单选",
      "icon": "icon-select",
      "group": "Select",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-select",
      "options": {
        "defaultValue": "",
        "multiple": false,
        "disabled": false,
        "clearable": false,
        "placeholder": "",
        "required": false,
        "requiredMessage": "",
        "validatorCheck": false,
        "validator": "",
        "width": "",
        "options": [
          {
            "value": "Option 1",
            "label": "Option 1"
          },
          {
            "value": "Option 2",
            "label": "Option 2"
          },
          {
            "value": "Option 3",
            "label": "Option 3"
          }
        ],
        "remote": true,
        "remoteType": "innerdatasource",
        "remoteOption": "option_bhnhz64c",
        "filterable": false,
        "remoteOptions": [],
        "props": {
          "value": "id",
          "label": "state_name",
          "cascade": "",
          "children": "",
          "image": "",
          "icon": ""
        },
        "remoteFunc": "func_bhnhz64c",
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "customProps": {},
        "tip": "",
        "tableColumn": false,
        "subform": false,
        "datasource": {
          "source": "State:Table:1902728532698710017",
          "rules": {
            "collectionId": "1902728532698710017",
            "list": [
              {
                "id": 1743503123841,
                "parentId": 1743503123840,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "value",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "labelWrap": true,
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        }
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "novalid": {},
      "key": "bhnhz64c",
      "model": "billing_address_state",
      "rules": []
    },
    {
      "name": "Country / Region",
      "type": "select",
      "mainIcon": "下拉单选",
      "typeIcon": "下拉单选",
      "icon": "icon-select",
      "group": "Select",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-select",
      "options": {
        "defaultValue": "",
        "multiple": false,
        "disabled": false,
        "clearable": false,
        "placeholder": "",
        "required": false,
        "requiredMessage": "",
        "validatorCheck": false,
        "validator": "",
        "width": "",
        "options": [
          {
            "value": "Option 1",
            "label": "Option 1"
          },
          {
            "value": "Option 2",
            "label": "Option 2"
          },
          {
            "value": "Option 3",
            "label": "Option 3"
          }
        ],
        "remote": true,
        "remoteType": "innerdatasource",
        "remoteOption": "option_bhnhz64c",
        "filterable": false,
        "remoteOptions": [],
        "props": {
          "value": "id",
          "label": "country_name",
          "cascade": "",
          "children": "",
          "image": "",
          "icon": ""
        },
        "remoteFunc": "func_bhnhz64c",
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "customProps": {},
        "tip": "",
        "tableColumn": false,
        "subform": false,
        "datasource": {
          "source": "Country:Table:1902728191097815041",
          "rules": {
            "collectionId": "1902728191097815041",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "labelWrap": true,
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "paging_enabled": 0,
        "paging_way": "Pagination",
        "page_size": 10,
        "more_fields": [],
        "columns": []
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "novalid": {},
      "key": "s2ukssvh",
      "model": "billing_address_country",
      "rules": []
    },
    {
      "name": "Attention",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "g38ue4hs",
      "model": "billing_attention",
      "rules": []
    },
    {
      "name": "Address Name",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "le52982s",
      "model": "shipping_address_name",
      "rules": []
    },
    {
      "name": "Contact Number",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "8qcnczo4",
      "model": "shipping_address_phone",
      "rules": []
    },
    {
      "name": "Address",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "z8c48yc8",
      "model": "shipping_address_line_1",
      "rules": []
    },
    {
      "name": "Address Line 2",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "n69hc7g3",
      "model": "shipping_address_line_2",
      "rules": []
    },
    {
      "name": "Address Line 3",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "aazqu2dq",
      "model": "shipping_address_line_3",
      "rules": []
    },
    {
      "name": "Address Line 4",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true,
        "hideLabel": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "2fhiw6ov",
      "model": "shipping_address_line_4",
      "rules": []
    },
    {
      "name": "City",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_4hv4g8bc",
        "remoteOption": "option_4hv4g8bc",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "novalid": {},
      "key": "2fwf34nm",
      "model": "shipping_address_city",
      "rules": []
    },
    {
      "name": "Postal Code",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_4hv4g8bc",
        "remoteOption": "option_4hv4g8bc",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "novalid": {},
      "key": "10kxmua8",
      "model": "shipping_postal_code",
      "rules": []
    },
    {
      "name": "State",
      "type": "select",
      "mainIcon": "下拉单选",
      "typeIcon": "下拉单选",
      "icon": "icon-select",
      "group": "Select",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-select",
      "options": {
        "defaultValue": "",
        "multiple": false,
        "disabled": false,
        "clearable": false,
        "placeholder": "",
        "required": false,
        "requiredMessage": "",
        "validatorCheck": false,
        "validator": "",
        "width": "",
        "options": [
          {
            "value": "Option 1",
            "label": "Option 1"
          },
          {
            "value": "Option 2",
            "label": "Option 2"
          },
          {
            "value": "Option 3",
            "label": "Option 3"
          }
        ],
        "remote": true,
        "remoteType": "innerdatasource",
        "remoteOption": "option_bhnhz64c",
        "filterable": false,
        "remoteOptions": [],
        "props": {
          "value": "id",
          "label": "state_name",
          "cascade": "",
          "children": "",
          "image": "",
          "icon": ""
        },
        "remoteFunc": "func_bhnhz64c",
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "customProps": {},
        "tip": "",
        "tableColumn": false,
        "subform": false,
        "datasource": {
          "source": "State:Table:1902728532698710017",
          "rules": {
            "collectionId": "1902728532698710017",
            "list": [
              {
                "id": 1743503180126,
                "parentId": 1743503180125,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "value",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "labelWrap": true,
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        }
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "novalid": {},
      "key": "dbyh3a39",
      "model": "shipping_address_state",
      "rules": []
    },
    {
      "name": "Country / Region",
      "type": "select",
      "mainIcon": "下拉单选",
      "typeIcon": "下拉单选",
      "icon": "icon-select",
      "group": "Select",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-select",
      "options": {
        "defaultValue": "",
        "multiple": false,
        "disabled": false,
        "clearable": false,
        "placeholder": "",
        "required": false,
        "requiredMessage": "",
        "validatorCheck": false,
        "validator": "",
        "width": "",
        "options": [
          {
            "value": "Option 1",
            "label": "Option 1"
          },
          {
            "value": "Option 2",
            "label": "Option 2"
          },
          {
            "value": "Option 3",
            "label": "Option 3"
          }
        ],
        "remote": true,
        "remoteType": "innerdatasource",
        "remoteOption": "option_bhnhz64c",
        "filterable": false,
        "remoteOptions": [],
        "props": {
          "value": "id",
          "label": "country_name",
          "cascade": "",
          "children": "",
          "image": "",
          "icon": ""
        },
        "remoteFunc": "func_bhnhz64c",
        "customClass": "",
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "customProps": {},
        "tip": "",
        "tableColumn": false,
        "subform": false,
        "datasource": {
          "source": "Country:Table:1902728191097815041",
          "rules": {
            "collectionId": "1902728191097815041",
            "list": [
              {
                "id": 1723795236686,
                "parentId": 1723795236685,
                "isTop": true,
                "prop": "",
                "operator": "",
                "valueType": "",
                "value": "",
                "type": "leaf",
                "level": 1
              }
            ]
          }
        },
        "labelWrap": true,
        "url_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "body_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "request_params": {
          "list": [
            {
              "prop": "",
              "propLabel": "",
              "operator": "",
              "operatorLabel": "",
              "valueType": "value",
              "valueTypeLabel": "",
              "valueLabel": ""
            }
          ]
        },
        "paging_enabled": 0,
        "paging_way": "Pagination",
        "page_size": 10,
        "more_fields": [],
        "columns": []
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "novalid": {},
      "key": "brdiqu1n",
      "model": "shipping_address_country",
      "rules": []
    },
    {
      "name": "Attention",
      "type": "input",
      "mainIcon": "单行文本",
      "typeIcon": "多行文本",
      "icon": "icon-input",
      "group": "Text",
      "groupSort": 1,
      "enableScopes": ["Component", "Table", "Page"],
      "el": "fm-input",
      "options": {
        "width": "",
        "defaultValue": "",
        "required": false,
        "requiredMessage": "",
        "dataType": "",
        "dataTypeCheck": false,
        "dataTypeMessage": "",
        "pattern": "",
        "patternCheck": false,
        "patternMessage": "",
        "validatorCheck": false,
        "validator": "",
        "placeholder": "",
        "customClass": "",
        "disabled": false,
        "labelWidth": 100,
        "isLabelWidth": false,
        "hidden": true,
        "dataBind": true,
        "showPassword": false,
        "clearable": false,
        "maxlength": "",
        "showWordLimit": false,
        "customProps": {},
        "tip": "",
        "remoteFunc": "func_unjry2r2",
        "remoteOption": "option_unjry2r2",
        "tableColumn": false,
        "subform": false,
        "labelWrap": true
      },
      "events": {
        "onChange": "",
        "onFocus": "",
        "onBlur": ""
      },
      "key": "6evepsdk",
      "model": "shipping_attention",
      "rules": []
    },
    {
      "name": "对话框",
      "type": "dialog",
      "mainIcon": "对话框",
      "typeIcon": "对话框",
      "icon": "icon-Dialog",
      "group": "Container",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": {},
        "visible": false,
        "drawerMode": false,
        "customClass": "",
        "title": "",
        "width": "60%",
        "top": "15vh",
        "center": false,
        "cancelText": "Cancel",
        "showClose": true,
        "okText": "Confirm",
        "showCancel": false,
        "showOk": false,
        "confirmLoading": false,
        "dataBind": true,
        "remoteFunc": "func_ftzkm1a1",
        "remoteOption": "option_ftzkm1a1",
        "tableColumn": false,
        "subform": false
      },
      "list": [
        {
          "name": "提示",
          "type": "alert",
          "mainIcon": "提示",
          "typeIcon": "提示",
          "icon": "icon-jinggaotishi",
          "group": "Layout",
          "groupSort": 8,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "hidden": true,
            "title": "Alert: Credit Limit Exceeded - Review Required",
            "type": "error",
            "description": "",
            "closable": false,
            "center": false,
            "showIcon": false,
            "effect": "light",
            "width": "",
            "customProps": {},
            "remoteFunc": "func_apxefyjf",
            "remoteOption": "option_apxefyjf",
            "tableColumn": false,
            "subform": false,
            "customClass": ""
          },
          "key": "apxefyjf",
          "model": "alert_credit_limit",
          "rules": []
        },
        {
          "name": "提示",
          "type": "alert",
          "mainIcon": "提示",
          "typeIcon": "提示",
          "icon": "icon-jinggaotishi",
          "group": "Layout",
          "groupSort": 8,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "hidden": true,
            "title": "    Alert: Overdue Limit Exceeded - Review Required",
            "type": "error",
            "description": "",
            "closable": false,
            "center": false,
            "showIcon": false,
            "effect": "light",
            "width": "",
            "customProps": {},
            "remoteFunc": "func_apxefyjf",
            "remoteOption": "option_apxefyjf",
            "tableColumn": false,
            "subform": false,
            "customClass": ""
          },
          "key": "shmjfbw8",
          "model": "alert_overdue_limit",
          "rules": []
        },
        {
          "name": "提示",
          "type": "alert",
          "mainIcon": "提示",
          "typeIcon": "提示",
          "icon": "icon-jinggaotishi",
          "group": "Layout",
          "groupSort": 8,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "hidden": true,
            "title": "    Alert: Credit Limit and Overdue Limit Exceeded - Review Required",
            "type": "error",
            "description": "",
            "closable": false,
            "center": false,
            "showIcon": false,
            "effect": "light",
            "width": "",
            "customProps": {},
            "remoteFunc": "func_apxefyjf",
            "remoteOption": "option_apxefyjf",
            "tableColumn": false,
            "subform": false,
            "customClass": ""
          },
          "key": "pbza4ifn",
          "model": "alert_credit_overdue",
          "rules": []
        },
        {
          "name": "提示",
          "type": "alert",
          "mainIcon": "提示",
          "typeIcon": "提示",
          "icon": "icon-jinggaotishi",
          "group": "Layout",
          "groupSort": 8,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "hidden": true,
            "title": "Customer Account Suspended",
            "type": "error",
            "description": "",
            "closable": false,
            "center": false,
            "showIcon": false,
            "effect": "light",
            "width": "",
            "customProps": {},
            "remoteFunc": "func_apxefyjf",
            "remoteOption": "option_apxefyjf",
            "tableColumn": false,
            "subform": false,
            "customClass": ""
          },
          "key": "9yacn1a9",
          "model": "alert_suspended",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "The customer has exceed the allowed credit limit.",
            "customClass": "",
            "hidden": true,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "30px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_vk4bm7er",
            "remoteOption": "option_vk4bm7er",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "vk4bm7er",
          "model": "text_credit_limit",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "The customer has exceeded the allowed overdue limit.",
            "customClass": "",
            "hidden": true,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "30px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_vk4bm7er",
            "remoteOption": "option_vk4bm7er",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "9kcknz99",
          "model": "text_overdue_limit",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "The customer has exceeded both credit limit and overdue limit.",
            "customClass": "",
            "hidden": true,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "30px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_vk4bm7er",
            "remoteOption": "option_vk4bm7er",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "se7k4oxh",
          "model": "text_credit_overdue",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "This order cannot be processed at this time due to the customer's suspended account status.",
            "customClass": "",
            "hidden": true,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "30px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_vk4bm7er",
            "remoteOption": "option_vk4bm7er",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "buduvrzl",
          "model": "text_suspended",
          "rules": []
        },
        {
          "name": "Total Allowed Credit",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "30%",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_1l8ld9uj",
            "remoteOption": "option_1l8ld9uj",
            "tableColumn": false,
            "subform": false,
            "labelWrap": false,
            "labelBold": true
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "key": "1l8ld9uj",
          "model": "total_allowed_credit",
          "rules": []
        },
        {
          "name": "Total Credit",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "30%",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_1l8ld9uj",
            "remoteOption": "option_1l8ld9uj",
            "tableColumn": false,
            "subform": false,
            "labelWrap": false,
            "labelBold": true
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "key": "rg21y4bf",
          "model": "total_credit",
          "rules": []
        },
        {
          "name": "Total Allowed Overdue",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "30%",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_1l8ld9uj",
            "remoteOption": "option_1l8ld9uj",
            "tableColumn": false,
            "subform": false,
            "labelWrap": false,
            "labelBold": true
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "key": "ajlounvd",
          "model": "total_allowed_overdue",
          "rules": []
        },
        {
          "name": "Total Overdue",
          "type": "input",
          "mainIcon": "单行文本",
          "typeIcon": "多行文本",
          "icon": "icon-input",
          "group": "Text",
          "groupSort": 1,
          "enableScopes": ["Component", "Table", "Page"],
          "el": "fm-input",
          "options": {
            "width": "30%",
            "defaultValue": "",
            "required": false,
            "requiredMessage": "",
            "dataType": "",
            "dataTypeCheck": false,
            "dataTypeMessage": "",
            "pattern": "",
            "patternCheck": false,
            "patternMessage": "",
            "validatorCheck": false,
            "validator": "",
            "placeholder": "",
            "customClass": "",
            "disabled": true,
            "labelWidth": 100,
            "isLabelWidth": false,
            "hidden": true,
            "dataBind": true,
            "showPassword": false,
            "clearable": false,
            "maxlength": "",
            "showWordLimit": false,
            "customProps": {},
            "tip": "",
            "remoteFunc": "func_1l8ld9uj",
            "remoteOption": "option_1l8ld9uj",
            "tableColumn": false,
            "subform": false,
            "labelWrap": false,
            "labelBold": true
          },
          "events": {
            "onChange": "",
            "onFocus": "",
            "onBlur": ""
          },
          "key": "p12hiq6p",
          "model": "total_overdue",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Please review the credit limit or adjust the order amount before issuing the SO.",
            "customClass": "",
            "hidden": true,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "30px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_vk4bm7er",
            "remoteOption": "option_vk4bm7er",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "wlvuqi2a",
          "model": "text_1",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Please review overdue invoices before proceeding.",
            "customClass": "",
            "hidden": true,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "30px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_vk4bm7er",
            "remoteOption": "option_vk4bm7er",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "1sarll1m",
          "model": "text_2",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Please review both limits before proceeding.",
            "customClass": "",
            "hidden": true,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "30px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_vk4bm7er",
            "remoteOption": "option_vk4bm7er",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "owfza30q",
          "model": "text_3",
          "rules": []
        },
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Please confirm if you wants to save it.",
            "customClass": "",
            "hidden": true,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "30px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_vk4bm7er",
            "remoteOption": "option_vk4bm7er",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "3tkruthg",
          "model": "text_4",
          "rules": []
        },
        {
          "name": "自动布局",
          "type": "flex",
          "el": "su-fm-flex",
          "mainIcon": "自动布局",
          "typeIcon": "自动布局",
          "icon": "icon-zhediemianban",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "title": "布局",
            "customClass": "",
            "hidden": false,
            "recursive": false,
            "recursiveStyleFx": "",
            "slotTarget": "",
            "defaultValue": "",
            "flexDirection": "row",
            "flexWrap": "nowrap",
            "alignItems": "flex-end",
            "justifyContent": "flex-end",
            "hGap": "",
            "vGap": "",
            "grid": {
              "row": {
                "value": "",
                "visible": true
              },
              "col": {
                "value": "",
                "visible": true
              },
              "use": false
            },
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "height": "",
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "hoverClass": "",
            "overflow": "",
            "styleFx": "",
            "behave": "",
            "remoteFunc": "func_mzscc7kd",
            "remoteOption": "option_mzscc7kd",
            "tableColumn": false,
            "subform": false,
            "paging_enabled": 0,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "columns": [],
            "datasource": {
              "rules": {
                "collectionId": "",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            }
          },
          "list": [
            {
              "name": "Back",
              "type": "button",
              "mainIcon": "按钮",
              "typeIcon": "按钮",
              "icon": "icon-button",
              "group": "Buttons",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hideLabel": true,
                "hidden": true,
                "buttonSize": "default",
                "buttonType": "info",
                "buttonPlain": true,
                "buttonRound": true,
                "buttonCircle": false,
                "buttonName": "Back",
                "width": "",
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_4hwibhi7",
                "remoteOption": "option_4hwibhi7",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onClick": "ojxqozbb"
              },
              "key": "4hwibhi7",
              "model": "button_back",
              "rules": []
            },
            {
              "name": "No",
              "type": "button",
              "mainIcon": "按钮",
              "typeIcon": "按钮",
              "icon": "icon-button",
              "group": "Buttons",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hideLabel": true,
                "hidden": true,
                "buttonSize": "default",
                "buttonType": "danger",
                "buttonPlain": true,
                "buttonRound": true,
                "buttonCircle": false,
                "buttonName": "No",
                "width": "",
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_4hwibhi7",
                "remoteOption": "option_4hwibhi7",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onClick": "ojxqozbb"
              },
              "key": "s22f4eud",
              "model": "button_no",
              "rules": []
            },
            {
              "name": "Yes",
              "type": "button",
              "mainIcon": "按钮",
              "typeIcon": "按钮",
              "icon": "icon-button",
              "group": "Buttons",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hideLabel": true,
                "hidden": true,
                "buttonSize": "default",
                "buttonType": "success",
                "buttonPlain": true,
                "buttonRound": true,
                "buttonCircle": false,
                "buttonName": "Yes",
                "width": "",
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_4hwibhi7",
                "remoteOption": "option_4hwibhi7",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onClick": "e5v7cseq"
              },
              "key": "3uzfc202",
              "model": "button_yes",
              "rules": []
            }
          ],
          "events": {
            "onClick": ""
          },
          "key": "mzscc7kd",
          "model": "flex_mzscc7kd",
          "rules": []
        }
      ],
      "events": {
        "onCancel": "",
        "onConfirm": ""
      },
      "key": "ftzkm1a1",
      "model": "dialog_credit_limit",
      "rules": []
    },
    {
      "name": "对话框",
      "type": "dialog",
      "mainIcon": "对话框",
      "typeIcon": "对话框",
      "icon": "icon-Dialog",
      "group": "Container",
      "groupSort": 2,
      "enableScopes": ["Component", "Table", "Page"],
      "options": {
        "defaultValue": {},
        "visible": false,
        "drawerMode": false,
        "customClass": "",
        "title": "Customer Credit Limit is not up to date !!",
        "width": "60%",
        "top": "15vh",
        "center": false,
        "cancelText": "Cancel",
        "showClose": true,
        "okText": "Confirm",
        "showCancel": false,
        "showOk": false,
        "confirmLoading": false,
        "dataBind": true,
        "remoteFunc": "func_geibh7uf",
        "remoteOption": "option_geibh7uf",
        "tableColumn": false,
        "subform": false
      },
      "list": [
        {
          "name": "文字",
          "type": "utext",
          "el": "su-fm-text",
          "mainIcon": "文字",
          "typeIcon": "文字",
          "icon": "icon-wenzishezhi-",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "defaultValue": "Do u want to sync customer's latest credit limit ?",
            "customClass": "",
            "hidden": true,
            "isRich": false,
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "maxWidth": "",
            "lineHeight": "30px",
            "color": "#333333",
            "fontSize": "14px",
            "fontWeight": "400",
            "textAlign": "left",
            "fontStyle": "",
            "textOverflow": "",
            "whiteSpace": "",
            "lines": 0,
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "styleFx": "",
            "remoteFunc": "func_vk4bm7er",
            "remoteOption": "option_vk4bm7er",
            "tableColumn": false,
            "subform": false
          },
          "events": {
            "onClick": ""
          },
          "key": "pwd2u9m1",
          "model": "utext_pwd2u9m1",
          "rules": []
        },
        {
          "name": "自动布局",
          "type": "flex",
          "el": "su-fm-flex",
          "mainIcon": "自动布局",
          "typeIcon": "自动布局",
          "icon": "icon-zhediemianban",
          "group": "Design",
          "groupSort": 6,
          "enableScopes": ["Component", "Table", "Page"],
          "options": {
            "title": "布局",
            "customClass": "",
            "hidden": false,
            "recursive": false,
            "recursiveStyleFx": "",
            "slotTarget": "",
            "defaultValue": "",
            "flexDirection": "row",
            "flexWrap": "nowrap",
            "alignItems": "flex-end",
            "justifyContent": "flex-end",
            "hGap": "",
            "vGap": "",
            "grid": {
              "row": {
                "value": "",
                "visible": true
              },
              "col": {
                "value": "",
                "visible": true
              },
              "use": false
            },
            "padding": ["", "", "", ""],
            "margin": ["", "", "", ""],
            "boxSizing": "border-box",
            "width": "",
            "height": "",
            "radius": ["", "", "", ""],
            "position": "",
            "positions": ["", "", "", ""],
            "zIndex": "",
            "flex": "",
            "flexGrow": "",
            "flexShrink": "",
            "fills": [],
            "borders": [],
            "effects": [],
            "states": [],
            "hoverClass": "",
            "overflow": "",
            "styleFx": "",
            "behave": "",
            "remoteFunc": "func_mzscc7kd",
            "remoteOption": "option_mzscc7kd",
            "tableColumn": false,
            "subform": false,
            "paging_enabled": 0,
            "paging_way": "Pagination",
            "page_size": 10,
            "more_fields": [],
            "columns": [],
            "datasource": {
              "rules": {
                "collectionId": "",
                "list": [
                  {
                    "id": 1723795236686,
                    "parentId": 1723795236685,
                    "isTop": true,
                    "prop": "",
                    "operator": "",
                    "valueType": "",
                    "value": "",
                    "type": "leaf",
                    "level": 1
                  }
                ]
              }
            },
            "url_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "body_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "request_params": {
              "list": [
                {
                  "prop": "",
                  "propLabel": "",
                  "operator": "",
                  "operatorLabel": "",
                  "valueType": "value",
                  "valueTypeLabel": "",
                  "valueLabel": ""
                }
              ]
            },
            "remote": false,
            "remoteType": "datasource"
          },
          "list": [
            {
              "name": "Cancel",
              "type": "button",
              "mainIcon": "按钮",
              "typeIcon": "按钮",
              "icon": "icon-button",
              "group": "Buttons",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hideLabel": true,
                "hidden": false,
                "buttonSize": "default",
                "buttonType": "info",
                "buttonPlain": true,
                "buttonRound": true,
                "buttonCircle": false,
                "buttonName": "Cancel",
                "width": "",
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_4hwibhi7",
                "remoteOption": "option_4hwibhi7",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onClick": "ol2yrfe5"
              },
              "key": "vi93e1t1",
              "model": "button_cancel",
              "rules": []
            },
            {
              "name": "Sync",
              "type": "button",
              "mainIcon": "按钮",
              "typeIcon": "按钮",
              "icon": "icon-button",
              "group": "Buttons",
              "groupSort": 0,
              "enableScopes": ["Component", "Table", "Page"],
              "options": {
                "customClass": "",
                "disabled": false,
                "labelWidth": 100,
                "isLabelWidth": false,
                "hideLabel": true,
                "hidden": false,
                "buttonSize": "default",
                "buttonType": "primary",
                "buttonPlain": true,
                "buttonRound": true,
                "buttonCircle": false,
                "buttonName": "Sync",
                "width": "",
                "customProps": {},
                "tip": "",
                "remoteFunc": "func_4hwibhi7",
                "remoteOption": "option_4hwibhi7",
                "tableColumn": false,
                "subform": false
              },
              "events": {
                "onClick": "qr1v486c"
              },
              "key": "zqc001kz",
              "model": "button_sync",
              "rules": []
            }
          ],
          "events": {
            "onClick": ""
          },
          "key": "d2i03lvf",
          "model": "flex_d2i03lvf",
          "rules": []
        }
      ],
      "events": {
        "onCancel": "",
        "onConfirm": ""
      },
      "key": "geibh7uf",
      "model": "dialog_accurate",
      "rules": []
    }
  ],
  "config": {
    "labelWidth": 190,
    "labelPosition": "left",
    "size": "default",
    "customClass": "padding",
    "ui": "element",
    "layout": "horizontal",
    "width": "100%",
    "hideLabel": false,
    "hideErrorMessage": false,
    "eventScript": [
      {
        "key": "onFormChange",
        "name": "onFormChange",
        "type": "rule"
      },
      {
        "key": "mounted",
        "name": "mounted",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "apgy2q5e",
            "action": "hide",
            "options": {
              "fields": [
                "self_pickup",
                "courier_service",
                "company_truck",
                "shipping_service"
              ],
              "condition": "",
              "isCondition": false
            }
          },
          {
            "key": "uej81z9m",
            "action": "js",
            "options": {
              "func": "// Helper functions\nconst generatePrefix = (prefixData) => {\n  const now = new Date();\n  let prefixToShow = prefixData.current_prefix_config;\n\n  prefixToShow = prefixToShow.replace(\"prefix\", prefixData.prefix_value);\n  prefixToShow = prefixToShow.replace(\"suffix\", prefixData.suffix_value);\n  prefixToShow = prefixToShow.replace(\n    \"month\",\n    String(now.getMonth() + 1).padStart(2, \"0\")\n  );\n  prefixToShow = prefixToShow.replace(\n    \"day\",\n    String(now.getDate()).padStart(2, \"0\")\n  );\n  prefixToShow = prefixToShow.replace(\"year\", now.getFullYear());\n  prefixToShow = prefixToShow.replace(\n    \"running_number\",\n    String(prefixData.running_number).padStart(prefixData.padding_zeroes, \"0\")\n  );\n\n  return prefixToShow;\n};\n\nconst checkUniqueness = async (generatedPrefix, organizationId) => {\n  const existingDoc = await db\n    .collection(\"goods_delivery\")\n    .where({ delivery_no: generatedPrefix, organization_id: organizationId })\n    .get();\n\n  return !existingDoc.data || existingDoc.data.length === 0;\n};\n\nconst findUniquePrefix = async (prefixData, organizationId) => {\n  let prefixToShow;\n  let runningNumber = prefixData.running_number || 1;\n  let isUnique = false;\n  let maxAttempts = 10;\n  let attempts = 0;\n\n  while (!isUnique && attempts < maxAttempts) {\n    attempts++;\n    prefixToShow = generatePrefix({\n      ...prefixData,\n      running_number: runningNumber,\n    });\n    isUnique = await checkUniqueness(prefixToShow, organizationId);\n    if (!isUnique) {\n      runningNumber++;\n    }\n  }\n\n  if (!isUnique) {\n    throw new Error(\n      \"Could not generate a unique Goods Delivery number after maximum attempts\"\n    );\n  }\n\n  return { prefixToShow, runningNumber };\n};\n\nconst getPrefixData = async (organizationId) => {\n  const prefixEntry = await db\n    .collection(\"prefix_configuration\")\n    .where({\n      document_types: \"Goods Delivery\",\n        is_deleted: 0,\n        organization_id: organizationId,\n    })\n    .get();\n\n  if (!prefixEntry.data || prefixEntry.data.length === 0) {\n    return null;\n  } else {\n    if(prefixEntry.data[0].is_active === 0){\n        this.disabled(['delivery_no'], false)\n    } else {\n        this.disabled(['delivery_no'], true)\n    }\n\n  }\n\n  return prefixEntry.data[0];\n};\n\nconst setPrefix = async (organizationId) => {\n  const prefixData = await getPrefixData(organizationId);\n\n  if (prefixData && prefixData.is_active === 1) {\n    const { prefixToShow } = await findUniquePrefix(prefixData, organizationId);\n    this.setData({ delivery_no: prefixToShow });\n    \n  } \n};\n\nconst showStatusHTML = (status) => {\n  switch (status) {\n    case \"Draft\":\n      this.display([\"draft_status\"]);\n      break;\n    case \"Created\":\n      this.display([\"created_status\"]);\n      break;\n    case \"Completed\":\n      this.display([\"completed_status\"]);\n      break;\n    case \"Cancelled\":\n      this.display([\"cancel_status\"]);\n      break;\n    default:\n      break;\n  }\n};\n\nconst disabledField = async (status) => {\n  if (status === \"Completed\") {\n    this.disabled(\n      [\n        \"gd_status\",\n        \"so_id\",\n        \"so_no\",\n        \"fake_so_id\",\n        \"gd_billing_name\",\n        \"gd_billing_cp\",\n        \"gd_billing_address\",\n        \"gd_shipping_address\",\n        \"delivery_no\",\n        \"gd_ref_doc\",\n        \"customer_name\",\n        \"gd_contact_name\",\n        \"contact_number\",\n        \"email_address\",\n        \"document_description\",\n        \"plant_id\",\n        \"organization_id\",\n        \"gd_delivery_method\",\n        \"delivery_date\",\n        \"driver_name\",\n        \"driver_contact_no\",\n        \"validity_of_collection\",\n        \"vehicle_no\",\n        \"pickup_date\",\n        \"courier_company\",\n        \"shipping_date\",\n        \"freight_charges\",\n        \"tracking_number\",\n        \"est_arrival_date\",\n        \"driver_cost\",\n        \"est_delivery_date\",\n        \"shipping_company\",\n        \"shipping_method\",\n        \"order_remark\",\n        \"billing_address_line_1\",\n        \"billing_address_line_2\",\n        \"billing_address_line_3\",\n        \"billing_address_line_4\",\n        \"billing_address_city\",\n        \"billing_address_state\",\n        \"billing_address_country\",\n        \"billing_postal_code\",\n        \"shipping_address_line_1\",\n        \"shipping_address_line_2\",\n        \"shipping_address_line_3\",\n        \"shipping_address_line_4\",\n        \"shipping_address_city\",\n        \"shipping_address_state\",\n        \"shipping_address_country\",\n        \"shipping_postal_code\",\n        \"gd_item_balance.table_item_balance\",\n      ],\n      true\n    );\n\n    // Disable table rows\n    disableTableRows();\n\n    // Hide buttons and links\n    this.hide([\n      \"link_billing_address\",\n      \"link_shipping_address\",\n      \"button_save_as_draft\",\n      \"button_save_as_completed\",\n      \"button_save_as_created\",\n      \"so_id\",\n      \"fake_so_id\",\n    ]);\n\n    this.display([\"so_no\"]);\n  } else {\n    if(status === 'Created'){\n      this.hide([\n      \"button_save_as_draft\",\n    ]);\n    }\n    this.disabled(['gd_ref_doc', 'gd_delivery_method', 'document_description', 'order_remark'], false);\n    this.hide([\"fake_so_id\"]);\n    this.display(\"so_id\");\n  }\n};\n\nconst disableTableRows = () => {\n  setTimeout(() => {\n    const data = this.getValues();\n    const rows = data.table_gd || [];\n\n    rows.forEach((row, index) => {\n      const fieldNames = Object.keys(row).filter(\n        (key) => key !== \"gd_delivery_qty\"\n      );\n\n      const fieldsToDisable = fieldNames.map(\n        (field) => `table_gd.${index}.${field}`\n      );\n\n      this.disabled(fieldsToDisable, true);\n    });\n  }, 1000);\n};\n\nconst displayDeliveryMethod = async () => {\n  const deliveryMethodName = this.getValue(\"gd_delivery_method\");\n  console.log(\"deliveryMethodName\", deliveryMethodName);\n\n  if (\n    deliveryMethodName &&\n    typeof deliveryMethodName === \"string\" &&\n    deliveryMethodName.trim() !== \"\"\n  ) {\n    this.setData({ delivery_method_text: deliveryMethodName });\n\n    const visibilityMap = {\n      \"Self Pickup\": \"self_pickup\",\n      \"Courier Service\": \"courier_service\",\n      \"Company Truck\": \"company_truck\",\n      \"Shipping Service\": \"shipping_service\",\n      \"3rd Party Transporter\": \"third_party_transporter\",\n    };\n\n    const selectedField = visibilityMap[deliveryMethodName] || null;\n    const fields = [\n      \"self_pickup\",\n      \"courier_service\",\n      \"company_truck\",\n      \"shipping_service\",\n      \"third_party_transporter\",\n    ];\n\n    if (!selectedField) {\n      this.hide(fields);\n    } else {\n      fields.forEach((field) => {\n        field === selectedField ? this.display(field) : this.hide(field);\n      });\n    }\n  } else {\n    this.setData({ delivery_method_text: \"\" });\n\n    const fields = [\n      \"self_pickup\",\n      \"courier_service\",\n      \"company_truck\",\n      \"shipping_service\",\n      \"third_party_transporter\",\n    ];\n    this.hide(fields);\n  }\n};\n\nconst setPlant = async (organizationId) => {\n  const deptId = this.getVarSystem('deptIds').split(',')[0];\n  let plantId = '';\n  if(deptId === organizationId){\n      const resPlant = await db.collection('blade_dept').where({ parent_id: deptId }).get();\n      \n      if(!resPlant && resPlant.data.length === 0){\n          plantId = deptId\n      } else {\n          plantId = ''\n      }\n  } else {\n      plantId = deptId\n  }\n\n  this.setData({ organization_id: organizationId, plant_id: plantId, delivery_date: new Date().toISOString().split('T')[0] });\n}\n\nconst checkAccIntegrationType = async (organizationId) => {\n    if(organizationId) {\n        const resAI = await db.collection('accounting_integration').where({ organization_id: organizationId }).get();\n\n        if(resAI && resAI.data.length > 0){\n            const aiData = resAI.data[0];\n\n            this.setData({ acc_integration_type: aiData.acc_integration_type })\n        }\n    }\n}\n\n// Main execution function\n(async () => {\n  try {\n    let pageStatus = \"\";\n    const status = await this.getValue(\"gd_status\");\n    const data = this.getValues();\n\n    if (this.isAdd) pageStatus = \"Add\";\n    else if (this.isEdit) pageStatus = \"Edit\";\n    else if (this.isView) pageStatus = \"View\";\n    else if (this.isCopy) pageStatus = \"Clone\";\n    else throw new Error(\"Invalid page state\");\n\n    let organizationId = this.getVarGlobal(\"deptParentId\");\n    if (organizationId === \"0\") {\n      organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n    }\n\n    this.setData({ page_status: pageStatus });\n\n    const salesOrderId = this.getValue(\"so_id\");\n\n    switch (pageStatus) {\n      case \"Add\":\n        // Add mode\n        this.display([\"draft_status\"]);\n        this.reset();\n\n        await checkAccIntegrationType(organizationId)\n        await setPlant(organizationId);\n        // Set prefix for new document\n        await setPrefix(organizationId);\n        break;\n\n      case \"Edit\":\n        if(status !== 'Completed') {\n          await getPrefixData(organizationId);\n\n        }\n        await checkAccIntegrationType(organizationId)\n        await disabledField(status);\n        await showStatusHTML(status);\n        if (salesOrderId.length > 0) {\n          await this.display([\"address_grid\"]);\n        }\n        await displayDeliveryMethod();\n        break;\n\n      case \"View\":\n        await showStatusHTML(status);\n        await displayDeliveryMethod();\n        this.hide([\n          \"link_billing_address\",\n          \"link_shipping_address\",\n          \"button_save_as_draft\",\n          \"button_save_as_completed\",\n          \"button_save_as_created\",\n          \"so_id\",\n          \"fake_so_id\",\n          \"table_gd.gd_delivery_qty\",\n        ]);\n\n        if (salesOrderId.length > 0) {\n          await this.display([\"address_grid\"]);\n        }\n\n        this.display([\"so_no\"]);\n        break;\n    }\n  } catch (error) {\n    console.error(error);\n    this.$message.error(error.message || \"An error occurred\");\n  }\n})();\n"
            }
          }
        ]
      },
      {
        "key": "refresh",
        "name": "refresh",
        "func": ""
      },
      {
        "key": "onBeforeAdd",
        "name": "onBeforeAdd",
        "func": "",
        "type": "js"
      },
      {
        "key": "onAfterAdd",
        "name": "onAfterAdd",
        "func": "",
        "type": "js"
      },
      {
        "key": "onBeforeUpdate",
        "name": "onBeforeUpdate",
        "func": ""
      },
      {
        "key": "onAfterUpdate",
        "name": "onAfterUpdate",
        "func": ""
      },
      {
        "key": "26roirgf",
        "name": "onChangeDeliveryMethod",
        "func": "(async () => {\n  const deliveryMethod = this.getValue('gd_delivery_method') || ''\n\n  if(deliveryMethod !== '') {\n    this.triggerEvent('func_reset_delivery_method');\n    this.setData({ 'delivery_method_text': deliveryMethod });\n    console.log('deliveryMethod', deliveryMethod)\n    const visibilityMap = {\n      'Self Pickup': 'self_pickup',\n      'Courier Service': 'courier_service',\n      'Company Truck': 'company_truck',\n      'Shipping Service': 'shipping_service',\n      '3rd Party Transporter':'third_party_transporter'\n    };\n    const selectedField = visibilityMap[deliveryMethod] || null;\n    const fields = ['self_pickup', 'courier_service', 'company_truck','shipping_service','third_party_transporter'];\n    \n    fields.forEach(field => {\n      field === selectedField ? this.display(field) : this.hide(field);\n    });\n\n  } else {\n    this.triggerEvent('func_reset_delivery_method');\n    this.hide(['self_pickup', 'courier_service', 'company_truck','shipping_service','third_party_transporter']);\n  }\n\n})();",
        "type": "js",
        "rules": []
      },
      {
        "key": "25kwxnrd",
        "name": "onClickInventory",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "91f6b0p3",
            "action": "openDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "gd_item_balance"
            }
          },
          {
            "key": "jdmx8z7q",
            "action": "js",
            "options": {
              "func": "const data = this.getValues();\nconst lineItemData = arguments[0]?.row;\nconst rowIndex = arguments[0]?.rowIndex;\n\nconsole.log(\"lineItemData\", lineItemData);\n\nconst materialId = lineItemData.material_id;\nconst altUOM = lineItemData.gd_order_uom_id;\nconst plantId = data.plant_id;\n\nconst tempQtyData = lineItemData.temp_qty_data;\n\ndb.collection(\"Item\")\n  .where({\n    id: materialId,\n  })\n  .get()\n  .then((response) => {\n    console.log(\"response item\", response);\n    const itemData = response.data[0];\n    const baseUOM = itemData.based_uom;\n\n    this.setData({\n      [`gd_item_balance.material_code`]: itemData.material_code,\n      [`gd_item_balance.material_name`]: itemData.material_name,\n      [`gd_item_balance.row_index`]: rowIndex,\n      [`gd_item_balance.material_uom`]: altUOM,\n    });\n\n    this.setData({\n      [`gd_item_balance.table_item_balance`]: [],\n    });\n\n    const convertBaseToAlt = (baseQty, itemData, altUOM) => {\n      if (\n        !Array.isArray(itemData.table_uom_conversion) ||\n        itemData.table_uom_conversion.length === 0 ||\n        !altUOM\n      ) {\n        return baseQty;\n      }\n\n      const uomConversion = itemData.table_uom_conversion.find(\n        (conv) => conv.alt_uom_id === altUOM\n      );\n\n      if (!uomConversion || !uomConversion.base_qty) {\n        return baseQty;\n      }\n\n      return Math.round((baseQty / uomConversion.base_qty) * 1000) / 1000;\n    };\n\n    const processItemBalanceData = (itemBalanceData) => {\n      return itemBalanceData.map((record) => {\n        const processedRecord = { ...record };\n\n        if (altUOM !== baseUOM) {\n          if (processedRecord.block_qty) {\n            processedRecord.block_qty = convertBaseToAlt(\n              processedRecord.block_qty,\n              itemData,\n              altUOM\n            );\n          }\n\n          if (processedRecord.reserved_qty) {\n            processedRecord.reserved_qty = convertBaseToAlt(\n              processedRecord.reserved_qty,\n              itemData,\n              altUOM\n            );\n          }\n\n          if (processedRecord.unrestricted_qty) {\n            processedRecord.unrestricted_qty = convertBaseToAlt(\n              processedRecord.unrestricted_qty,\n              itemData,\n              altUOM\n            );\n          }\n\n          if (processedRecord.qualityinsp_qty) {\n            processedRecord.qualityinsp_qty = convertBaseToAlt(\n              processedRecord.qualityinsp_qty,\n              itemData,\n              altUOM\n            );\n          }\n\n          if (processedRecord.intransit_qty) {\n            processedRecord.intransit_qty = convertBaseToAlt(\n              processedRecord.intransit_qty,\n              itemData,\n              altUOM\n            );\n          }\n\n          if (processedRecord.balance_quantity) {\n            processedRecord.balance_quantity = convertBaseToAlt(\n              processedRecord.balance_quantity,\n              itemData,\n              altUOM\n            );\n          }\n        }\n\n        return processedRecord;\n      });\n    };\n\n    const mergeWithTempData = (freshDbData, tempDataArray) => {\n      if (!tempDataArray || tempDataArray.length === 0) {\n        console.log(\"No temp data to merge, using fresh DB data\");\n        return freshDbData;\n      }\n\n      console.log(\"Merging fresh DB data with existing temp data\");\n\n      const tempDataMap = new Map();\n      tempDataArray.forEach((tempItem) => {\n        const key =\n          itemData.item_batch_management === 1\n            ? `${tempItem.location_id}-${tempItem.batch_id || \"no_batch\"}`\n            : `${tempItem.location_id}`;\n        tempDataMap.set(key, tempItem);\n      });\n\n      const mergedData = freshDbData.map((dbItem) => {\n        const key =\n          itemData.item_batch_management === 1\n            ? `${dbItem.location_id}-${dbItem.batch_id || \"no_batch\"}`\n            : `${dbItem.location_id}`;\n\n        const tempItem = tempDataMap.get(key);\n\n        if (tempItem) {\n          console.log(\n            `Merging data for ${key}: DB unrestricted=${dbItem.unrestricted_qty}, temp gd_quantity=${tempItem.gd_quantity}`\n          );\n          return {\n            ...dbItem,\n            gd_quantity: tempItem.gd_quantity,\n            remarks: tempItem.remarks || dbItem.remarks,\n          };\n        } else {\n          return {\n            ...dbItem,\n            gd_quantity: 0,\n          };\n        }\n      });\n\n      tempDataArray.forEach((tempItem) => {\n        const key =\n          itemData.item_batch_management === 1\n            ? `${tempItem.location_id}-${tempItem.batch_id || \"no_batch\"}`\n            : `${tempItem.location_id}`;\n\n        const existsInDb = freshDbData.some((dbItem) => {\n          const dbKey =\n            itemData.item_batch_management === 1\n              ? `${dbItem.location_id}-${dbItem.batch_id || \"no_batch\"}`\n              : `${dbItem.location_id}`;\n          return dbKey === key;\n        });\n\n        if (!existsInDb) {\n          console.log(`Adding temp-only data for ${key}`);\n          mergedData.push(tempItem);\n        }\n      });\n\n      return mergedData;\n    };\n\n    if (itemData.item_batch_management === 1) {\n      this.display(\"gd_item_balance.table_item_balance.batch_id\");\n\n      db.collection(\"item_batch_balance\")\n        .where({\n          material_id: materialId,\n          plant_id: plantId,\n        })\n        .get()\n        .then((response) => {\n          console.log(\"response item_batch_balance\", response);\n          let freshDbData = response.data || [];\n\n          const processedFreshData = processItemBalanceData(freshDbData);\n\n          let tempDataArray = [];\n          if (tempQtyData) {\n            try {\n              tempDataArray = JSON.parse(tempQtyData);\n              console.log(\"Parsed temp data:\", tempDataArray);\n            } catch (error) {\n              console.error(\"Error parsing temp_qty_data:\", error);\n              tempDataArray = [];\n            }\n          }\n\n          const finalData = mergeWithTempData(\n            processedFreshData,\n            tempDataArray\n          );\n\n          console.log(\"Final merged data:\", finalData);\n\n          this.setData({\n            [`gd_item_balance.table_item_balance`]: finalData,\n          });\n        })\n        .catch((error) => {\n          console.error(\"Error fetching item batch balance data:\", error);\n        });\n    } else {\n      this.hide(\"gd_item_balance.table_item_balance.batch_id\");\n\n      db.collection(\"item_balance\")\n        .where({\n          material_id: materialId,\n          plant_id: plantId,\n        })\n        .get()\n        .then((response) => {\n          console.log(\"response item_balance\", response);\n          let freshDbData = response.data || [];\n\n          const processedFreshData = processItemBalanceData(freshDbData);\n\n          let tempDataArray = [];\n          if (tempQtyData) {\n            try {\n              tempDataArray = JSON.parse(tempQtyData);\n              console.log(\"Parsed temp data:\", tempDataArray);\n            } catch (error) {\n              console.error(\"Error parsing temp_qty_data:\", error);\n              tempDataArray = [];\n            }\n          }\n\n          const finalData = mergeWithTempData(\n            processedFreshData,\n            tempDataArray\n          );\n\n          console.log(\"Final merged data:\", finalData);\n\n          this.setData({\n            [`gd_item_balance.table_item_balance`]: finalData,\n          });\n        })\n        .catch((error) => {\n          console.error(\"Error fetching item balance data:\", error);\n        });\n    }\n  })\n  .catch((error) => {\n    console.error(\"Error fetching item data:\", error);\n  });\n\nwindow.validationState = {};\n\nsetTimeout(() => {\n  const currentData = this.getValues();\n  const rowCount = currentData.gd_item_balance?.table_item_balance?.length || 0;\n  for (let i = 0; i < rowCount; i++) {\n    window.validationState[i] = true;\n  }\n  console.log(`Initialized validation state for ${rowCount} rows`);\n}, 100);\n"
            }
          }
        ]
      },
      {
        "key": "z0ki024a",
        "name": "GDlineItem & updateAddress",
        "func": "const data = this.getValues();\nconst salesOrderId = data.so_id;\nconst plantId = data.plant_id;\n\nconst savedTableGd = data.table_gd || [];\n\n// Normalize salesOrderId to always be an array\nconst salesOrderIds = Array.isArray(salesOrderId)\n  ? salesOrderId\n  : [salesOrderId];\n\nif (salesOrderIds.length > 1) {\n  this.setData({ gd_delivery_method: \"\" });\n  this.triggerEvent('func_reset_delivery_method');\n}\n\n// Function to convert base quantity to alternative quantity\nconst convertBaseToAlt = (baseQty, itemData, altUOM) => {\n  if (\n    !Array.isArray(itemData.table_uom_conversion) ||\n    itemData.table_uom_conversion.length === 0 ||\n    !altUOM\n  ) {\n    return baseQty;\n  }\n\n  const uomConversion = itemData.table_uom_conversion.find(\n    (conv) => conv.alt_uom_id === altUOM\n  );\n\n  if (!uomConversion || !uomConversion.base_qty) {\n    return baseQty;\n  }\n\n  return Math.round((baseQty / uomConversion.base_qty) * 1000) / 1000;\n};\n\n// Helper function to populate addresses from SO data\nconst populateAddressesFromSO = (soData) => {\n  console.log(\"Populating addresses from SO:\", soData);\n\n  // Display address section\n  this.display(\"address_grid\");\n\n  // Extract address data from SO\n  const {\n    cust_billing_address,\n    cust_shipping_address,\n    billing_address_line_1,\n    billing_address_line_2,\n    billing_address_line_3,\n    billing_address_line_4,\n    billing_address_city,\n    billing_address_state,\n    billing_address_country,\n    billing_postal_code,\n    billing_address_phone,\n    billing_address_name,\n    billing_attention,\n    shipping_address_line_1,\n    shipping_address_line_2,\n    shipping_address_line_3,\n    shipping_address_line_4,\n    shipping_address_city,\n    shipping_address_state,\n    shipping_address_country,\n    shipping_postal_code,\n    shipping_address_name,\n    shipping_address_phone,\n    shipping_attention,\n  } = soData;\n\n  // Set address fields from SO data\n  this.setData({\n    // Main address fields (formatted addresses)\n    gd_billing_address: cust_billing_address || \"\",\n    gd_shipping_address: cust_shipping_address || \"\",\n\n    // Detailed billing address fields\n    billing_address_line_1: billing_address_line_1 || \"\",\n    billing_address_line_2: billing_address_line_2 || \"\",\n    billing_address_line_3: billing_address_line_3 || \"\",\n    billing_address_line_4: billing_address_line_4 || \"\",\n    billing_address_city: billing_address_city || \"\",\n    billing_address_state: billing_address_state || \"\",\n    billing_address_country: billing_address_country || \"\",\n    billing_postal_code: billing_postal_code || \"\",\n    billing_address_phone: billing_address_phone|| \"\",\n    billing_address_name: billing_address_name|| \"\",\n    billing_attention: billing_attention|| \"\",\n\n    // Detailed shipping address fields\n    shipping_address_line_1: shipping_address_line_1 || \"\",\n    shipping_address_line_2: shipping_address_line_2 || \"\",\n    shipping_address_line_3: shipping_address_line_3 || \"\",\n    shipping_address_line_4: shipping_address_line_4 || \"\",\n    shipping_address_city: shipping_address_city || \"\",\n    shipping_address_state: shipping_address_state || \"\",\n    shipping_address_country: shipping_address_country || \"\",\n    shipping_postal_code: shipping_postal_code || \"\",\n    shipping_address_name: shipping_address_name || \"\",\n    shipping_address_phone: shipping_address_phone || \"\",\n    shipping_attention: shipping_attention || \"\",\n  });\n\n  console.log(\"Addresses populated from SO successfully\");\n};\n\n// Helper function to fetch all GD records for multiple SO IDs\nconst fetchGoodsDeliveries = async (soIds) => {\n  const promises = soIds.map((soId) =>\n    db\n      .collection(\"goods_delivery\")\n      .where({ so_id: soId, gd_status: \"Completed\" })\n      .get()\n  );\n\n  try {\n    const results = await Promise.all(promises);\n    let allGDData = [];\n    results.forEach((response) => {\n      if (response.data && response.data.length > 0) {\n        allGDData = [...allGDData, ...response.data];\n      }\n    });\n    return allGDData;\n  } catch (error) {\n    console.error(\"Error fetching goods deliveries:\", error);\n    return [];\n  }\n};\n\n// Helper function to fetch source items from multiple SO IDs\nconst fetchSourceItems = async (soIds) => {\n  const promises = soIds.map((soId) =>\n    db\n      .collection(\"sales_order\")\n      .where({ id: soId })\n      .get()\n      .then((response) => {\n        if (\n          response.data &&\n          response.data.length > 0 &&\n          response.data[0].table_so\n        ) {\n          console.log(\"response.data[0]:\", response.data[0]);\n\n          // Add the SO ID to each item for reference\n          return {\n            soData: response.data[0],\n            items: response.data[0].table_so.map((item) => ({\n              ...item,\n              original_so_id: soId,\n              so_no: response.data[0].so_no,\n            })),\n          };\n        }\n        return { soData: null, items: [] };\n      })\n  );\n\n  try {\n    const results = await Promise.all(promises);\n\n    // POPULATE ADDRESSES FROM THE LATEST SELECTED SO (last in array)\n    const latestSOResult = results[results.length - 1];\n    if (latestSOResult.soData) {\n      console.log(\n        \"Using latest selected SO for addresses:\",\n        latestSOResult.soData.so_no\n      );\n      populateAddressesFromSO(latestSOResult.soData);\n    }\n\n    // Flatten all items from all SOs\n    const allItems = results.flatMap((result) => result.items);\n    return allItems;\n  } catch (error) {\n    console.error(\"Error fetching source items:\", error);\n    return [];\n  }\n};\n\n// Alternative approach: Handle address population for multiple SOs\nconst handleMultipleSOMAddresses = async (soIds) => {\n  if (soIds.length >= 1) {\n    // Use the LATEST selected SO (last in array) for addresses\n    const latestSOId = soIds[soIds.length - 1];\n\n    try {\n      const response = await db\n        .collection(\"sales_order\")\n        .where({ id: latestSOId })\n        .get();\n      if (response.data && response.data.length > 0) {\n        console.log(\n          `Using latest selected SO (${response.data[0].so_no}) for addresses`\n        );\n        populateAddressesFromSO(response.data[0]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching latest SO for address:\", error);\n    }\n  }\n};\n\n// Enhanced function to check inventory using form's plantId\nconst checkInventoryForItem = async (item, itemData, index, deliveredSoFar) => {\n  const itemId = item.itemId;\n  const itemName = item.itemName;\n  const orderedQty = item.orderedQty;\n  const altUOM = item.altUOM;\n\n  console.log(`Checking inventory for item ${itemId} in plant ${plantId}`);\n\n  const baseUOM = itemData.based_uom || \"\";\n\n  try {\n    let totalUnrestrictedQtyBase = 0;\n\n    if (itemData.item_batch_management === 1 && itemData.stock_control !== 0) {\n      // Batch managed items\n      const response = await db\n        .collection(\"item_batch_balance\")\n        .where({ material_id: itemId, plant_id: plantId })\n        .get();\n\n      const itemBatchBalanceData = response.data || [];\n      totalUnrestrictedQtyBase = itemBatchBalanceData.reduce(\n        (sum, balance) => sum + (balance.unrestricted_qty || 0),\n        0\n      );\n    } else if (\n      itemData.item_batch_management === 0 &&\n      itemData.stock_control !== 0\n    ) {\n      // Non-batch managed items\n      const response = await db\n        .collection(\"item_balance\")\n        .where({ material_id: itemId, plant_id: plantId })\n        .get();\n\n      const itemBalanceData = response.data || [];\n      totalUnrestrictedQtyBase = itemBalanceData.reduce(\n        (sum, balance) => sum + (balance.unrestricted_qty || 0),\n        0\n      );\n    }\n\n    // Convert to alt UOM if needed\n    let totalUnrestrictedQty = totalUnrestrictedQtyBase;\n    if (altUOM !== baseUOM) {\n      totalUnrestrictedQty = convertBaseToAlt(\n        totalUnrestrictedQtyBase,\n        itemData,\n        altUOM\n      );\n    }\n\n    const undeliveredQty = orderedQty - deliveredSoFar;\n    const shortfallQty = undeliveredQty - totalUnrestrictedQty;\n\n    // Update insufficient dialog data\n    this.setData({\n      [`dialog_insufficient.table_insufficient.${index}.undelivered_qty`]:\n        undeliveredQty,\n      [`dialog_insufficient.table_insufficient.${index}.available_qty`]:\n        totalUnrestrictedQty,\n      [`dialog_insufficient.table_insufficient.${index}.shortfall_qty`]:\n        shortfallQty,\n    });\n\n    return shortfallQty > 0;\n  } catch (error) {\n    console.error(`Error checking inventory for item ${itemId}:`, error);\n    return false;\n  }\n};\n\n// Main processing logic - modified to handle addresses from SO\n(async () => {\n  try {\n    const fieldModelItem = Array.isArray(arguments[0]?.fieldModel)\n      ? arguments[0]?.fieldModel[0]?.item\n      : arguments[0]?.fieldModel?.item;\n\n    if (!salesOrderIds.length || !salesOrderIds[0]) {\n      console.log(\"No sales order IDs found\");\n      return;\n    }\n\n    // Define isSOUnchanged for edit mode\n    const newSoId = fieldModelItem?.so_id || salesOrderIds[0];\n    const isSOUnchanged =\n      (data.page_status === \"Edit\" || data.page_status === \"View\") &&\n      JSON.stringify(salesOrderIds) ===\n        JSON.stringify(Array.isArray(newSoId) ? newSoId : [newSoId]) &&\n      savedTableGd.length > 0;\n\n    // Handle address population early in the process\n    if (!isSOUnchanged) {\n      await handleMultipleSOMAddresses(salesOrderIds);\n    }\n\n    // Fetch goods deliveries for all SO IDs\n    const GDData = await fetchGoodsDeliveries(salesOrderIds);\n    console.log(\"GDData extracted for all SOs:\", GDData);\n\n    // Check if we have valid salesOrderIds\n    if (salesOrderIds.length > 0 && salesOrderIds[0]) {\n      this.disabled([\"plant_id\"], false);\n\n      // Set SO numbers in so_no field\n      if (salesOrderIds.length > 1) {\n        Promise.all(\n          salesOrderIds.map((soId) =>\n            db\n              .collection(\"sales_order\")\n              .where({ id: soId })\n              .get()\n              .then((response) => {\n                if (response.data && response.data.length > 0) {\n                  return response.data[0].so_no;\n                }\n                return \"\";\n              })\n          )\n        )\n          .then((soNumbers) => {\n            const validSoNumbers = soNumbers.filter(Boolean);\n            this.setData({\n              so_no: validSoNumbers.join(\", \"),\n            });\n          })\n          .catch((error) => {\n            console.error(\"Error fetching SO numbers:\", error);\n          });\n      } else {\n        db.collection(\"sales_order\")\n          .where({ id: salesOrderIds[0] })\n          .get()\n          .then((response) => {\n            if (response.data && response.data.length > 0) {\n              this.setData({\n                so_no: response.data[0].so_no,\n              });\n            }\n          })\n          .catch((error) => {\n            console.error(\"Error fetching SO number:\", error);\n          });\n      }\n    }\n\n    // Fetch source items from all SO IDs (addresses will be populated here)\n    const sourceItems = await fetchSourceItems(salesOrderIds);\n    console.log(\"sourceItems from all SOs:\", sourceItems);\n\n    if (!Array.isArray(sourceItems) || sourceItems.length === 0) {\n      console.log(\"No source items found in sales orders\");\n      return;\n    }\n\n    // Store the highest delivered quantities for each item\n    // let deliveredQty = {};\n\n    // GDData.forEach((gdRecord) => {\n    //   if (Array.isArray(gdRecord.table_gd)) {\n    //     gdRecord.table_gd.forEach((gdItem) => {\n    //       const itemId = gdItem.material_id;\n    //       if (itemId) {\n    //         const currentQty = parseFloat(gdItem.gd_delivered_qty || 0);\n    //         if (!deliveredQty[itemId]) {\n    //           deliveredQty[itemId] = 0;\n    //         }\n    //         deliveredQty[itemId] += currentQty;\n    //       }\n    //     });\n    //   }\n    // });\n\n    if (!isSOUnchanged) {\n      // Reset table data\n      this.setData({\n        table_gd: [],\n        gd_item_balance: {\n          table_item_balance: [],\n        },\n      });\n\n      setTimeout(async () => {\n        // Create items array\n        const allItems = [];\n\n        sourceItems.forEach((sourceItem) => {\n          const itemId = sourceItem.item_name || \"\";\n          const itemDesc = sourceItem.so_desc || \"\";\n          const itemName = sourceItem.item_id || \"\";\n\n          if(itemId === '' && itemDesc === '') return;\n\n          const orderedQty = parseFloat(sourceItem.so_quantity || 0);\n          const deliveredQtyFromSource = parseFloat(sourceItem.delivered_qty || 0);\n\n          const altUOM = sourceItem.so_item_uom || \"\";\n\n          allItems.push({\n            itemId,\n            itemName,\n            itemDesc,\n            orderedQty,\n            altUOM,\n            sourceItem,\n            deliveredQtyFromSource,\n            original_so_id: sourceItem.original_so_id,\n            so_no: sourceItem.so_no,\n          });\n        });\n\n        // Create new table_gd structure\n        const newTableGd = allItems.map((item) => ({\n          material_id: item.itemId || \"\",\n          material_name: item.itemName || \"\",\n          gd_material_desc: item.itemDesc || \"\",\n          gd_order_quantity: item.orderedQty,\n          gd_delivered_qty: item.sourceItem.delivered_qty ,\n          gd_undelivered_qty: item.orderedQty - item.sourceItem.delivered_qty,\n          gd_order_uom_id: item.altUOM,\n          unit_price: item.sourceItem.so_item_price || 0,\n          total_price: item.sourceItem.so_amount || 0,\n          line_so_no: item.so_no,\n          line_so_id: item.original_so_id,\n          fm_key:\n            Date.now().toString(36) + Math.random().toString(36).substr(2, 5),\n        }));\n\n        console.log(\"New table_gd structure:\", newTableGd);\n\n        await this.setData({\n          table_gd: newTableGd,\n        });\n\n        setTimeout(() => {\n          newTableGd.forEach((item, index) => {\n           if(item.material_id === '' && item.gd_material_desc !== '') {\n            if(item.gd_undelivered_qty <= 0) {\n              this.disabled([`table_gd.${index}.gd_qty`, `table_gd.${index}.gd_delivery_qty`], true);\n            } else {\n              this.disabled([`table_gd.${index}.gd_delivery_qty`], true);\n              this.disabled([`table_gd.${index}.gd_qty`], false);\n              this.setData({\n                [`table_gd.${index}.gd_initial_delivered_qty`]: item.gd_delivered_qty,\n              })\n            }\n           }\n         })\n\n        }, 100)\n\n\n        // Create insufficient items table structure\n        const newTableInsufficient = allItems.map((item) => ({\n          material_id: item.itemId,\n          material_name: item.itemName,\n          material_uom: item.altUOM,\n          order_quantity: item.orderedQty,\n          available_qty: \"\",\n          shortfall_qty: \"\",\n          fm_key:\n            Date.now().toString(36) + Math.random().toString(36).substr(2, 5),\n        }));\n\n        console.log(\"New table_insufficient structure:\", newTableInsufficient);\n\n        this.setData({\n          dialog_insufficient: {\n            table_insufficient: newTableInsufficient,\n          },\n        });\n\n        // Use a longer delay to ensure the arrays are created\n        setTimeout(async () => {\n          // Process each item with enhanced inventory checking\n          const insufficientItems = [];\n\n          for (let index = 0; index < allItems.length; index++) {\n            const item = allItems[index];\n            const itemId = item.itemId;\n            const itemName = item.itemName;\n            const itemDesc = item.itemDesc;\n            const orderedQty = item.orderedQty;\n            const altUOM = item.altUOM;\n            const deliveredSoFar = item.deliveredQtyFromSource;\n\n            console.log(`Processing item ${index}:`, item);\n\n            try {\n              // Fetch item data\n              const res = await db\n                .collection(\"Item\")\n                .where({ id: itemId })\n                .get();\n\n              if (!res.data || !res.data.length) {\n                console.error(`Item not found: ${itemId}`);\n                continue;\n              }\n\n              const itemData = res.data[0];\n\n              if (\n                itemData &&\n                itemData.stock_control !== 0 &&\n                (itemData.show_delivery !== 0 || !itemData.show_delivery)\n              ) {\n                // Set basic item data\n                this.setData({\n                  [`table_gd.${index}.material_id`]: itemId,\n                  [`table_gd.${index}.material_name`]: itemName,\n                  [`table_gd.${index}.gd_material_desc`]:\n                    item.sourceItem.so_desc || \"\",\n                  [`table_gd.${index}.gd_order_quantity`]: orderedQty,\n                  [`table_gd.${index}.gd_delivered_qty`]: deliveredSoFar,\n                  [`table_gd.${index}.gd_initial_delivered_qty`]:\n                    deliveredSoFar,\n                  [`table_gd.${index}.gd_order_uom_id`]: altUOM,\n                  [`table_gd.${index}.good_delivery_uom_id`]: altUOM,\n                  [`table_gd.${index}.base_uom_id`]: itemData.based_uom || \"\",\n                  [`table_gd.${index}.unit_price`]:\n                    item.sourceItem.so_item_price || 0,\n                  [`table_gd.${index}.total_price`]:\n                    item.sourceItem.so_amount || 0,\n                  [`table_gd.${index}.item_costing_method`]:\n                    itemData.material_costing_method,\n                  [`dialog_insufficient.table_insufficient.${index}.material_id`]:\n                    itemId,\n                  [`dialog_insufficient.table_insufficient.${index}.order_quantity`]:\n                    orderedQty,\n                });\n\n                if(itemId === '' && itemDesc !== '') {\n                  this.disabled([`table_gd.${index}.gd_delivery_qty`], true);\n                  this.disabled([`table_gd.${index}.gd_qty`], false);\n                  \n                }\n\n                // Check inventory\n                const hasShortfall = await checkInventoryForItem(\n                  item,\n                  itemData,\n                  index,\n                  deliveredSoFar\n                );\n\n                if (hasShortfall) {\n                  insufficientItems.push({\n                    itemId,\n                    itemName,\n                    soNo: item.so_no,\n                  });\n                }\n              } else {\n                console.log(\n                  `Skipping item ${itemId} due to stock_control or show_delivery settings`\n                );\n              }\n            } catch (error) {\n              console.error(`Error processing item ${itemId}:`, error);\n            }\n          }\n\n          // Show insufficient dialog if there are any shortfalls\n          if (insufficientItems.length > 0) {\n            console.log(\n              \"Items with insufficient inventory:\",\n              insufficientItems\n            );\n            this.openDialog(\"dialog_insufficient\");\n          }\n\n          console.log(\"Finished populating table_gd items\");\n        }, 200);\n      }, 100);\n    } else {\n      console.log(\"Preserving existing table_gd data during edit\");\n    }\n  } catch (e) {\n    console.error(\"Error in main processing:\", e);\n  }\n})();\n",
        "type": "js",
        "rules": []
      },
      {
        "key": "yc259hzm",
        "name": "onConfirmInventory",
        "func": "const data = this.getValues();\n\nconsole.log(\"data\", data);\nconsole.log(\"arguments to confirm dialog\", arguments[0]);\n\nconst temporaryData = data.gd_item_balance.table_item_balance;\n\nconsole.log(\"temporaryData\", temporaryData);\n",
        "type": "rule",
        "rules": [
          {
            "key": "7ld2ic9p",
            "action": "js",
            "options": {
              "func": "(async () => {\n  const data = this.getValues();\n  const temporaryData = data.gd_item_balance.table_item_balance;\n  const rowIndex = data.gd_item_balance.row_index;\n  const gdUOMid = data.gd_item_balance.material_uom;\n  const gdUOM = await db\n    .collection(\"unit_of_measurement\")\n    .where({ id: gdUOMid })\n    .get()\n    .then((res) => {\n      return res.data[0].uom_name;\n    });\n\n  // Check if all rows have passed validation\n  const allValid = temporaryData.every((item, idx) => {\n    const isValid =\n      window.validationState && window.validationState[idx] !== false;\n    console.log(`Row ${idx} validation: ${isValid}`);\n    return isValid;\n  });\n\n  if (!allValid) {\n    console.log(\"Validation failed, canceling confirm\");\n    return;\n  }\n\n  // Filter out items where gd_quantity is less than or equal to 0\n  const filteredData = temporaryData.filter((item) => item.gd_quantity > 0);\n  console.log(\"Filtered data (excluding gd_quantity <= 0):\", filteredData);\n\n  const formatFilteredData = async (filteredData) => {\n    // Get unique location IDs\n    const locationIds = [\n      ...new Set(filteredData.map((item) => item.location_id)),\n    ];\n\n    // Get unique batch IDs (filter out null/undefined values)\n    const batchIds = [\n      ...new Set(\n        filteredData\n          .map((item) => item.batch_id)\n          .filter((batchId) => batchId != null && batchId !== \"\")\n      ),\n    ];\n\n    // Fetch locations in parallel\n    const locationPromises = locationIds.map(async (locationId) => {\n      try {\n        const resBinLocation = await db\n          .collection(\"bin_location\")\n          .where({ id: locationId })\n          .get();\n\n        return {\n          id: locationId,\n          name:\n            resBinLocation.data?.[0]?.bin_location_combine ||\n            `Location ID: ${locationId}`,\n        };\n      } catch (error) {\n        console.error(`Error fetching location ${locationId}:`, error);\n        return { id: locationId, name: `${locationId} (Error)` };\n      }\n    });\n\n    // Fetch batches in parallel (only if there are batch IDs)\n    const batchPromises = batchIds.map(async (batchId) => {\n      try {\n        const resBatch = await db\n          .collection(\"batch\")\n          .where({ id: batchId })\n          .get();\n\n        return {\n          id: batchId,\n          name: resBatch.data?.[0]?.batch_number || `Batch ID: ${batchId}`,\n        };\n      } catch (error) {\n        console.error(`Error fetching batch ${batchId}:`, error);\n        return { id: batchId, name: `${batchId} (Error)` };\n      }\n    });\n\n    // Wait for both location and batch data\n    const [locations, batches] = await Promise.all([\n      Promise.all(locationPromises),\n      Promise.all(batchPromises),\n    ]);\n\n    // Create lookup maps\n    const locationMap = locations.reduce((map, loc) => {\n      map[loc.id] = loc.name;\n      return map;\n    }, {});\n\n    const batchMap = batches.reduce((map, batch) => {\n      map[batch.id] = batch.name;\n      return map;\n    }, {});\n\n    const totalQty = filteredData.reduce(\n      (sum, item) => sum + (item.gd_quantity || 0),\n      0\n    );\n\n    let summary = `Total: ${totalQty} ${gdUOM}\\n\\nDETAILS:\\n`;\n\n    const details = filteredData\n      .map((item, index) => {\n        const locationName = locationMap[item.location_id] || item.location_id;\n        const qty = item.gd_quantity || 0;\n\n        let itemDetail = `${index + 1}. ${locationName}: ${qty} ${gdUOM}`;\n\n        // Add batch info on a new line if batch exists\n        if (item.batch_id) {\n          const batchName = batchMap[item.batch_id] || item.batch_id;\n          itemDetail += `\\n[${batchName}]`;\n        }\n\n        return itemDetail;\n      })\n      .join(\"\\n\");\n\n    return summary + details;\n  };\n\n  const formattedString = await formatFilteredData(filteredData);\n  console.log(\"📋 Formatted string:\", formattedString);\n\n  const textareaContent = JSON.stringify(filteredData);\n\n  this.setData({\n    [`table_gd.${rowIndex}.temp_qty_data`]: textareaContent,\n    [`table_gd.${rowIndex}.view_stock`]: formattedString,\n    [`gd_item_balance.table_item_balance`]: [],\n  });\n\n  console.log(\"Input data (filtered):\", filteredData);\n  console.log(\"Row index:\", rowIndex);\n\n  // Sum up all gd_quantity values from filtered data\n  const totalGdQuantity = filteredData.reduce(\n    (sum, item) => sum + (item.gd_quantity || 0),\n    0\n  );\n  console.log(\"Total GD quantity:\", totalGdQuantity);\n\n  // Get the initial delivered quantity from the table_gd\n  const initialDeliveredQty =\n    data.table_gd[rowIndex].gd_initial_delivered_qty || 0;\n  console.log(\"Initial delivered quantity:\", initialDeliveredQty);\n\n  const deliveredQty = initialDeliveredQty + totalGdQuantity;\n  console.log(\"Final delivered quantity:\", deliveredQty);\n\n  // Calculate price per item for the current row\n  const totalPrice = parseFloat(data.table_gd[rowIndex].total_price) || 0;\n  const orderQuantity =\n    parseFloat(data.table_gd[rowIndex].gd_order_quantity) || 0;\n\n  let pricePerItem = 0;\n  if (orderQuantity > 0) {\n    pricePerItem = totalPrice / orderQuantity;\n  } else {\n    console.warn(\"Order quantity is zero or invalid for row\", rowIndex);\n  }\n\n  const currentRowPrice = pricePerItem * totalGdQuantity;\n  console.log(\"Price per item:\", pricePerItem);\n  console.log(\"Current row price:\", currentRowPrice);\n\n  // Store the row-specific data first\n  this.setData({\n    [`table_gd.${rowIndex}.gd_delivered_qty`]: deliveredQty,\n    [`table_gd.${rowIndex}.gd_qty`]: totalGdQuantity,\n    [`table_gd.${rowIndex}.base_qty`]: totalGdQuantity,\n    [`table_gd.${rowIndex}.gd_price`]: currentRowPrice,\n    [`table_gd.${rowIndex}.price_per_item`]: pricePerItem,\n    error_message: \"\", // Clear any error message\n  });\n\n  // Recalculate total from all rows\n  let newTotal = 0;\n\n  // Loop through all rows and sum up their prices\n  data.table_gd.forEach((row, index) => {\n    const rowOrderQty = parseFloat(row.gd_order_quantity) || 0;\n    const rowTotalPrice = parseFloat(row.total_price) || 0;\n\n    let rowGdQty;\n    if (index === rowIndex) {\n      // For the current row being edited, use the new quantity we just calculated\n      rowGdQty = totalGdQuantity;\n    } else {\n      // For other rows, use their existing gd_qty\n      rowGdQty = parseFloat(row.gd_qty) || 0;\n    }\n\n    if (rowOrderQty > 0 && rowGdQty > 0) {\n      const rowPricePerItem = rowTotalPrice / rowOrderQty;\n      const rowPrice = rowPricePerItem * rowGdQty;\n      newTotal += rowPrice;\n\n      console.log(\n        `Row ${index}: qty=${rowGdQty}, pricePerItem=${rowPricePerItem}, rowTotal=${rowPrice}`\n      );\n    }\n  });\n\n  console.log(\"Recalculated total from all rows:\", newTotal);\n\n  // Update the grand total\n  this.setData({\n    [`gd_total`]: newTotal,\n  });\n\n  this.closeDialog(\"gd_item_balance\");\n})();\n"
            }
          }
        ]
      },
      {
        "key": "y99itn3l",
        "name": "onCancelInventory",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "y1mxibmd",
            "action": "closeDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "gd_item_balance"
            }
          }
        ]
      },
      {
        "key": "5a4f9brn",
        "name": "deliveryQtyCalc",
        "func": "const previewFIFOSequences = (materialId, deliveryQty, callback) => {\n  db.collection(\"fifo_costing_history\")\n    .where({ material_id: materialId })\n    .get()\n    .then((response) => {\n      const result = response.data;\n      const usedSequences = []; // Track which FIFO sequences would be used\n\n      if (result && Array.isArray(result) && result.length > 0) {\n        // Sort by FIFO sequence (lowest/oldest first)\n        const sortedRecords = result.sort(\n          (a, b) => a.fifo_sequence - b.fifo_sequence\n        );\n\n        let remainingQtyToDeduct = parseFloat(deliveryQty);\n        console.log(\n          `Need to deduct ${remainingQtyToDeduct} units from FIFO inventory for ${materialId}`\n        );\n\n        // Process each FIFO record in sequence\n        for (const record of sortedRecords) {\n          if (remainingQtyToDeduct <= 0) {\n            break;\n          }\n\n          const availableQty = parseFloat(record.fifo_available_quantity || 0);\n\n          // Calculate how much would be taken from this record\n          const qtyToDeduct = Math.min(availableQty, remainingQtyToDeduct);\n\n          // Add this sequence to our tracking array with the quantity that would be used\n          if (qtyToDeduct > 0) {\n            usedSequences.push({\n              sequence: record.fifo_sequence,\n              quantity: qtyToDeduct,\n            });\n          }\n\n          // Reduce the remaining quantity to deduct\n          remainingQtyToDeduct -= qtyToDeduct;\n        }\n      }\n\n      // Create a formatted string of used sequences\n      const fifoSequenceString = usedSequences\n        .map((seq) => `${seq.sequence}(${seq.quantity})`)\n        .join(\", \");\n\n      // Call the callback with the result\n      callback(fifoSequenceString, usedSequences);\n    })\n    .catch((error) => {\n      console.error(`Error previewing FIFO for ${materialId}:`, error);\n      callback(\"Error checking FIFO\", []);\n    });\n};\n\n// Add this handler to your form elements\nsetTimeout(() => {\n  const data = this.getValues();\n  if (data.table_gd) {\n    const rowIndex = arguments[0]?.rowIndex;\n    const deliveredQty = arguments[0]?.value;\n\n    if (rowIndex === undefined || !data.table_gd[rowIndex]) {\n      console.log(\"Invalid row index or row not found\");\n      return;\n    }\n\n    const item = data.table_gd[rowIndex];\n    const materialId = item.material_id;\n\n    if (!materialId) {\n      console.log(\"No material ID found for this item\");\n      return;\n    }\n\n    // Calculate undelivered quantity\n    const orderQty = item.gd_order_quantity;\n    const remainingQty = orderQty - deliveredQty;\n\n    if (remainingQty >= 0) {\n      this.setData({\n        [`table_gd.${rowIndex}.gd_undelivered_qty`]: remainingQty,\n      });\n    }\n\n    // If we have a valid delivered quantity, preview the FIFO sequences\n    if (deliveredQty > 0) {\n      previewFIFOSequences(\n        materialId,\n        deliveredQty,\n        (fifoSequenceString, usedSequences) => {\n          console.log(\n            `FIFO sequences for ${materialId}: ${fifoSequenceString}`\n          );\n          this.setData({\n            [`table_gd.${rowIndex}.fifo_sequence`]:\n              fifoSequenceString || \"No FIFO sequences available\",\n          });\n        }\n      );\n    } else {\n      this.setData({\n        [`table_gd.${rowIndex}.fifo_sequence`]: \"\",\n      });\n    }\n  }\n}, 300);\n",
        "type": "js"
      },
      {
        "key": "5zn3n4yv",
        "name": "onCancel_Alert",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "f11eq7mc",
            "action": "closeDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "dialog_insufficient"
            }
          }
        ]
      },
      {
        "key": "pdcfis4b",
        "name": "onClick_manage_billing_addr",
        "func": "const data = this.getValues();\n\nthis.routeLocation(\n    {\n    routeMode: \"dialog\",\n        routeInfo: {\n            source_id: \"1905102178127777793\",\n            name:\"Address\",\t\n        },\n    },\n    {   'address_purpose': 'Billing',\n        'address_line1': data.billing_address_line_1,\n        'address_line2': data.billing_address_line_2,\n        'address_line3': data.billing_address_line_3,\n        'address_line4': data.billing_address_line_4,\n        'city': data.billing_address_city,\n        'postal_code': data.billing_postal_code,\n        'state': data.billing_address_state,\n        'country': data.billing_address_country,\n        'moduleName':'gd',\n        'customerId': this.getValue('customer_name'),\n         'address_name': data.billing_address_name,\n        'address_phone': data.billing_address_phone,\n        'address_attention': data.billing_attention,\n        'supplierId': 'None'\n        \n    }\n);",
        "type": "js"
      },
      {
        "key": "e18vu6ag",
        "name": "onClick_manage_shippng_addr",
        "func": "const data = this.getValues();\n\nthis.routeLocation(\n    {\n    routeMode: \"dialog\",\n        routeInfo: {\n            source_id: \"1905102178127777793\",\n            name:\"Address\",\t\n        },\n    },\n    {   'address_purpose': 'Shipping',\n        'address_line1': data.shipping_address_line_1,\n        'address_line2': data.shipping_address_line_2,\n        'address_line3': data.shipping_address_line_3,\n        'address_line4': data.shipping_address_line_4,\n        'city': data.shipping_address_city,\n        'postal_code': data.shipping_postal_code,\n        'state': data.shipping_address_state,\n        'country': data.shipping_address_country,\n        'moduleName':\"gd\",\n        'customerId': this.getValue('customer_name'),\n      'address_name': data.shipping_address_name,\n        'address_phone': data.shipping_address_phone,\n        'address_attention': data.shipping_attention,\n        'supplierId': 'None'\n\n    }\n);",
        "type": "js"
      },
      {
        "key": "h3puaabi",
        "name": "onChange_gd_qty",
        "func": "const rowIndex = arguments[0]?.rowIndex;\nconst lineItemData = arguments[0]?.row;\n\nthis.setData({[`table_gd.${rowIndex}.previous_qty`]: lineItemData.gd_qty });",
        "type": "js"
      },
      {
        "key": "13hi9auo",
        "name": "onClick_save_as_draft",
        "func": "const closeDialog = () => {\n  if (this.parentGenerateForm) {\n    this.parentGenerateForm.$refs.SuPageDialogRef.hide();\n    this.parentGenerateForm.refresh();\n    this.hideLoading();\n  }\n};\n\nconst validateForm = (data, requiredFields) => {\n  const missingFields = [];\n\n  requiredFields.forEach((field) => {\n    const value = data[field.name];\n\n    // Handle non-array fields (unchanged)\n    if (!field.isArray) {\n      if (validateField(value, field)) {\n        missingFields.push(field.label);\n      }\n      return;\n    }\n\n    // Handle array fields\n    if (!Array.isArray(value)) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    if (value.length === 0) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    // Check each item in the array\n    if (field.arrayType === \"object\" && field.arrayFields && value.length > 0) {\n      value.forEach((item, index) => {\n        field.arrayFields.forEach((subField) => {\n          const subValue = item[subField.name];\n          if (validateField(subValue, subField)) {\n            missingFields.push(\n              `${subField.label} (in ${field.label} #${index + 1})`\n            );\n          }\n        });\n      });\n    }\n  });\n\n  return missingFields;\n};\n\nconst validateField = (value, field) => {\n  if (value === undefined || value === null) return true;\n  if (typeof value === \"string\") return value.trim() === \"\";\n  if (typeof value === \"number\") return value <= 0;\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === \"object\") return Object.keys(value).length === 0;\n  return !value;\n};\n\nconst getPrefixData = async (organizationId) => {\n  const prefixEntry = await db\n    .collection(\"prefix_configuration\")\n    .where({\n      document_types: \"Goods Delivery\",\n      is_deleted: 0,\n      organization_id: organizationId,\n      is_active: 1,\n    })\n    .get();\n\n  const prefixData = await prefixEntry.data[0];\n\n  return prefixData;\n};\n\nconst generateDraftPrefix = async (organizationId) => {\n  try {\n    const prefixData = await getPrefixData(organizationId);\n    if (prefixData.length !== 0) {\n      const currDraftNum = parseInt(prefixData.draft_number) + 1;\n      const newPrefix = \"DRAFT-GD-\" + currDraftNum;\n\n      db.collection(\"prefix_configuration\")\n        .where({\n          document_types: \"Goods Delivery\",\n          organization_id: organizationId,\n          is_deleted: 0,\n        })\n        .update({ draft_number: currDraftNum });\n\n      return newPrefix;\n    }\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\n// Main execution wrapped in an async IIFE\n(async () => {\n  try {\n    this.showLoading();\n    const data = this.getValues();\n\n    // Get page status and goods delivery ID\n    const page_status = data.page_status;\n    const goods_delivery_no = data.id;\n\n    // Define required fields\n    const requiredFields = [\n      { name: \"so_id\", label: \"SO Number\" },\n      {\n        name: \"table_gd\",\n        label: \"Item Information\",\n        isArray: true,\n        arrayType: \"object\",\n        arrayFields: [],\n      },\n    ];\n\n    // Validate form\n    const missingFields = validateForm(data, requiredFields);\n\n    if (missingFields.length === 0) {\n      // Store previous temporary quantities if available\n      if (Array.isArray(data.table_gd)) {\n        data.table_gd.forEach((item) => {\n          item.prev_temp_qty_data = item.temp_qty_data;\n        });\n      }\n\n      // Get organization ID\n      let organizationId = this.getVarGlobal(\"deptParentId\");\n      if (organizationId === \"0\") {\n        organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n      }\n\n      // Prepare goods delivery object\n      const gd = {\n        gd_status: \"Draft\",\n        fake_so_id: data.fake_so_id,\n        so_id: data.so_id,\n        so_no: data.so_no,\n        plant_id: data.plant_id,\n        organization_id: organizationId,\n        gd_billing_address: data.gd_billing_address,\n        gd_shipping_address: data.gd_shipping_address,\n        delivery_no: data.delivery_no,\n        gd_ref_doc: data.gd_ref_doc,\n        customer_name: data.customer_name,\n        gd_contact_name: data.gd_contact_name,\n        contact_number: data.contact_number,\n        email_address: data.email_address,\n        document_description: data.document_description,\n        gd_delivery_method: data.gd_delivery_method,\n        delivery_date: data.delivery_date,\n\n        driver_name: data.driver_name,\n        driver_contact_no: data.driver_contact_no,\n        ic_no: data.ic_no,\n        validity_of_collection: data.validity_of_collection,\n        vehicle_no: data.vehicle_no,\n        pickup_date: data.pickup_date,\n\n        courier_company: data.courier_company,\n        shipping_date: data.shipping_date,\n        freight_charges: data.freight_charges,\n        tracking_number: data.tracking_number,\n        est_arrival_date: data.est_arrival_date,\n\n        driver_cost: data.driver_cost,\n        est_delivery_date: data.est_delivery_date,\n\n        shipping_company: data.shipping_company,\n        shipping_method: data.shipping_method,\n\n        tpt_vehicle_number: data.tpt_vehicle_number,\n        tpt_transport_name: data.tpt_transport_name,\n        tpt_ic_no: data.tpt_ic_no,\n        tpt_driver_contact_no: data.tpt_driver_contact_no,\n\n        table_gd: data.table_gd,\n        order_remark: data.order_remark,\n        billing_address_line_1: data.billing_address_line_1,\n        billing_address_line_2: data.billing_address_line_2,\n        billing_address_line_3: data.billing_address_line_3,\n        billing_address_line_4: data.billing_address_line_4,\n        billing_address_city: data.billing_address_city,\n        billing_address_state: data.billing_address_state,\n        billing_address_country: data.billing_address_country,\n        billing_postal_code: data.billing_postal_code,\n        billing_address_name: data.billing_address_name,\n        billing_address_phone: data.billing_address_phone,\n        billing_attention: data.billing_attention,\n\n        shipping_address_line_1: data.shipping_address_line_1,\n        shipping_address_line_2: data.shipping_address_line_2,\n        shipping_address_line_3: data.shipping_address_line_3,\n        shipping_address_line_4: data.shipping_address_line_4,\n        shipping_address_city: data.shipping_address_city,\n        shipping_address_state: data.shipping_address_state,\n        shipping_address_country: data.shipping_address_country,\n        shipping_postal_code: data.shipping_postal_code,\n        shipping_address_name: data.shipping_address_name,\n        shipping_address_phone: data.shipping_address_phone,\n        shipping_attention: data.shipping_attention,\n        acc_integration_type: data.acc_integration_type,\n        last_sync_date: data.last_sync_date,\n        customer_credit_limit: data.customer_credit_limit,\n        overdue_limit: data.overdue_limit,\n        outstanding_balance: data.outstanding_balance,\n        overdue_inv_total_amount: data.overdue_inv_total_amount,\n        is_accurate: data.is_accurate,\n        gd_total: data.gd_total,\n      };\n\n      // Clean up undefined/null values\n      Object.keys(gd).forEach((key) => {\n        if (gd[key] === undefined || gd[key] === null) {\n          delete gd[key];\n        }\n      });\n\n      // Add or update based on page status\n      if (page_status === \"Add\") {\n        const newPrefix = await generateDraftPrefix(organizationId);\n        gd.delivery_no = newPrefix;\n        await db.collection(\"goods_delivery\").add(gd);\n        this.$message.success(\"Add successfully\");\n        closeDialog();\n      } else if (page_status === \"Edit\") {\n        await db.collection(\"goods_delivery\").doc(goods_delivery_no).update(gd);\n        this.$message.success(\"Update successfully\");\n        closeDialog();\n      } else {\n        console.log(\"Unknown page status:\", page_status);\n        this.hideLoading();\n        this.$message.error(\"Invalid page status\");\n        return;\n      }\n    } else {\n      this.hideLoading();\n      this.$message.error(`Validation errors: ${missingFields.join(\", \")}`);\n    }\n  } catch (error) {\n    console.error(\"Error in main function:\", error);\n    this.hideLoading();\n    this.$message.error(\n      error.message ||\n        \"An error occurred while processing the goods delivery draft\"\n    );\n  } finally {\n    console.log(\"Draft function execution completed\");\n  }\n})();\n",
        "type": "js"
      },
      {
        "key": "loukrz3x",
        "name": "onClick_save_as_created",
        "func": "const closeDialog = () => {\n  if (this.parentGenerateForm) {\n    this.parentGenerateForm.$refs.SuPageDialogRef.hide();\n    this.parentGenerateForm.refresh();\n    this.hideLoading();\n  }\n};\n\n// For quantities - 3 decimal places\nconst roundQty = (value) => {\n  return parseFloat(parseFloat(value || 0).toFixed(3));\n};\n\n// For prices - 4 decimal places\nconst roundPrice = (value) => {\n  return parseFloat(parseFloat(value || 0).toFixed(4));\n};\n\n// Function to get latest FIFO cost price with available quantity check\nconst getLatestFIFOCostPrice = async (materialId, batchId) => {\n  try {\n    const query = batchId\n      ? db\n          .collection(\"fifo_costing_history\")\n          .where({ material_id: materialId, batch_id: batchId })\n      : db\n          .collection(\"fifo_costing_history\")\n          .where({ material_id: materialId });\n\n    const response = await query.get();\n    const result = response.data;\n\n    if (result && Array.isArray(result) && result.length > 0) {\n      // Sort by FIFO sequence (lowest/oldest first, as per FIFO principle)\n      const sortedRecords = result.sort(\n        (a, b) => a.fifo_sequence - b.fifo_sequence\n      );\n\n      // First look for records with available quantity\n      for (const record of sortedRecords) {\n        const availableQty = roundQty(record.fifo_available_quantity || 0);\n        if (availableQty > 0) {\n          console.log(\n            `Found FIFO record with available quantity: Sequence ${record.fifo_sequence}, Cost price ${record.fifo_cost_price}`\n          );\n          return roundPrice(record.fifo_cost_price || 0);\n        }\n      }\n\n      // If no records with available quantity, use the most recent record\n      console.warn(\n        `No FIFO records with available quantity found for ${materialId}, using most recent cost price`\n      );\n      return roundPrice(\n        sortedRecords[sortedRecords.length - 1].fifo_cost_price || 0\n      );\n    }\n\n    console.warn(`No FIFO records found for material ${materialId}`);\n    return 0;\n  } catch (error) {\n    console.error(`Error retrieving FIFO cost price for ${materialId}:`, error);\n    return 0;\n  }\n};\n\n// Function to get Weighted Average cost price\nconst getWeightedAverageCostPrice = async (materialId, batchId) => {\n  try {\n    const query = batchId\n      ? db\n          .collection(\"wa_costing_method\")\n          .where({ material_id: materialId, batch_id: batchId })\n      : db.collection(\"wa_costing_method\").where({ material_id: materialId });\n\n    const response = await query.get();\n    const waData = response.data;\n\n    if (waData && Array.isArray(waData) && waData.length > 0) {\n      // Sort by date (newest first) to get the latest record\n      waData.sort((a, b) => {\n        if (a.created_at && b.created_at) {\n          return new Date(b.created_at) - new Date(a.created_at);\n        }\n        return 0;\n      });\n\n      return roundPrice(waData[0].wa_cost_price || 0);\n    }\n\n    console.warn(\n      `No weighted average records found for material ${materialId}`\n    );\n    return 0;\n  } catch (error) {\n    console.error(`Error retrieving WA cost price for ${materialId}:`, error);\n    return 0;\n  }\n};\n\nconst getFixedCostPrice = async (materialId) => {\n  try {\n    const query = db.collection(\"Item\").where({ id: materialId });\n    const response = await query.get();\n    const result = response.data;\n\n    if (result && result.length > 0) {\n      return roundPrice(parseFloat(result[0].purchase_unit_price || 0));\n    }\n\n    return 0;\n  } catch (error) {\n    console.error(\n      `Error retrieving fixed cost price for ${materialId}:`,\n      error\n    );\n    return 0;\n  }\n};\n\nconst getPrefixData = async (organizationId) => {\n  console.log(\"Getting prefix data for organization:\", organizationId);\n  try {\n    const prefixEntry = await db\n      .collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Goods Delivery\",\n        is_deleted: 0,\n        organization_id: organizationId,\n        is_active: 1,\n      })\n      .get();\n\n    console.log(\"Prefix data result:\", prefixEntry);\n\n    if (!prefixEntry.data || prefixEntry.data.length === 0) {\n      console.log(\"No prefix configuration found\");\n      return null;\n    }\n\n    return prefixEntry.data[0];\n  } catch (error) {\n    console.error(\"Error getting prefix data:\", error);\n    throw error;\n  }\n};\n\nconst updatePrefix = async (organizationId, runningNumber) => {\n  console.log(\n    \"Updating prefix for organization:\",\n    organizationId,\n    \"with running number:\",\n    runningNumber\n  );\n  try {\n    await db\n      .collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Goods Delivery\",\n        is_deleted: 0,\n        organization_id: organizationId,\n      })\n      .update({\n        running_number: parseInt(runningNumber) + 1,\n        has_record: 1,\n      });\n    console.log(\"Prefix update successful\");\n  } catch (error) {\n    console.error(\"Error updating prefix:\", error);\n    throw error;\n  }\n};\n\nconst generatePrefix = (runNumber, now, prefixData) => {\n  console.log(\"Generating prefix with running number:\", runNumber);\n  try {\n    let generated = prefixData.current_prefix_config;\n    generated = generated.replace(\"prefix\", prefixData.prefix_value);\n    generated = generated.replace(\"suffix\", prefixData.suffix_value);\n    generated = generated.replace(\n      \"month\",\n      String(now.getMonth() + 1).padStart(2, \"0\")\n    );\n    generated = generated.replace(\n      \"day\",\n      String(now.getDate()).padStart(2, \"0\")\n    );\n    generated = generated.replace(\"year\", now.getFullYear());\n    generated = generated.replace(\n      \"running_number\",\n      String(runNumber).padStart(prefixData.padding_zeroes, \"0\")\n    );\n    console.log(\"Generated prefix:\", generated);\n    return generated;\n  } catch (error) {\n    console.error(\"Error generating prefix:\", error);\n    throw error;\n  }\n};\n\nconst checkUniqueness = async (generatedPrefix, organizationId) => {\n  const existingDoc = await db\n    .collection(\"goods_delivery\")\n    .where({ delivery_no: generatedPrefix, organization_id: organizationId })\n    .get();\n\n  return !existingDoc.data || existingDoc.data.length === 0;\n};\n\nconst findUniquePrefix = async (prefixData, organizationId) => {\n  const now = new Date();\n  let prefixToShow;\n  let runningNumber = prefixData.running_number || 1;\n  let isUnique = false;\n  let maxAttempts = 10;\n  let attempts = 0;\n\n  while (!isUnique && attempts < maxAttempts) {\n    attempts++;\n    prefixToShow = generatePrefix(runningNumber, now, prefixData);\n    isUnique = await checkUniqueness(prefixToShow, organizationId);\n    if (!isUnique) {\n      runningNumber++;\n    }\n  }\n\n  if (!isUnique) {\n    throw new Error(\n      \"Could not generate a unique Goods Delivery number after maximum attempts\"\n    );\n  }\n\n  return { prefixToShow, runningNumber };\n};\n\nconst processBalanceTable = async (data, isUpdate = false) => {\n  console.log(\"Processing balance table\");\n\n  const items = data.table_gd;\n\n  if (!Array.isArray(items) || items.length === 0) {\n    console.log(\"No items to process\");\n    return;\n  }\n\n  const processedItemPromises = items.map(async (item, itemIndex) => {\n    try {\n      console.log(`Processing item ${itemIndex + 1}/${items.length}`);\n\n      // Input validation\n      if (!item.material_id || !item.temp_qty_data) {\n        console.error(`Invalid item data for index ${itemIndex}:`, item);\n        return null;\n      }\n\n      // Track created or updated documents for potential rollback\n      const updatedDocs = [];\n      const createdDocs = [];\n\n      // First check if this item should be processed based on stock_control\n      const itemRes = await db\n        .collection(\"Item\")\n        .where({ id: item.material_id })\n        .get();\n\n      if (!itemRes.data || !itemRes.data.length) {\n        console.error(`Item not found: ${item.material_id}`);\n        return;\n      }\n\n      const itemData = itemRes.data[0];\n      if (itemData.stock_control === 0) {\n        console.log(\n          `Skipping inventory update for item ${item.material_id} (stock_control=0)`\n        );\n        return;\n      }\n\n      const temporaryData = JSON.parse(item.temp_qty_data);\n      const prevTempData = isUpdate\n        ? JSON.parse(item.prev_temp_qty_data)\n        : null;\n\n      if (\n        temporaryData.length > 0 &&\n        (!isUpdate || (prevTempData && prevTempData.length > 0))\n      ) {\n        for (let i = 0; i < temporaryData.length; i++) {\n          const temp = temporaryData[i];\n          const prevTemp = isUpdate ? prevTempData[i] : null;\n\n          const itemBalanceParams = {\n            material_id: item.material_id,\n            location_id: temp.location_id,\n          };\n\n          if (temp.batch_id) {\n            itemBalanceParams.batch_id = temp.batch_id;\n          }\n\n          const balanceCollection = temp.batch_id\n            ? \"item_batch_balance\"\n            : \"item_balance\";\n\n          const balanceQuery = await db\n            .collection(balanceCollection)\n            .where(itemBalanceParams)\n            .get();\n\n          const hasExistingBalance =\n            balanceQuery.data &&\n            Array.isArray(balanceQuery.data) &&\n            balanceQuery.data.length > 0;\n\n          const existingDoc = hasExistingBalance ? balanceQuery.data[0] : null;\n\n          // UOM Conversion\n          let altQty = roundQty(temp.gd_quantity);\n          let baseQty = altQty;\n          let altUOM = item.gd_order_uom_id;\n          let baseUOM = itemData.based_uom;\n\n          if (\n            Array.isArray(itemData.table_uom_conversion) &&\n            itemData.table_uom_conversion.length > 0\n          ) {\n            console.log(`Checking UOM conversions for item ${item.item_id}`);\n\n            const uomConversion = itemData.table_uom_conversion.find(\n              (conv) => conv.alt_uom_id === altUOM\n            );\n\n            if (uomConversion) {\n              console.log(\n                `Found UOM conversion: 1 ${uomConversion.alt_uom_id} = ${uomConversion.base_qty} ${uomConversion.base_uom_id}`\n              );\n\n              baseQty = roundQty(altQty * uomConversion.base_qty);\n\n              console.log(\n                `Converted ${altQty} ${altUOM} to ${baseQty} ${baseUOM}`\n              );\n            } else {\n              console.log(`No conversion found for UOM ${altUOM}, using as-is`);\n            }\n          } else {\n            console.log(\n              `No UOM conversion table for item ${item.item_id}, using received quantity as-is`\n            );\n          }\n\n          const costingMethod = itemData.material_costing_method;\n\n          let unitPrice = roundPrice(item.unit_price);\n          let totalPrice = roundPrice(unitPrice * altQty);\n\n          if (costingMethod === \"First In First Out\") {\n            // Get unit price from latest FIFO sequence\n            const fifoCostPrice = await getLatestFIFOCostPrice(\n              item.material_id,\n              temp.batch_id\n            );\n            unitPrice = fifoCostPrice;\n            totalPrice = roundPrice(fifoCostPrice * baseQty);\n          } else if (costingMethod === \"Weighted Average\") {\n            // Get unit price from WA cost price\n            const waCostPrice = await getWeightedAverageCostPrice(\n              item.material_id,\n              temp.batch_id\n            );\n            unitPrice = waCostPrice;\n            totalPrice = roundPrice(waCostPrice * baseQty);\n          } else if (costingMethod === \"Fixed Cost\") {\n            // Get unit price from Fixed Cost\n            const fixedCostPrice = await getFixedCostPrice(item.material_id);\n            unitPrice = fixedCostPrice;\n            totalPrice = roundPrice(fixedCostPrice * baseQty);\n          } else {\n            return Promise.resolve();\n          }\n\n          // Create inventory_movement record - OUT from Unrestricted\n          const inventoryMovementDataUNR = {\n            transaction_type: \"GDL\",\n            trx_no: data.delivery_no,\n            parent_trx_no: data.so_no,\n            movement: \"OUT\",\n            unit_price: unitPrice,\n            total_price: totalPrice,\n            quantity: altQty,\n            item_id: item.material_id,\n            inventory_category: \"Unrestricted\",\n            uom_id: altUOM,\n            base_qty: baseQty,\n            base_uom_id: baseUOM,\n            bin_location_id: temp.location_id,\n            batch_number_id: temp.batch_id ? temp.batch_id : null,\n            costing_method_id: item.item_costing_method,\n            plant_id: data.plant_id,\n            organization_id: data.organization_id,\n          };\n\n          // Create inventory_movement record - IN to Reserved\n          const inventoryMovementDataRES = {\n            transaction_type: \"GDL\",\n            trx_no: data.delivery_no,\n            parent_trx_no: data.so_no,\n            movement: \"IN\",\n            unit_price: unitPrice,\n            total_price: totalPrice,\n            quantity: altQty,\n            item_id: item.material_id,\n            inventory_category: \"Reserved\",\n            uom_id: altUOM,\n            base_qty: baseQty,\n            base_uom_id: baseUOM,\n            bin_location_id: temp.location_id,\n            batch_number_id: temp.batch_id ? temp.batch_id : null,\n            costing_method_id: item.item_costing_method,\n            plant_id: data.plant_id,\n            organization_id: data.organization_id,\n          };\n\n          // Add both movement records\n          const invMovementResultUNR = await db\n            .collection(\"inventory_movement\")\n            .add(inventoryMovementDataUNR);\n          createdDocs.push({\n            collection: \"inventory_movement\",\n            docId: invMovementResultUNR.id,\n          });\n\n          const invMovementResultRES = await db\n            .collection(\"inventory_movement\")\n            .add(inventoryMovementDataRES);\n          createdDocs.push({\n            collection: \"inventory_movement\",\n            docId: invMovementResultRES.id,\n          });\n\n          if (existingDoc && existingDoc.id) {\n            // Determine quantity change based on update or add\n            const gdQuantity = isUpdate\n              ? roundQty(parseFloat(baseQty) - parseFloat(prevTemp.gd_quantity))\n              : roundQty(parseFloat(baseQty));\n\n            // Store original values for potential rollback\n            updatedDocs.push({\n              collection: balanceCollection,\n              docId: existingDoc.id,\n              originalData: {\n                unrestricted_qty: roundQty(existingDoc.unrestricted_qty || 0),\n                reserved_qty: roundQty(existingDoc.reserved_qty || 0),\n              },\n            });\n\n            // Update balance\n            await db\n              .collection(balanceCollection)\n              .doc(existingDoc.id)\n              .update({\n                unrestricted_qty: roundQty(\n                  parseFloat(existingDoc.unrestricted_qty || 0) - gdQuantity\n                ),\n                reserved_qty: roundQty(\n                  parseFloat(existingDoc.reserved_qty || 0) + gdQuantity\n                ),\n              });\n          }\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing item ${item.material_id}:`, error);\n\n      // Rollback changes if any operation fails\n      for (const doc of updatedDocs.reverse()) {\n        try {\n          await db\n            .collection(doc.collection)\n            .doc(doc.docId)\n            .update(doc.originalData);\n        } catch (rollbackError) {\n          console.error(\"Rollback error:\", rollbackError);\n        }\n      }\n\n      for (const doc of createdDocs.reverse()) {\n        try {\n          await db.collection(doc.collection).doc(doc.docId).delete();\n        } catch (rollbackError) {\n          console.error(\"Rollback error:\", rollbackError);\n        }\n      }\n    }\n  });\n\n  await Promise.all(processedItemPromises);\n};\n\nconst validateForm = (data, requiredFields) => {\n  const missingFields = [];\n\n  requiredFields.forEach((field) => {\n    const value = data[field.name];\n\n    // Handle non-array fields (unchanged)\n    if (!field.isArray) {\n      if (validateField(value, field)) {\n        missingFields.push(field.label);\n      }\n      return;\n    }\n\n    // Handle array fields\n    if (!Array.isArray(value)) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    if (value.length === 0) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    // Check each item in the array\n    if (field.arrayType === \"object\" && field.arrayFields && value.length > 0) {\n      value.forEach((item, index) => {\n        field.arrayFields.forEach((subField) => {\n          const subValue = item[subField.name];\n          if (validateField(subValue, subField)) {\n            missingFields.push(\n              `${subField.label} (in ${field.label} #${index + 1})`\n            );\n          }\n        });\n      });\n    }\n  });\n\n  return missingFields;\n};\n\nconst validateField = (value, field) => {\n  if (value === undefined || value === null) return true;\n  if (typeof value === \"string\") return value.trim() === \"\";\n  if (typeof value === \"number\") return value <= 0;\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === \"object\") return Object.keys(value).length === 0;\n  return !value;\n};\n\nconst addEntry = async (organizationId, gd) => {\n  try {\n    const prefixData = await getPrefixData(organizationId);\n\n    if (prefixData.length !== 0) {\n      const { prefixToShow, runningNumber } = await findUniquePrefix(\n        prefixData,\n        organizationId\n      );\n\n      await updatePrefix(organizationId, runningNumber);\n\n      gd.delivery_no = prefixToShow;\n    }\n\n    await db.collection(\"goods_delivery\").add(gd);\n    await processBalanceTable(gd);\n    this.$message.success(\"Add successfully\");\n    await closeDialog();\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\nconst updateEntry = async (organizationId, gd, goodsDeliveryId) => {\n  try {\n    const prefixData = await getPrefixData(organizationId);\n\n    if (prefixData.length !== 0) {\n      const { prefixToShow, runningNumber } = await findUniquePrefix(\n        prefixData,\n        organizationId\n      );\n\n      await updatePrefix(organizationId, runningNumber);\n\n      gd.delivery_no = prefixToShow;\n    }\n\n    await db.collection(\"goods_delivery\").doc(goodsDeliveryId).update(gd);\n    await processBalanceTable(gd, true);\n    this.$message.success(\"Update successfully\");\n    await closeDialog();\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\nconst findFieldMessage = (obj) => {\n  // Base case: if current object has the structure we want\n  if (obj && typeof obj === \"object\") {\n    if (obj.field && obj.message) {\n      return obj.message;\n    }\n\n    // Check array elements\n    if (Array.isArray(obj)) {\n      for (const item of obj) {\n        const found = findFieldMessage(item);\n        if (found) return found;\n      }\n    }\n\n    // Check all object properties\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const found = findFieldMessage(obj[key]);\n        if (found) return found;\n      }\n    }\n  }\n  return null;\n};\n\n// Main execution wrapped in an async IIFE\n(async () => {\n  try {\n    this.showLoading();\n    const data = await this.getValues();\n\n    // Get page status\n    const page_status = data.page_status;\n\n    // Define required fields\n    const requiredFields = [\n      { name: \"customer_name\", label: \"Customer\" },\n      { name: \"plant_id\", label: \"Plant\" },\n      { name: \"so_id\", label: \"Sales Order\" },\n      {\n        name: \"table_gd\",\n        label: \"Item Information\",\n        isArray: true,\n        arrayType: \"object\",\n        arrayFields: [],\n      },\n    ];\n\n    for (const gd of data.table_gd) {\n      await this.validate(gd.gd_qty);\n    }\n\n    // Validate form\n    const missingFields = validateForm(data, requiredFields);\n\n    if (missingFields.length === 0) {\n      // If this is an edit, store previous temporary quantities\n      if (page_status === \"Edit\" && Array.isArray(data.table_gd)) {\n        data.table_gd.forEach((item) => {\n          item.prev_temp_qty_data = item.temp_qty_data;\n        });\n      }\n\n      // Get organization ID\n      let organizationId = this.getVarGlobal(\"deptParentId\");\n      if (organizationId === \"0\") {\n        organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n      }\n\n      // Prepare goods delivery object\n      const gd = {\n        gd_status: \"Created\",\n        fake_so_id: data.fake_so_id,\n        so_id: data.so_id,\n        so_no: data.so_no,\n        gd_billing_address: data.gd_billing_address,\n        gd_shipping_address: data.gd_shipping_address,\n        delivery_no: data.delivery_no,\n        plant_id: data.plant_id,\n        organization_id: organizationId,\n        gd_ref_doc: data.gd_ref_doc,\n        customer_name: data.customer_name,\n        gd_contact_name: data.gd_contact_name,\n        contact_number: data.contact_number,\n        email_address: data.email_address,\n        document_description: data.document_description,\n        gd_delivery_method: data.gd_delivery_method,\n        delivery_date: data.delivery_date,\n\n        driver_name: data.driver_name,\n        driver_contact_no: data.driver_contact_no,\n        ic_no: data.ic_no,\n        validity_of_collection: data.validity_of_collection,\n        vehicle_no: data.vehicle_no,\n        pickup_date: data.pickup_date,\n\n        courier_company: data.courier_company,\n        shipping_date: data.shipping_date,\n        freight_charges: data.freight_charges,\n        tracking_number: data.tracking_number,\n        est_arrival_date: data.est_arrival_date,\n\n        driver_cost: data.driver_cost,\n        est_delivery_date: data.est_delivery_date,\n\n        shipping_company: data.shipping_company,\n        shipping_method: data.shipping_method,\n\n        tpt_vehicle_number: data.tpt_vehicle_number,\n        tpt_transport_name: data.tpt_transport_name,\n        tpt_ic_no: data.tpt_ic_no,\n        tpt_driver_contact_no: data.tpt_driver_contact_no,\n\n        table_gd: data.table_gd,\n        order_remark: data.order_remark,\n        billing_address_line_1: data.billing_address_line_1,\n        billing_address_line_2: data.billing_address_line_2,\n        billing_address_line_3: data.billing_address_line_3,\n        billing_address_line_4: data.billing_address_line_4,\n        billing_address_city: data.billing_address_city,\n        billing_address_state: data.billing_address_state,\n        billing_address_country: data.billing_address_country,\n        billing_postal_code: data.billing_postal_code,\n        billing_address_name: data.billing_address_name,\n        billing_address_phone: data.billing_address_phone,\n        billing_attention: data.billing_attention,\n\n        shipping_address_line_1: data.shipping_address_line_1,\n        shipping_address_line_2: data.shipping_address_line_2,\n        shipping_address_line_3: data.shipping_address_line_3,\n        shipping_address_line_4: data.shipping_address_line_4,\n        shipping_address_city: data.shipping_address_city,\n        shipping_address_state: data.shipping_address_state,\n        shipping_address_country: data.shipping_address_country,\n        shipping_postal_code: data.shipping_postal_code,\n        shipping_address_name: data.shipping_address_name,\n        shipping_address_phone: data.shipping_address_phone,\n        shipping_attention: data.shipping_attention,\n        acc_integration_type: data.acc_integration_type,\n        last_sync_date: data.last_sync_date,\n        customer_credit_limit: data.customer_credit_limit,\n        overdue_limit: data.overdue_limit,\n        outstanding_balance: data.outstanding_balance,\n        overdue_inv_total_amount: data.overdue_inv_total_amount,\n        is_accurate: data.is_accurate,\n        gd_total: data.gd_total,\n      };\n\n      // Clean up undefined/null values\n      Object.keys(gd).forEach((key) => {\n        if (gd[key] === undefined || gd[key] === null) {\n          delete gd[key];\n        }\n      });\n\n      // Perform action based on page status\n      if (page_status === \"Add\") {\n        await addEntry(organizationId, gd);\n      } else if (page_status === \"Edit\") {\n        const goodsDeliveryId = data.id;\n        await updateEntry(organizationId, gd, goodsDeliveryId);\n      }\n    } else {\n      this.hideLoading();\n      this.$message.error(`Validation errors: ${missingFields.join(\", \")}`);\n    }\n  } catch (error) {\n    this.hideLoading();\n\n    // Try to get message from standard locations first\n    let errorMessage = \"\";\n\n    if (error && typeof error === \"object\") {\n      errorMessage = findFieldMessage(error) || \"An error occurred\";\n    } else {\n      errorMessage = error;\n    }\n\n    this.$message.error(errorMessage);\n    console.error(errorMessage);\n  }\n})();\n",
        "type": "js"
      },
      {
        "key": "145p4b81",
        "name": "onClick_save_as_completed",
        "func": "const closeDialog = () => {\n  if (this.parentGenerateForm) {\n    this.parentGenerateForm.$refs.SuPageDialogRef.hide();\n    this.parentGenerateForm.refresh();\n    this.hideLoading();\n  }\n};\n\n// For quantities - 3 decimal places\nconst roundQty = (value) => {\n  return parseFloat(parseFloat(value || 0).toFixed(3));\n};\n\n// For prices - 4 decimal places\nconst roundPrice = (value) => {\n  return parseFloat(parseFloat(value || 0).toFixed(4));\n};\n\n// Prevent duplicate processing\nconst preventDuplicateProcessing = () => {\n  if (window.isProcessing) {\n    console.log(\"Process already running, skipping...\");\n    return false;\n  }\n\n  const transactionId =\n    Date.now().toString() + Math.random().toString(36).substring(2, 15);\n  if (!window.processedTransactions) {\n    window.processedTransactions = new Set();\n  }\n\n  if (window.processedTransactions.has(transactionId)) {\n    console.log(\"This transaction already processed\");\n    return false;\n  }\n\n  window.processedTransactions.add(transactionId);\n\n  if (window.processedTransactions.size > 50) {\n    const transactions = Array.from(window.processedTransactions);\n    window.processedTransactions = new Set(transactions.slice(-20));\n  }\n\n  window.isProcessing = true;\n  return true;\n};\n\n// Update FIFO inventory\nconst updateFIFOInventory = (materialId, deliveryQty, batchId, plantId) => {\n  return new Promise((resolve, reject) => {\n    const query = batchId\n      ? db.collection(\"fifo_costing_history\").where({\n          material_id: materialId,\n          batch_id: batchId,\n          plant_id: plantId,\n        })\n      : db\n          .collection(\"fifo_costing_history\")\n          .where({ material_id: materialId, plant_id: plantId });\n\n    query\n      .get()\n      .then((response) => {\n        const result = response.data;\n\n        if (result && Array.isArray(result) && result.length > 0) {\n          // Sort by FIFO sequence (lowest/oldest first)\n          const sortedRecords = result.sort(\n            (a, b) => a.fifo_sequence - b.fifo_sequence\n          );\n\n          let remainingQtyToDeduct = parseFloat(deliveryQty);\n          console.log(\n            `Need to deduct ${remainingQtyToDeduct} units from FIFO inventory`\n          );\n\n          // Process each FIFO record in sequence until we've accounted for all delivery quantity\n          for (const record of sortedRecords) {\n            if (remainingQtyToDeduct <= 0) {\n              break;\n            }\n\n            const availableQty = roundQty(record.fifo_available_quantity || 0);\n            console.log(\n              `FIFO record ${record.fifo_sequence} has ${availableQty} available`\n            );\n\n            // Calculate how much to take from this record\n            const qtyToDeduct = Math.min(availableQty, remainingQtyToDeduct);\n            const newAvailableQty = roundQty(availableQty - qtyToDeduct);\n\n            console.log(\n              `Deducting ${qtyToDeduct} from FIFO record ${record.fifo_sequence}, new available: ${newAvailableQty}`\n            );\n\n            // Update this FIFO record\n            db.collection(\"fifo_costing_history\")\n              .doc(record.id)\n              .update({\n                fifo_available_quantity: newAvailableQty,\n              })\n              .catch((error) =>\n                console.error(\n                  `Error updating FIFO record ${record.fifo_sequence}:`,\n                  error\n                )\n              );\n\n            // Reduce the remaining quantity to deduct\n            remainingQtyToDeduct -= qtyToDeduct;\n          }\n\n          if (remainingQtyToDeduct > 0) {\n            console.warn(\n              `Warning: Couldn't fully satisfy FIFO deduction. Remaining qty: ${remainingQtyToDeduct}`\n            );\n          }\n        } else {\n          console.warn(`No FIFO records found for material ${materialId}`);\n        }\n      })\n      .catch((error) =>\n        console.error(\n          `Error retrieving FIFO history for material ${materialId}:`,\n          error\n        )\n      )\n      .then(() => {\n        resolve();\n      })\n      .catch((error) => {\n        console.error(`Error in FIFO update:`, error);\n        reject(error);\n      });\n  });\n};\n\nconst updateWeightedAverage = (item, batchId, baseWAQty, plantId) => {\n  // Input validation\n  if (\n    !item ||\n    !item.material_id ||\n    isNaN(parseFloat(baseWAQty)) ||\n    parseFloat(baseWAQty) <= 0\n  ) {\n    console.error(\"Invalid item data for weighted average update:\", item);\n    return Promise.resolve();\n  }\n\n  const deliveredQty = parseFloat(baseWAQty);\n  const query = batchId\n    ? db.collection(\"wa_costing_method\").where({\n        material_id: item.material_id,\n        batch_id: batchId,\n        plant_id: plantId,\n      })\n    : db\n        .collection(\"wa_costing_method\")\n        .where({ material_id: item.material_id, plant_id: plantId });\n\n  return query\n    .get()\n    .then((waResponse) => {\n      const waData = waResponse.data;\n      if (!waData || !Array.isArray(waData) || waData.length === 0) {\n        console.warn(\n          `No weighted average records found for material ${item.material_id}`\n        );\n        return Promise.resolve();\n      }\n\n      // Sort by date (newest first) to get the latest record\n      waData.sort((a, b) => {\n        if (a.created_at && b.created_at) {\n          return new Date(b.created_at) - new Date(a.created_at);\n        }\n        return 0;\n      });\n\n      const waDoc = waData[0];\n      const waCostPrice = roundPrice(waDoc.wa_cost_price || 0);\n      const waQuantity = roundQty(waDoc.wa_quantity || 0);\n\n      if (waQuantity <= deliveredQty) {\n        console.warn(\n          `Warning: Cannot fully update weighted average for ${item.material_id} - ` +\n            `Available: ${waQuantity}, Requested: ${deliveredQty}`\n        );\n\n        if (waQuantity <= 0) {\n          return Promise.resolve();\n        }\n      }\n\n      const newWaQuantity = Math.max(0, roundQty(waQuantity - deliveredQty));\n\n      // If new quantity would be zero, handle specially\n      if (newWaQuantity === 0) {\n        return db\n          .collection(\"wa_costing_method\")\n          .doc(waDoc.id)\n          .update({\n            wa_quantity: 0,\n            updated_at: new Date(),\n          })\n          .then(() => {\n            console.log(\n              `Updated Weighted Average for item ${item.material_id} to zero quantity`\n            );\n            return Promise.resolve();\n          });\n      }\n\n      // const calculatedWaCostPrice = roundPrice(\n      //   (waCostPrice * waQuantity - waCostPrice * deliveredQty) / newWaQuantity\n      // );\n      // const newWaCostPrice = Math.round(calculatedWaCostPrice * 10000) / 10000;\n\n      return db\n        .collection(\"wa_costing_method\")\n        .doc(waDoc.id)\n        .update({\n          wa_quantity: newWaQuantity,\n          wa_cost_price: waCostPrice,\n          updated_at: new Date(),\n        })\n        .then(() => {\n          console.log(\n            `Successfully processed Weighted Average for item ${item.material_id}, ` +\n              `new quantity: ${newWaQuantity}, new cost price: ${waCostPrice}`\n          );\n          return Promise.resolve();\n        });\n    })\n    .catch((error) => {\n      console.error(\n        `Error processing Weighted Average for item ${\n          item?.material_id || \"unknown\"\n        }:`,\n        error\n      );\n      return Promise.reject(error);\n    });\n};\n\n// Function to get latest FIFO cost price with available quantity check\nconst getLatestFIFOCostPrice = async (\n  materialId,\n  batchId,\n  deductionQty = null,\n  previouslyConsumedQty = 0,\n  plantId\n) => {\n  try {\n    const query = batchId\n      ? db.collection(\"fifo_costing_history\").where({\n          material_id: materialId,\n          batch_id: batchId,\n          plant_id: plantId,\n        })\n      : db\n          .collection(\"fifo_costing_history\")\n          .where({ material_id: materialId, plant_id: plantId });\n\n    const response = await query.get();\n    const result = response.data;\n\n    if (result && Array.isArray(result) && result.length > 0) {\n      // Sort by FIFO sequence (lowest/oldest first, as per FIFO principle)\n      const sortedRecords = result.sort(\n        (a, b) => a.fifo_sequence - b.fifo_sequence\n      );\n\n      // Process previously consumed quantities to simulate their effect on available quantities\n      if (previouslyConsumedQty > 0) {\n        let qtyToSkip = previouslyConsumedQty;\n\n        console.log(\n          `Adjusting for ${previouslyConsumedQty} units already consumed in this transaction`\n        );\n\n        // Simulate the effect of previous consumption on available quantities\n        for (let i = 0; i < sortedRecords.length && qtyToSkip > 0; i++) {\n          const record = sortedRecords[i];\n          const availableQty = roundQty(record.fifo_available_quantity || 0);\n\n          if (availableQty <= 0) continue;\n\n          // If this record has enough quantity, just reduce it\n          if (availableQty >= qtyToSkip) {\n            record._adjustedAvailableQty = roundQty(availableQty - qtyToSkip);\n            console.log(\n              `FIFO record ${record.fifo_sequence}: Adjusted available from ${availableQty} to ${record._adjustedAvailableQty} (consumed ${qtyToSkip})`\n            );\n            qtyToSkip = 0;\n          } else {\n            // Otherwise, consume all of this record and continue to next\n            record._adjustedAvailableQty = 0;\n            console.log(\n              `FIFO record ${record.fifo_sequence}: Fully consumed ${availableQty} units, no remainder`\n            );\n            qtyToSkip = roundQty(qtyToSkip - availableQty);\n          }\n        }\n\n        if (qtyToSkip > 0) {\n          console.warn(\n            `Warning: Could not account for all previously consumed quantity. Remaining: ${qtyToSkip}`\n          );\n        }\n      }\n\n      // If no deduction quantity is provided, just return the cost price of the first record with available quantity\n      if (!deductionQty) {\n        // First look for records with available quantity\n        for (const record of sortedRecords) {\n          // Use adjusted quantity if available, otherwise use original\n          const availableQty = roundQty(\n            record._adjustedAvailableQty !== undefined\n              ? record._adjustedAvailableQty\n              : record.fifo_available_quantity || 0\n          );\n\n          if (availableQty > 0) {\n            console.log(\n              `Found FIFO record with available quantity: Sequence ${record.fifo_sequence}, Cost price ${record.fifo_cost_price}`\n            );\n            return roundPrice(record.fifo_cost_price || 0);\n          }\n        }\n\n        // If no records with available quantity, use the most recent record\n        console.warn(\n          `No FIFO records with available quantity found for ${materialId}, using most recent cost price`\n        );\n        return roundPrice(\n          sortedRecords[sortedRecords.length - 1].fifo_cost_price || 0\n        );\n      }\n\n      // If deduction quantity is provided, calculate weighted average cost price across multiple FIFO records\n      let remainingQtyToDeduct = roundQty(deductionQty);\n      let totalCost = 0;\n      let totalDeductedQty = 0;\n\n      // Log the calculation process\n      console.log(\n        `Calculating weighted average FIFO cost for ${materialId}, deduction quantity: ${remainingQtyToDeduct}`\n      );\n\n      // Process each FIFO record in sequence until we've accounted for all deduction quantity\n      for (const record of sortedRecords) {\n        if (remainingQtyToDeduct <= 0) {\n          break;\n        }\n\n        // Use adjusted quantity if available, otherwise use original\n        const availableQty = roundQty(\n          record._adjustedAvailableQty !== undefined\n            ? record._adjustedAvailableQty\n            : record.fifo_available_quantity || 0\n        );\n\n        if (availableQty <= 0) {\n          continue; // Skip records with no available quantity\n        }\n\n        const costPrice = roundPrice(record.fifo_cost_price || 0);\n        const qtyToDeduct = Math.min(availableQty, remainingQtyToDeduct);\n\n        const costContribution = roundPrice(qtyToDeduct * costPrice);\n        totalCost = roundPrice(totalCost + costContribution);\n        totalDeductedQty = roundQty(totalDeductedQty + qtyToDeduct);\n\n        console.log(\n          `FIFO record ${record.fifo_sequence}: Deducting ${qtyToDeduct} units at ${costPrice} per unit = ${costContribution}`\n        );\n\n        remainingQtyToDeduct = roundQty(remainingQtyToDeduct - qtyToDeduct);\n      }\n\n      // If we couldn't satisfy the full deduction from available records, issue a warning\n      if (remainingQtyToDeduct > 0) {\n        console.warn(\n          `Warning: Not enough FIFO quantity available. Remaining to deduct: ${remainingQtyToDeduct}`\n        );\n\n        // For the remaining quantity, use the last record's cost price\n        if (sortedRecords.length > 0) {\n          const lastRecord = sortedRecords[sortedRecords.length - 1];\n          const lastCostPrice = roundPrice(lastRecord.fifo_cost_price || 0);\n\n          console.log(\n            `Using last FIFO record's cost price (${lastCostPrice}) for remaining ${remainingQtyToDeduct} units`\n          );\n\n          const additionalCost = roundPrice(\n            remainingQtyToDeduct * lastCostPrice\n          );\n          totalCost = roundPrice(totalCost + additionalCost);\n          totalDeductedQty = roundQty(totalDeductedQty + remainingQtyToDeduct);\n        }\n      }\n\n      // Calculate the weighted average cost price\n      if (totalDeductedQty > 0) {\n        const weightedAvgCost = roundPrice(totalCost / totalDeductedQty);\n        console.log(\n          `Weighted Average FIFO Cost: ${totalCost} / ${totalDeductedQty} = ${weightedAvgCost}`\n        );\n        return weightedAvgCost;\n      }\n\n      // Fallback to first record with cost if no quantity could be deducted\n      return roundPrice(sortedRecords[0].fifo_cost_price || 0);\n    }\n\n    console.warn(`No FIFO records found for material ${materialId}`);\n    return 0;\n  } catch (error) {\n    console.error(`Error retrieving FIFO cost price for ${materialId}:`, error);\n    return 0;\n  }\n};\n\n// Function to get Weighted Average cost price\nconst getWeightedAverageCostPrice = async (materialId, batchId, plantId) => {\n  try {\n    const query = batchId\n      ? db.collection(\"wa_costing_method\").where({\n          material_id: materialId,\n          batch_id: batchId,\n          plant_id: plantId,\n        })\n      : db\n          .collection(\"wa_costing_method\")\n          .where({ material_id: materialId, plant_id: plantId });\n\n    const response = await query.get();\n    const waData = response.data;\n\n    if (waData && Array.isArray(waData) && waData.length > 0) {\n      // Sort by date (newest first) to get the latest record\n      waData.sort((a, b) => {\n        if (a.created_at && b.created_at) {\n          return new Date(b.created_at) - new Date(a.created_at);\n        }\n        return 0;\n      });\n\n      return roundPrice(waData[0].wa_cost_price || 0);\n    }\n\n    console.warn(\n      `No weighted average records found for material ${materialId}`\n    );\n    return 0;\n  } catch (error) {\n    console.error(`Error retrieving WA cost price for ${materialId}:`, error);\n    return 0;\n  }\n};\n\nconst getFixedCostPrice = async (materialId) => {\n  try {\n    const query = db.collection(\"Item\").where({ id: materialId });\n    const response = await query.get();\n    const result = response.data;\n\n    if (result && result.length > 0) {\n      return roundPrice(parseFloat(result[0].purchase_unit_price || 0));\n    }\n\n    return 0;\n  } catch (error) {\n    console.error(\n      `Error retrieving fixed cost price for ${materialId}:`,\n      error\n    );\n    return 0;\n  }\n};\n\nconst processBalanceTable = async (\n  data,\n  isUpdate,\n  plantId,\n  organizationId,\n  gdStatus\n) => {\n  console.log(\"Processing balance table\");\n  const items = data.table_gd;\n\n  if (!Array.isArray(items) || items.length === 0) {\n    console.log(\"No items to process\");\n    return Promise.resolve();\n  }\n\n  // Create a map to track consumed FIFO quantities during this transaction\n  const consumedFIFOQty = new Map();\n\n  for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n    const item = items[itemIndex];\n    const updatedDocs = [];\n    try {\n      console.log(`Processing item ${itemIndex + 1}/${items.length}`);\n\n      // Input validation\n      if (!item.material_id || !item.temp_qty_data) {\n        console.error(`Invalid item data for index ${itemIndex}:`, item);\n        continue;\n      }\n\n      // Track created or updated documents for potential rollback\n      const createdDocs = [];\n\n      // First check if this item should be processed based on stock_control\n      const itemRes = await db\n        .collection(\"Item\")\n        .where({ id: item.material_id })\n        .get();\n\n      if (!itemRes.data || !itemRes.data.length) {\n        console.error(`Item not found: ${item.material_id}`);\n        return;\n      }\n\n      const itemData = itemRes.data[0];\n      if (itemData.stock_control === 0) {\n        console.log(\n          `Skipping inventory update for item ${item.material_id} (stock_control=0)`\n        );\n        return;\n      }\n\n      const temporaryData = JSON.parse(item.temp_qty_data);\n      const prevTempData = isUpdate\n        ? JSON.parse(item.prev_temp_qty_data)\n        : null;\n\n      if (\n        temporaryData.length > 0 &&\n        (!isUpdate || (prevTempData && prevTempData.length > 0))\n      ) {\n        for (let i = 0; i < temporaryData.length; i++) {\n          const temp = temporaryData[i];\n          const prevTemp = isUpdate ? prevTempData[i] : null;\n\n          console.log(\"gdStatus\", gdStatus);\n          const inventoryCategory =\n            gdStatus === \"Created\" ? \"Reserved\" : \"Unrestricted\";\n\n          // UOM Conversion\n          let altQty = roundQty(temp.gd_quantity);\n          let baseQty = altQty;\n          let altUOM = item.gd_order_uom_id;\n          let baseUOM = itemData.based_uom;\n          let altWAQty = roundQty(item.gd_qty);\n          let baseWAQty = altWAQty;\n          let uomConversion = null;\n          if (\n            Array.isArray(itemData.table_uom_conversion) &&\n            itemData.table_uom_conversion.length > 0\n          ) {\n            console.log(`Checking UOM conversions for item ${item.item_id}`);\n\n            uomConversion = itemData.table_uom_conversion.find(\n              (conv) => conv.alt_uom_id === altUOM\n            );\n\n            if (uomConversion) {\n              console.log(\n                `Found UOM conversion: 1 ${uomConversion.alt_uom_id} = ${uomConversion.base_qty} ${uomConversion.base_uom_id}`\n              );\n\n              baseQty = roundQty(altQty * uomConversion.base_qty);\n              baseWAQty = roundQty(altWAQty * uomConversion.base_qty);\n\n              console.log(\n                `Converted ${altQty} ${altUOM} to ${baseQty} ${baseUOM}`\n              );\n            } else {\n              console.log(`No conversion found for UOM ${altUOM}, using as-is`);\n            }\n          } else {\n            console.log(\n              `No UOM conversion table for item ${item.item_id}, using received quantity as-is`\n            );\n          }\n\n          const costingMethod = itemData.material_costing_method;\n\n          let unitPrice = roundPrice(item.unit_price);\n          let totalPrice = roundPrice(unitPrice * altQty);\n\n          if (costingMethod === \"First In First Out\") {\n            // Define a key for tracking consumed FIFO quantities\n            const materialBatchKey = temp.batch_id\n              ? `${item.material_id}-${temp.batch_id}`\n              : item.material_id;\n\n            // Get previously consumed quantity (default to 0 if none)\n            const previouslyConsumedQty =\n              consumedFIFOQty.get(materialBatchKey) || 0;\n\n            // Get unit price from latest FIFO sequence with awareness of consumed quantities\n            const fifoCostPrice = await getLatestFIFOCostPrice(\n              item.material_id,\n              temp.batch_id,\n              baseQty,\n              previouslyConsumedQty,\n              plantId\n            );\n\n            // Update the consumed quantity for this material/batch\n            consumedFIFOQty.set(\n              materialBatchKey,\n              previouslyConsumedQty + baseQty\n            );\n\n            unitPrice = roundPrice(fifoCostPrice);\n            totalPrice = roundPrice(fifoCostPrice * baseQty);\n          } else if (costingMethod === \"Weighted Average\") {\n            // Get unit price from WA cost price\n            const waCostPrice = await getWeightedAverageCostPrice(\n              item.material_id,\n              temp.batch_id,\n              plantId\n            );\n            unitPrice = roundPrice(waCostPrice);\n            totalPrice = roundPrice(waCostPrice * baseQty);\n          } else if (costingMethod === \"Fixed Cost\") {\n            // Get unit price from Fixed Cost\n            const fixedCostPrice = await getFixedCostPrice(item.material_id);\n            unitPrice = roundPrice(fixedCostPrice);\n            totalPrice = roundPrice(fixedCostPrice * baseQty);\n          } else {\n            return Promise.resolve();\n          }\n\n          // Create inventory_movement record\n          const inventoryMovementData = {\n            transaction_type: \"GDL\",\n            trx_no: data.delivery_no,\n            parent_trx_no: item.line_so_no,\n            movement: \"OUT\",\n            unit_price: unitPrice,\n            total_price: totalPrice,\n            quantity: altQty,\n            item_id: item.material_id,\n            inventory_category: inventoryCategory,\n            uom_id: altUOM,\n            base_qty: baseQty,\n            base_uom_id: baseUOM,\n            bin_location_id: temp.location_id,\n            batch_number_id: temp.batch_id,\n            costing_method_id: item.item_costing_method,\n            plant_id: plantId,\n            organization_id: organizationId,\n          };\n\n          const invMovementResult = await db\n            .collection(\"inventory_movement\")\n            .add(inventoryMovementData);\n          createdDocs.push({\n            collection: \"inventory_movement\",\n            docId: invMovementResult.id,\n          });\n\n          const itemBalanceParams = {\n            material_id: item.material_id,\n            location_id: temp.location_id,\n          };\n\n          if (temp.batch_id) {\n            itemBalanceParams.batch_id = temp.batch_id;\n          }\n\n          const balanceCollection = temp.batch_id\n            ? \"item_batch_balance\"\n            : \"item_balance\";\n\n          const balanceQuery = await db\n            .collection(balanceCollection)\n            .where(itemBalanceParams)\n            .get();\n\n          const hasExistingBalance =\n            balanceQuery.data &&\n            Array.isArray(balanceQuery.data) &&\n            balanceQuery.data.length > 0;\n\n          const existingDoc = hasExistingBalance ? balanceQuery.data[0] : null;\n\n          if (existingDoc && existingDoc.id) {\n            // Update balance\n            let finalUnrestrictedQty = roundQty(\n              parseFloat(existingDoc.unrestricted_qty || 0)\n            );\n            let finalReservedQty = roundQty(\n              parseFloat(existingDoc.reserved_qty || 0)\n            );\n            let finalBalanceQty = roundQty(\n              parseFloat(existingDoc.balance_quantity || 0)\n            );\n\n            if (isUpdate) {\n              let prevAltQty = roundQty(prevTemp.gd_quantity);\n\n              let prevBaseQty = prevAltQty;\n              if (\n                Array.isArray(itemData.table_uom_conversion) &&\n                itemData.table_uom_conversion.length > 0 &&\n                uomConversion\n              ) {\n                prevBaseQty = roundQty(prevAltQty * uomConversion.base_qty);\n              }\n\n              const gdQuantityDiff = roundQty(baseQty - prevBaseQty);\n\n              finalUnrestrictedQty = roundQty(\n                finalUnrestrictedQty - gdQuantityDiff\n              );\n              finalReservedQty = roundQty(finalReservedQty + gdQuantityDiff);\n            }\n\n            if (gdStatus === \"Created\") {\n              finalReservedQty = roundQty(finalReservedQty - baseQty);\n              finalBalanceQty = roundQty(finalBalanceQty - baseQty);\n              console.log(\"finalReservedQty\", finalReservedQty);\n              console.log(\"finalBalanceQty\", finalBalanceQty);\n            } else {\n              finalUnrestrictedQty = roundQty(finalUnrestrictedQty - baseQty);\n              finalBalanceQty = roundQty(finalBalanceQty - baseQty);\n            }\n\n            updatedDocs.push({\n              collection: balanceCollection,\n              docId: existingDoc.id,\n              originalData: {\n                unrestricted_qty: roundQty(\n                  parseFloat(existingDoc.unrestricted_qty || 0)\n                ),\n                reserved_qty: roundQty(\n                  parseFloat(existingDoc.reserved_qty || 0)\n                ),\n                balance_quantity: roundQty(\n                  parseFloat(existingDoc.balance_quantity || 0)\n                ),\n              },\n            });\n\n            await db.collection(balanceCollection).doc(existingDoc.id).update({\n              unrestricted_qty: finalUnrestrictedQty,\n              reserved_qty: finalReservedQty,\n              balance_quantity: finalBalanceQty,\n            });\n          }\n\n          if (costingMethod === \"First In First Out\") {\n            await updateFIFOInventory(\n              item.material_id,\n              baseQty,\n              temp.batch_id,\n              plantId\n            );\n          } else if (costingMethod === \"Weighted Average\") {\n            await updateWeightedAverage(\n              item,\n              temp.batch_id,\n              baseWAQty,\n              plantId\n            );\n          } else {\n            return Promise.resolve();\n          }\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing item ${item.material_id}:`, error);\n\n      // Rollback changes if any operation fails\n      for (const doc of updatedDocs.reverse()) {\n        try {\n          await db\n            .collection(doc.collection)\n            .doc(doc.docId)\n            .update(doc.originalData);\n        } catch (rollbackError) {\n          console.error(\"Rollback error:\", rollbackError);\n        }\n      }\n    }\n  }\n\n  return Promise.resolve();\n};\n\n// Enhanced goods delivery status update\nconst updateSalesOrderStatus = async (salesOrderId, tableGD) => {\n  const soIds = Array.isArray(salesOrderId) ? salesOrderId : [salesOrderId];\n\n  // Arrays to collect data for the return format\n  let soDataArray = [];\n\n  try {\n    const updatePromises = soIds.map(async (salesOrderId) => {\n      const filteredGD = tableGD.filter(\n        (item) => item.line_so_id === salesOrderId\n      );\n\n      const resSO = await db\n        .collection(\"sales_order\")\n        .where({ id: salesOrderId })\n        .get();\n\n      if (!resSO.data || !resSO.data.length) {\n        console.log(`Sales order ${salesOrderId} not found`);\n        return;\n      }\n\n      const soDoc = resSO.data[0];\n\n      const soItems = soDoc.table_so || [];\n      if (!soItems.length) {\n        console.log(`No items found in sales order ${salesOrderId}`);\n        return;\n      }\n\n      const filteredSO = soItems\n        .map((item, index) => ({ ...item, originalIndex: index }))\n        .filter((item) => item.item_name !== \"\" || item.so_desc !== \"\");\n\n      // Create a map to sum delivered quantities for each item\n      let totalItems = soItems.length;\n      let partiallyDeliveredItems = 0;\n      let fullyDeliveredItems = 0;\n\n      // Create a copy of the SO items to update later\n      const updatedSoItems = JSON.parse(JSON.stringify(soItems));\n\n      filteredSO.forEach((filteredItem, filteredIndex) => {\n        const originalIndex = filteredItem.originalIndex;\n        const orderedQty = parseFloat(filteredItem.so_quantity || 0);\n        const gdDeliveredQty = parseFloat(\n          filteredGD[filteredIndex]?.gd_qty || 0\n        );\n        const currentDeliveredQty = parseFloat(\n          updatedSoItems[originalIndex].delivered_qty || 0\n        );\n        const totalDeliveredQty = currentDeliveredQty + gdDeliveredQty;\n\n        // Update the quantity in the original soItems structure\n        updatedSoItems[originalIndex].delivered_qty = totalDeliveredQty;\n\n        // Add ratio for tracking purposes\n        updatedSoItems[originalIndex].delivery_ratio =\n          orderedQty > 0 ? totalDeliveredQty / orderedQty : 0;\n\n        // Count items with ANY delivered quantity as \"partially delivered\"\n        if (totalDeliveredQty > 0) {\n          partiallyDeliveredItems++;\n\n          // Count fully delivered items separately\n          if (totalDeliveredQty >= orderedQty) {\n            fullyDeliveredItems++;\n          }\n        }\n      });\n\n      // Check item completion status\n      let allItemsComplete = fullyDeliveredItems === totalItems;\n      let anyItemProcessing = partiallyDeliveredItems > 0;\n\n      // Determine new status\n      let newSOStatus = soDoc.so_status;\n      let newGDStatus = soDoc.gd_status;\n\n      if (allItemsComplete) {\n        newSOStatus = \"Completed\";\n        newGDStatus = \"Fully Delivered\";\n      } else if (anyItemProcessing) {\n        newSOStatus = \"Processing\";\n        newGDStatus = \"Partially Delivered\";\n      }\n\n      // Create tracking ratios\n      const partiallyDeliveredRatio = `${partiallyDeliveredItems} / ${totalItems}`;\n      const fullyDeliveredRatio = `${fullyDeliveredItems} / ${totalItems}`;\n\n      console.log(`SO ${salesOrderId} status:\n        Total items: ${totalItems}\n        Partially delivered items (including fully delivered): ${partiallyDeliveredItems} (${partiallyDeliveredRatio})\n        Fully delivered items: ${fullyDeliveredItems} (${fullyDeliveredRatio})\n      `);\n\n      // Prepare a single update operation with all changes\n      const updateData = {\n        table_so: updatedSoItems,\n        partially_delivered: partiallyDeliveredRatio,\n        fully_delivered: fullyDeliveredRatio,\n      };\n\n      // Only include status changes if needed\n      if (newSOStatus !== soDoc.so_status) {\n        updateData.so_status = newSOStatus;\n      }\n\n      if (newGDStatus !== soDoc.gd_status) {\n        updateData.gd_status = newGDStatus;\n      }\n\n      // Execute a single database update\n      await db.collection(\"sales_order\").doc(soDoc.id).update(updateData);\n\n      const originalSOStatus = soDoc.so_status;\n      // Log the status change if it occurred\n      if (newSOStatus !== originalSOStatus) {\n        console.log(\n          `Updated SO ${salesOrderId} status from ${originalSOStatus} to ${newSOStatus}`\n        );\n      }\n      return {\n        soId: salesOrderId,\n        newSOStatus,\n        totalItems,\n        partiallyDeliveredItems,\n        fullyDeliveredItems,\n        success: true,\n      };\n    });\n\n    const results = await Promise.all(updatePromises);\n\n    results.forEach((result) => {\n      if (result && result.success) {\n        // Add PO data\n        soDataArray.push({\n          so_id: result.soId,\n          status: result.newSOStatus,\n        });\n      }\n    });\n\n    // Aggregate results for logging\n    const successCount = results.filter((r) => r && r.success).length;\n    const failCount = results.filter((r) => r && !r.success).length;\n\n    console.log(`SO Status Update Summary: \n      Total SOs: ${soIds.length}\n      Successfully updated: ${successCount}\n      Failed updates: ${failCount}\n    `);\n\n    // Return in the requested format\n    return {\n      so_data_array: soDataArray,\n    };\n  } catch (error) {\n    console.error(`Error in update sales order status process:`, error);\n    return {\n      so_data_array: [],\n    };\n  }\n};\n\nconst getPrefixData = async (organizationId) => {\n  console.log(\"Getting prefix data for organization:\", organizationId);\n  try {\n    const prefixEntry = await db\n      .collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Goods Delivery\",\n        is_deleted: 0,\n        organization_id: organizationId,\n        is_active: 1,\n      })\n      .get();\n\n    console.log(\"Prefix data result:\", prefixEntry);\n\n    if (!prefixEntry.data || prefixEntry.data.length === 0) {\n      console.log(\"No prefix configuration found\");\n      return null;\n    }\n\n    return prefixEntry.data[0];\n  } catch (error) {\n    console.error(\"Error getting prefix data:\", error);\n    throw error;\n  }\n};\n\nconst updatePrefix = async (organizationId, runningNumber) => {\n  console.log(\n    \"Updating prefix for organization:\",\n    organizationId,\n    \"with running number:\",\n    runningNumber\n  );\n  try {\n    await db\n      .collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Goods Delivery\",\n        is_deleted: 0,\n        organization_id: organizationId,\n      })\n      .update({\n        running_number: parseInt(runningNumber) + 1,\n        has_record: 1,\n      });\n    console.log(\"Prefix update successful\");\n  } catch (error) {\n    console.error(\"Error updating prefix:\", error);\n    throw error;\n  }\n};\n\nconst generatePrefix = (runNumber, now, prefixData) => {\n  console.log(\"Generating prefix with running number:\", runNumber);\n  try {\n    let generated = prefixData.current_prefix_config;\n    generated = generated.replace(\"prefix\", prefixData.prefix_value);\n    generated = generated.replace(\"suffix\", prefixData.suffix_value);\n    generated = generated.replace(\n      \"month\",\n      String(now.getMonth() + 1).padStart(2, \"0\")\n    );\n    generated = generated.replace(\n      \"day\",\n      String(now.getDate()).padStart(2, \"0\")\n    );\n    generated = generated.replace(\"year\", now.getFullYear());\n    generated = generated.replace(\n      \"running_number\",\n      String(runNumber).padStart(prefixData.padding_zeroes, \"0\")\n    );\n    console.log(\"Generated prefix:\", generated);\n    return generated;\n  } catch (error) {\n    console.error(\"Error generating prefix:\", error);\n    throw error;\n  }\n};\n\nconst checkUniqueness = async (generatedPrefix, organizationId) => {\n  const existingDoc = await db\n    .collection(\"goods_delivery\")\n    .where({ delivery_no: generatedPrefix, organization_id: organizationId })\n    .get();\n\n  return !existingDoc.data || existingDoc.data.length === 0;\n};\n\nconst findUniquePrefix = async (prefixData, organizationId) => {\n  const now = new Date();\n  let prefixToShow;\n  let runningNumber = prefixData.running_number || 1;\n  let isUnique = false;\n  let maxAttempts = 10;\n  let attempts = 0;\n\n  while (!isUnique && attempts < maxAttempts) {\n    attempts++;\n    prefixToShow = generatePrefix(runningNumber, now, prefixData);\n    isUnique = await checkUniqueness(prefixToShow, organizationId);\n    if (!isUnique) {\n      runningNumber++;\n    }\n  }\n\n  if (!isUnique) {\n    throw new Error(\n      \"Could not generate a unique Goods Delivery number after maximum attempts\"\n    );\n  }\n\n  return { prefixToShow, runningNumber };\n};\n\nconst validateForm = (data, requiredFields) => {\n  const missingFields = [];\n\n  requiredFields.forEach((field) => {\n    const value = data[field.name];\n\n    // Handle non-array fields (unchanged)\n    if (!field.isArray) {\n      if (validateField(value, field)) {\n        missingFields.push(field.label);\n      }\n      return;\n    }\n\n    // Handle array fields\n    if (!Array.isArray(value)) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    if (value.length === 0) {\n      missingFields.push(`${field.label}`);\n      return;\n    }\n\n    // Check each item in the array\n    if (field.arrayType === \"object\" && field.arrayFields && value.length > 0) {\n      value.forEach((item, index) => {\n        field.arrayFields.forEach((subField) => {\n          const subValue = item[subField.name];\n          if (validateField(subValue, subField)) {\n            missingFields.push(\n              `${subField.label} (in ${field.label} #${index + 1})`\n            );\n          }\n        });\n      });\n    }\n  });\n\n  return missingFields;\n};\n\nconst validateField = (value, field) => {\n  if (value === undefined || value === null) return true;\n  if (typeof value === \"string\") return value.trim() === \"\";\n  if (typeof value === \"number\") return value <= 0;\n  if (Array.isArray(value)) return value.length === 0;\n  if (typeof value === \"object\") return Object.keys(value).length === 0;\n  return !value;\n};\n\n// Check credit & overdue limit before doing any process\nconst checkCreditOverdueLimit = async (customer_name, gd_total) => {\n  try {\n    const fetchCustomer = await db\n      .collection(\"Customer\")\n      .where({ id: customer_name, is_deleted: 0 })\n      .get();\n\n    const customerData = fetchCustomer.data[0];\n    if (!customerData) {\n      console.error(`Customer ${customer_name} not found`);\n      this.$message.error(`Customer ${customer_name} not found`);\n      return false;\n    }\n\n    const controlTypes = customerData.control_type_list;\n\n    const outstandingAmount =\n      parseFloat(customerData.outstanding_balance || 0) || 0;\n    const overdueAmount =\n      parseFloat(customerData.overdue_inv_total_amount || 0) || 0;\n    const overdueLimit = parseFloat(customerData.overdue_limit || 0) || 0;\n    const creditLimit =\n      parseFloat(customerData.customer_credit_limit || 0) || 0;\n    const gdTotal = parseFloat(gd_total || 0) || 0;\n    const revisedOutstandingAmount = outstandingAmount + gdTotal;\n\n    // Helper function to show specific pop-ups as per specification\n    const showPopup = (popupNumber) => {\n      this.openDialog(\"dialog_credit_limit\");\n\n      const popupConfigs = {\n        1: {\n          // Pop-up 1: Exceed Credit Limit Only (Block)\n          alert: \"alert_credit_limit\", // \"Alert: Credit Limit Exceeded - Review Required\"\n          text: \"text_credit_limit\", // \"The customer has exceed the allowed credit limit.\"\n          showCredit: true,\n          showOverdue: false,\n          isBlock: true,\n          buttonText: \"text_1\", // \"Please review the credit limit or adjust the order amount before issuing the SO.\"\n        },\n        2: {\n          // Pop-up 2: Exceed Overdue Limit Only (Block)\n          alert: \"alert_overdue_limit\", // \"Alert: Overdue Limit Exceeded - Review Required\"\n          text: \"text_overdue_limit\", // \"The customer has exceeded the allowed overdue limit.\"\n          showCredit: false,\n          showOverdue: true,\n          isBlock: true,\n          buttonText: \"text_2\", // \"Please review overdue invoices before proceeding.\"\n        },\n        3: {\n          // Pop-up 3: Exceed Both, Credit Limit and Overdue Limit (Block)\n          alert: \"alert_credit_overdue\", // \"Alert: Credit Limit and Overdue Limit Exceeded - Review Required\"\n          text: \"text_credit_overdue\", // \"The customer has exceeded both credit limit and overdue limit.\"\n          showCredit: true,\n          showOverdue: true,\n          isBlock: true,\n          buttonText: \"text_3\", // \"Please review both limits before proceeding.\"\n        },\n        4: {\n          // Pop-up 4: Exceed Overdue Limit Only (Override)\n          alert: \"alert_overdue_limit\", // \"Alert: Overdue Limit Exceeded - Review Required\"\n          text: \"text_overdue_limit\", // \"The customer has exceeded the allowed overdue limit.\"\n          showCredit: false,\n          showOverdue: true,\n          isBlock: false,\n          buttonText: \"text_4\", // \"Please confirm if you wants to save it.\"\n        },\n        5: {\n          // Pop-up 5: Exceed Credit Limit Only (Override)\n          alert: \"alert_credit_limit\", // \"Alert: Credit Limit Exceeded - Review Required\"\n          text: \"text_credit_limit\", // \"The customer has exceed the allowed credit limit.\"\n          showCredit: true,\n          showOverdue: false,\n          isBlock: false,\n          buttonText: \"text_4\", // \"Please confirm if you wants to save it.\"\n        },\n        6: {\n          // Pop-up 6: Suspended\n          alert: \"alert_suspended\", // \"Customer Account Suspended\"\n          text: \"text_suspended\", // \"This order cannot be processed at this time due to the customer's suspended account status.\"\n          showCredit: false,\n          showOverdue: false,\n          isBlock: true,\n          buttonText: null, // No additional text needed\n        },\n        7: {\n          // Pop-up 7: Exceed Both, Credit Limit and Overdue Limit (Override)\n          alert: \"alert_credit_overdue\", // \"Alert: Credit Limit and Overdue Limit Exceeded - Review Required\"\n          text: \"text_credit_overdue\", // \"The customer has exceeded both credit limit and overdue limit.\"\n          showCredit: true,\n          showOverdue: true,\n          isBlock: false,\n          buttonText: \"text_4\", // \"Please confirm if you wants to save it.\"\n        },\n      };\n\n      const config = popupConfigs[popupNumber];\n      if (!config) return false;\n\n      // Show alert message\n      this.display(`dialog_credit_limit.${config.alert}`);\n\n      // Show description text\n      this.display(`dialog_credit_limit.${config.text}`);\n\n      const dataToSet = {};\n\n      // Show credit limit details if applicable\n      if (config.showCredit) {\n        this.display(\"dialog_credit_limit.total_allowed_credit\");\n        this.display(\"dialog_credit_limit.total_credit\");\n        dataToSet[\"dialog_credit_limit.total_allowed_credit\"] = creditLimit;\n        dataToSet[\"dialog_credit_limit.total_credit\"] =\n          revisedOutstandingAmount;\n      }\n\n      // Show overdue limit details if applicable\n      if (config.showOverdue) {\n        this.display(\"dialog_credit_limit.total_allowed_overdue\");\n        this.display(\"dialog_credit_limit.total_overdue\");\n        dataToSet[\"dialog_credit_limit.total_allowed_overdue\"] = overdueLimit;\n        dataToSet[\"dialog_credit_limit.total_overdue\"] = overdueAmount;\n      }\n\n      // Show action text if applicable\n      if (config.buttonText) {\n        this.display(`dialog_credit_limit.${config.buttonText}`);\n      }\n\n      // Show appropriate buttons\n      if (config.isBlock) {\n        this.display(\"dialog_credit_limit.button_back\"); // \"Back\" button\n      } else {\n        this.display(\"dialog_credit_limit.button_yes\"); // \"Yes\" button\n        this.display(\"dialog_credit_limit.button_no\"); // \"No\" button\n      }\n\n      this.setData(dataToSet);\n      return false;\n    };\n\n    // Check if accuracy flag is set\n    if (controlTypes && Array.isArray(controlTypes)) {\n      // Define control type behaviors according to specification\n      const controlTypeChecks = {\n        // Control Type 0: Ignore both checks (always pass)\n        0: () => {\n          console.log(\"Control Type 0: Ignoring all credit/overdue checks\");\n          return { result: true, priority: \"unblock\" };\n        },\n\n        // Control Type 1: Ignore credit, block overdue\n        1: () => {\n          if (overdueAmount > overdueLimit) {\n            return { result: showPopup(2), priority: \"block\" };\n          }\n          return { result: true, priority: \"unblock\" };\n        },\n\n        // Control Type 2: Ignore credit, override overdue\n        2: () => {\n          if (overdueAmount > overdueLimit) {\n            return { result: showPopup(4), priority: \"override\" };\n          }\n          return { result: true, priority: \"unblock\" };\n        },\n\n        // Control Type 3: Block credit, ignore overdue\n        3: () => {\n          if (revisedOutstandingAmount > creditLimit) {\n            return { result: showPopup(1), priority: \"block\" };\n          }\n          return { result: true, priority: \"unblock\" };\n        },\n\n        // Control Type 4: Block both\n        4: () => {\n          const creditExceeded = revisedOutstandingAmount > creditLimit;\n          const overdueExceeded = overdueAmount > overdueLimit;\n\n          if (creditExceeded && overdueExceeded) {\n            return { result: showPopup(3), priority: \"block\" };\n          } else if (creditExceeded) {\n            return { result: showPopup(1), priority: \"block\" };\n          } else if (overdueExceeded) {\n            return { result: showPopup(2), priority: \"block\" };\n          }\n          return { result: true, priority: \"unblock\" };\n        },\n\n        // Control Type 5: Block credit, override overdue\n        5: () => {\n          const creditExceeded = revisedOutstandingAmount > creditLimit;\n          const overdueExceeded = overdueAmount > overdueLimit;\n\n          // Credit limit block takes priority\n          if (creditExceeded) {\n            if (overdueExceeded) {\n              return { result: showPopup(3), priority: \"block\" };\n            } else {\n              return { result: showPopup(1), priority: \"block\" };\n            }\n          } else if (overdueExceeded) {\n            return { result: showPopup(4), priority: \"override\" };\n          }\n          return { result: true, priority: \"unblock\" };\n        },\n\n        // Control Type 6: Override credit, ignore overdue\n        6: () => {\n          if (revisedOutstandingAmount > creditLimit) {\n            return { result: showPopup(5), priority: \"override\" };\n          }\n          return { result: true, priority: \"unblock\" };\n        },\n\n        // Control Type 7: Override credit, block overdue\n        7: () => {\n          const creditExceeded = revisedOutstandingAmount > creditLimit;\n          const overdueExceeded = overdueAmount > overdueLimit;\n\n          // Overdue block takes priority over credit override\n          if (overdueExceeded) {\n            return { result: showPopup(2), priority: \"block\" };\n          } else if (creditExceeded) {\n            return { result: showPopup(5), priority: \"override\" };\n          }\n          return { result: true, priority: \"unblock\" };\n        },\n\n        // Control Type 8: Override both\n        8: () => {\n          const creditExceeded = revisedOutstandingAmount > creditLimit;\n          const overdueExceeded = overdueAmount > overdueLimit;\n\n          if (creditExceeded && overdueExceeded) {\n            return { result: showPopup(7), priority: \"override\" };\n          } else if (creditExceeded) {\n            return { result: showPopup(5), priority: \"override\" };\n          } else if (overdueExceeded) {\n            return { result: showPopup(4), priority: \"override\" };\n          }\n          return { result: true, priority: \"unblock\" };\n        },\n\n        // Control Type 9: Suspended customer\n        9: () => {\n          return { result: showPopup(6), priority: \"block\" };\n        },\n      };\n\n      // Process according to specification:\n      // \"Ignore parameter with unblock > check for parameter with block's first > if not block only proceed to check for override\"\n\n      // First, collect all applicable control types for Sales Orders\n      const applicableControls = controlTypes\n        .filter((ct) => ct.document_type === \"Goods Delivery\")\n        .map((ct) => {\n          const checkResult = controlTypeChecks[ct.control_type]\n            ? controlTypeChecks[ct.control_type]()\n            : { result: true, priority: \"unblock\" };\n          return {\n            ...checkResult,\n            control_type: ct.control_type,\n          };\n        });\n\n      // Sort by priority: blocks first, then overrides, then unblocks\n      const priorityOrder = { block: 1, override: 2, unblock: 3 };\n      applicableControls.sort(\n        (a, b) => priorityOrder[a.priority] - priorityOrder[b.priority]\n      );\n\n      // Process in priority order\n      for (const control of applicableControls) {\n        if (control.result !== true) {\n          console.log(\n            `Control Type ${control.control_type} triggered with ${control.priority}`\n          );\n          return control.result;\n        }\n      }\n\n      // All checks passed\n      return true;\n    } else {\n      console.log(\n        \"No control type defined for customer or invalid control type format\"\n      );\n      return true;\n    }\n  } catch (error) {\n    console.error(\"Error checking credit/overdue limits:\", error);\n    this.$alert(\n      \"An error occurred while checking credit limits. Please try again.\",\n      \"Error\",\n      {\n        confirmButtonText: \"OK\",\n        type: \"error\",\n      }\n    );\n    return false;\n  }\n};\n\nconst addEntry = async (organizationId, gd, gdStatus) => {\n  try {\n    const prefixData = await getPrefixData(organizationId);\n\n    if (prefixData.length !== 0) {\n      const { prefixToShow, runningNumber } = await findUniquePrefix(\n        prefixData,\n        organizationId\n      );\n\n      await updatePrefix(organizationId, runningNumber);\n\n      gd.delivery_no = prefixToShow;\n    }\n    await db.collection(\"goods_delivery\").add(gd);\n\n    await processBalanceTable(gd, false, gd.plant_id, organizationId, gdStatus);\n\n    const { so_data_array } = await updateSalesOrderStatus(\n      gd.so_id,\n      gd.table_gd\n    );\n\n    await this.runWorkflow(\n      \"1918140858502557698\",\n      { delivery_no: gd.delivery_no, so_data: so_data_array },\n      async (res) => {\n        console.log(\"成功结果：\", res);\n      },\n      (err) => {\n        alert();\n        console.error(\"失败结果：\", err);\n        closeDialog();\n      }\n    );\n\n    this.$message.success(\"Add successfully\");\n    await closeDialog();\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\nconst updateEntry = async (organizationId, gd, gdStatus, goodsDeliveryId) => {\n  try {\n    if (gdStatus === \"Draft\") {\n      const prefixData = await getPrefixData(organizationId);\n\n      if (prefixData.length !== 0) {\n        const { prefixToShow, runningNumber } = await findUniquePrefix(\n          prefixData,\n          organizationId\n        );\n\n        await updatePrefix(organizationId, runningNumber);\n\n        gd.delivery_no = prefixToShow;\n      }\n    }\n    await db.collection(\"goods_delivery\").doc(goodsDeliveryId).update(gd);\n\n    await processBalanceTable(gd, true, gd.plant_id, organizationId, gdStatus);\n\n    const { so_data_array } = await updateSalesOrderStatus(\n      gd.so_id,\n      gd.table_gd\n    );\n\n    await this.runWorkflow(\n      \"1918140858502557698\",\n      { delivery_no: gd.delivery_no, so_data: so_data_array },\n      async (res) => {\n        console.log(\"成功结果：\", res);\n      },\n      (err) => {\n        alert();\n        console.error(\"失败结果：\", err);\n        closeDialog();\n      }\n    );\n\n    this.$message.success(\"Update successfully\");\n    await closeDialog();\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\nconst findFieldMessage = (obj) => {\n  // Base case: if current object has the structure we want\n  if (obj && typeof obj === \"object\") {\n    if (obj.field && obj.message) {\n      return obj.message;\n    }\n\n    // Check array elements\n    if (Array.isArray(obj)) {\n      for (const item of obj) {\n        const found = findFieldMessage(item);\n        if (found) return found;\n      }\n    }\n\n    // Check all object properties\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const found = findFieldMessage(obj[key]);\n        if (found) return found;\n      }\n    }\n  }\n  return null;\n};\n\n// Main execution wrapped in an async IIFE\n(async () => {\n  // Prevent duplicate processing\n  if (!preventDuplicateProcessing()) {\n    return;\n  }\n\n  try {\n    this.showLoading();\n    const data = await this.getValues();\n\n    // Get page status\n    const page_status = data.page_status;\n    const gdStatus = data.gd_status;\n\n    // Define required fields\n    const requiredFields = [\n      { name: \"customer_name\", label: \"Customer\" },\n      { name: \"plant_id\", label: \"Plant\" },\n      { name: \"so_id\", label: \"Sales Order\" },\n      { name: \"delivery_date\", label: \"Delivery Date\" },\n      {\n        name: \"table_gd\",\n        label: \"Item Information\",\n        isArray: true,\n        arrayType: \"object\",\n        arrayFields: [],\n      },\n    ];\n\n    for (const gd of data.table_gd) {\n      await this.validate(gd.gd_qty);\n    }\n\n    // Validate form\n    const missingFields = validateForm(data, requiredFields);\n\n    if (data.acc_integration_type !== null) {\n      const canProceed = await checkCreditOverdueLimit(\n        data.customer_name,\n        data.gd_total\n      );\n      if (!canProceed) {\n        console.log(\"Credit/overdue limit check failed\");\n        this.hideLoading();\n        return;\n      }\n    }\n\n    console.log(\"Credit/overdue limit check passed\");\n\n    if (missingFields.length === 0) {\n      // If this is an edit, store previous temporary quantities\n      if (page_status === \"Edit\" && Array.isArray(data.table_gd)) {\n        data.table_gd.forEach((item) => {\n          item.prev_temp_qty_data = item.temp_qty_data;\n        });\n      }\n\n      // Get organization ID\n      let organizationId = this.getVarGlobal(\"deptParentId\");\n      if (organizationId === \"0\") {\n        organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n      }\n\n      const {\n        fake_so_id,\n        so_id,\n        so_no,\n        gd_billing_address,\n        gd_shipping_address,\n        delivery_no,\n        plant_id,\n        organization_id,\n        gd_ref_doc,\n        customer_name,\n        email_address,\n        document_description,\n        gd_delivery_method,\n        delivery_date,\n\n        driver_name,\n        driver_contact_no,\n        ic_noic_no,\n        validity_of_collection,\n        vehicle_no,\n        pickup_date,\n\n        courier_company,\n        shipping_date,\n        freight_charges,\n        tracking_number,\n        est_arrival_date,\n\n        driver_cost,\n        est_delivery_date,\n\n        shipping_company,\n        shipping_method,\n\n        tpt_vehicle_number,\n        tpt_transport_name,\n        tpt_ic_no,\n        tpt_driver_contact_no,\n\n        table_gd,\n        order_remark,\n        billing_address_line_1,\n        billing_address_line_2,\n        billing_address_line_3,\n        billing_address_line_4,\n        billing_address_city,\n        billing_address_state,\n        billing_address_country,\n        billing_postal_code,\n        billing_address_name,\n        billing_address_phone,\n        billing_attention,\n\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_line_3,\n        shipping_address_line_4,\n        shipping_address_city,\n        shipping_address_state,\n        shipping_address_country,\n        shipping_postal_code,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_attention,\n\n        acc_integration_type,\n        last_sync_date,\n        customer_credit_limit,\n        overdue_limit,\n        outstanding_balance,\n        overdue_inv_total_amount,\n        is_accurate,\n        gd_total,\n      } = data;\n\n      // Prepare goods delivery object\n      const gd = {\n        gd_status: \"Completed\",\n        fake_so_id,\n        so_id,\n        so_no,\n        gd_billing_address,\n        gd_shipping_address,\n        delivery_no,\n        plant_id,\n        organization_id,\n        gd_ref_doc,\n        customer_name,\n        email_address,\n        document_description,\n        gd_delivery_method,\n        delivery_date,\n\n        driver_name,\n        driver_contact_no,\n        ic_noic_no,\n        validity_of_collection,\n        vehicle_no,\n        pickup_date,\n\n        courier_company,\n        shipping_date,\n        freight_charges,\n        tracking_number,\n        est_arrival_date,\n\n        driver_cost,\n        est_delivery_date,\n\n        shipping_company,\n        shipping_method,\n\n        tpt_vehicle_number,\n        tpt_transport_name,\n        tpt_ic_no,\n        tpt_driver_contact_no,\n\n        table_gd,\n        order_remark,\n        billing_address_line_1,\n        billing_address_line_2,\n        billing_address_line_3,\n        billing_address_line_4,\n        billing_address_city,\n        billing_address_state,\n        billing_address_country,\n        billing_postal_code,\n        billing_address_name,\n        billing_address_phone,\n        billing_attention,\n\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_line_3,\n        shipping_address_line_4,\n        shipping_address_city,\n        shipping_address_state,\n        shipping_address_country,\n        shipping_postal_code,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_attention,\n\n        acc_integration_type,\n        last_sync_date,\n        customer_credit_limit,\n        overdue_limit,\n        outstanding_balance,\n        overdue_inv_total_amount,\n        is_accurate,\n        gd_total,\n      };\n\n      // Clean up undefined/null values\n      Object.keys(gd).forEach((key) => {\n        if (gd[key] === undefined || gd[key] === null) {\n          delete gd[key];\n        }\n      });\n\n      // Perform action based on page status\n      if (page_status === \"Add\") {\n        await addEntry(organizationId, gd, gdStatus);\n      } else if (page_status === \"Edit\") {\n        const goodsDeliveryId = data.id;\n        await updateEntry(organizationId, gd, gdStatus, goodsDeliveryId);\n      }\n    } else {\n      this.hideLoading();\n      this.$message.error(`Validation errors: ${missingFields.join(\", \")}`);\n    }\n  } catch (error) {\n    this.hideLoading();\n\n    // Try to get message from standard locations first\n    let errorMessage = \"\";\n\n    if (error && typeof error === \"object\") {\n      errorMessage = findFieldMessage(error) || \"An error occurred\";\n    } else {\n      errorMessage = error;\n    }\n\n    this.$message.error(errorMessage);\n    console.error(errorMessage);\n  } finally {\n    window.isProcessing = false;\n    this.hideLoading();\n    console.log(\"Goods Delivery function execution completed\");\n  }\n})();\n",
        "type": "js"
      },
      {
        "key": "sssi65lq",
        "name": "onChange_sssi65lq",
        "func": "",
        "type": "rule"
      },
      {
        "key": "z33s9n59",
        "name": "onChange_z33s9n59",
        "func": "",
        "type": "rule"
      },
      {
        "key": "p4l5pabr",
        "name": "onChange_p4l5pabr",
        "func": "",
        "type": "rule"
      },
      {
        "key": "qaf5hrfd",
        "name": "onChange_qaf5hrfd",
        "func": "",
        "type": "rule"
      },
      {
        "key": "a94a6tnd",
        "name": "onChange_customer",
        "func": "(async () => {\n  try {\n    const customerId = arguments[0]?.value;\n\n    // Handle customer ID change\n    if (customerId && !Array.isArray(customerId)) {\n      // Fetch customer data\n      const resCustomer = await db\n        .collection(\"Customer\")\n        .where({ id: customerId })\n        .get();\n\n      if (!resCustomer?.data || resCustomer.data.length === 0) {\n        console.error(\"Customer not found:\", customerId);\n        return;\n      }\n\n      const customerData = resCustomer.data[0];\n\n      if (customerData.contact_list && customerData.contact_list.length > 0) {\n        await this.setData({\n          gd_contact_name: customerData.contact_list[0].person_name,\n          contact_number: customerData.contact_list[0].mobile_number,\n          email_address: customerData.contact_list[0].person_email,\n        });\n      }\n\n      const customerCurrencyId = customerData.customer_currency_id;\n\n      console.log(\"customerCurrencyId\", customerCurrencyId);\n\n      if (customerCurrencyId) {\n        const resCurrency = await db\n          .collection(\"currency\")\n          .where({ id: customerCurrencyId })\n          .get();\n\n        const currencyEntry = resCurrency.data[0];\n        const currencyCode = currencyEntry.currency_code;\n        this.setData({ currency_code: currencyCode });\n      }\n\n      if (customerData.is_accurate === 0) {\n        this.openDialog(\"dialog_accurate\");\n      }\n\n      this.setData({\n        acc_integration_type: customerData.acc_integration_type,\n        last_sync_date: customerData.last_sync_date,\n        customer_credit_limit: customerData.customer_credit_limit,\n        overdue_limit: customerData.overdue_limit,\n        outstanding_balance: customerData.outstanding_balance,\n        overdue_inv_total_amount: customerData.overdue_inv_total_amount,\n        is_accurate: customerData.is_accurate,\n      });\n    }\n  } catch (error) {\n    console.error(\"Error in customer address processing:\", error);\n  }\n})();\n",
        "type": "js"
      },
      {
        "key": "24sne8o1",
        "name": "onChange_fake_so_id",
        "func": "(async () => {\n  const fake_so_id = arguments[0]?.value;\n\n  if (fake_so_id && !Array.isArray(fake_so_id)) {\n    const resSO = await db\n      .collection(\"sales_order\")\n      .where({ id: fake_so_id })\n      .get();\n\n    const soData = resSO.data[0];\n\n    await this.setData({\n      so_id: [fake_so_id],\n      customer_name: soData.customer_name,\n      gd_delivery_method: soData.so_delivery_method,\n    });\n    \n    await this.triggerEvent('func_reset_delivery_method');\n\n    this.setData({ 'delivery_method_text': soData.so_delivery_method });\n    const visibilityMap = {\n      'Self Pickup': 'self_pickup',\n      'Courier Service': 'courier_service',\n      'Company Truck': 'company_truck',\n      'Shipping Service': 'shipping_service',\n      \"3rd Party Transporter\": \"third_party_transporter\",\n\n    };\n\n    const selectedField = visibilityMap[arguments[0].fieldModel.label] || null;\n    const fields = ['self_pickup', 'courier_service', 'company_truck','shipping_service', 'third_party_transporter'];\n\n    fields.forEach(field => {\n      field === selectedField ? this.display(field) : this.hide(field);\n    });\n\n    switch(soData.so_delivery_method){\n      case 'Self Pickup':\n        this.setData({\n          'driver_name': soData.cp_driver_name,\n          'ic_no': soData.cp_ic_no,\n          'driver_contact_no': soData.cp_driver_contact_no,\n          'vehicle_no': soData.cp_vehicle_number,\n          'pickup_date': soData.cp_pickup_date,\n          'validity_of_collection': soData.validity_of_collection,\n        })\n        break;\n\n      case 'Courier Service':\n        this.setData({\n          'courier_company': soData.cs_courier_company,\n          'shipping_date': soData.cs_shipping_date,\n          'tracking_number': soData.cs_tracking_number,\n          'est_arrival_date': soData.est_arrival_date,\n          'freight_charges': soData.cs_freight_charges\n        })\n        break;\n\n      case 'Company Truck':\n        this.setData({\n          'driver_name': soData.ct_driver_name,\n          'driver_contact_no': soData.ct_driver_contact_no,\n          'ic_no': soData.ct_ic_no,\n          'vehicle_no': soData.ct_vehicle_number,\n          'est_delivery_date': soData.ct_est_delivery_date,\n          'delivery_cost': soData.ct_delivery_cost\n        })\n        break;\n\n      case 'Shipping Service':\n        this.setData({\n          'shipping_company': soData.ss_shipping_company,\n          'shipping_date': soData.ss_shippping_date,\n          'freight_charges': soData.ss_freight_charges,\n          'shipping_method': soData.ss_shipping_method,\n          'est_arrival_date': soData.ss_est_arrival_date,\n          'tracking_number': soData.ss_tracking_number\n        })\n        break;\n\n      case '3rd Party Transporter':\n        this.setData({\n          'tpt_vehicle_number': soData.tpt_vehicle_number,\n          'tpt_transport_name': soData.tpt_transport_name,\n          'tpt_ic_no': soData.tpt_ic_no,\n          'tpt_driver_contact_no': soData.tpt_driver_contact_no\n        })\n        break;\n    }\n\n    await this.display(\"so_id\");\n    await this.hide(\"fake_so_id\");\n  }\n})();\n",
        "type": "js"
      },
      {
        "key": "wzrzh8vj",
        "name": "func_reset_delivery_method",
        "func": "this.setData({\n    'delivery_method_text': '',\n\n    'driver_name': '',\n    'ic_no': '',\n    'driver_contact_no': '',\n    'vehicle_no': '',\n    'pickup_date': '',\n    'validity_of_collection': '',\n\n    'courier_company': '',\n    'shipping_date': '',\n    'tracking_number': '',\n    'est_arrival_date': '',\n    'freight_charges': '',\n\n    'driver_name': '',\n    'driver_contact_no': '',\n    'ic_no': '',\n    'vehicle_no': '',\n    'est_delivery_date': '',\n    'delivery_cost': '',\n\n    'shipping_company': '',\n    'shipping_date': '',\n    'freight_charges': '',\n    'shipping_method': '',\n    'est_arrival_date': '',\n    'tracking_number': '',\n\n    'tpt_vehicle_number': '',\n    'tpt_transport_name': '',\n    'tpt_ic_no': '',\n    'tpt_driver_contact_no': ''\n})",
        "type": "js"
      },
      {
        "key": "euds6qdw",
        "name": "onChange_plant",
        "func": "(async () => {\n  const plant = arguments[0]?.value;\n\n  this.hide('address_grid')\n\n  this.setData({\n    'fake_so_id': '',\n    'so_id': '',\n    'customer_name': '',\n    'currency_code': '',\n    'so_no': '',\n\n    'gd_billing_name': '',\n    'gd_billing_cp': '',\n    'gd_billing_address': '',\n    'gd_shipping_address': '',\n\n    'gd_contact_name': '',\n    'contact_number': '',\n    'email_address': '',\n\n    'gd_delivery_method': '',\n    'document_description': '',\n    'so_docref': '',\n    'gd_dockey': '',\n    'table_gd': [],\n    'gd_item_balance.table_item_balance': [],\n    'gd_item_balance.material_code': '',\n    'gd_item_balance.material_name': '',\n    'gd_item_balance.material_uom': '',\n    'gd_item_balance.row_index': '',\n\n    'driver_name': '',\n    'ic_no': '',\n    'driver_contact_no': '',\n    'vehicle_no': '',\n    'pickup_date': '',\n    'validity_of_collection': '',\n\n    'courier_company': '',\n    'shipping_date': '',\n    'tracking_number': '',\n    'est_arrival_date': '',\n    'freight_charges': '',\n\n    'driver_name': '',\n    'driver_contact_no': '',\n    'ic_no': '',\n    'vehicle_no': '',\n    'est_delivery_date': '',\n    'delivery_cost': '',\n\n    'shipping_company': '',\n    'shipping_date': '',\n    'freight_charges': '',\n    'shipping_method': '',\n    'est_arrival_date': '',\n    'tracking_number': '',\n\n    'tpt_vehicle_number': '',\n    'tpt_transport_name': '',\n    'tpt_ic_no': '',\n    'tpt_driver_contact_no': '',\n\n    'billing_address_line_1': '',\n    'billing_address_line_2': '',\n    'billing_address_line_3': '',\n    'billing_address_line_4': '',\n\n    'billing_address_city': '',\n    'billing_postal_code': '',\n    'billing_address_state': '',\n    'billing_address_country': '',\n\n    'shipping_address_line_1': '',\n    'shipping_address_line_1': '',\n    'shipping_address_line_1': '',\n    'shipping_address_line_1': '',\n\n    'shipping_address_city': '',\n    'shipping_postal_code': '',\n    'shipping_address_state': '',\n    'shipping_address_country': '',\n\n    'order_remark': ''\n\n  })\n\n  if(plant){\n      this.disabled(['fake_so_id', 'gd_ref_doc', 'gd_delivery_method', 'document_description', 'order_remark'], false);\n      this.display('fake_so_id');\n      this.hide('so_id');\n  }\n\n\n})();\n",
        "type": "js"
      },
      {
        "key": "qwkdom4g",
        "name": "onChange_delivered_qty",
        "func": "(async () => {\n    const quantity = arguments[0].value;\n    const rowIndex = arguments[0].rowIndex;\n    const orderedQty = this.getValue(`table_gd.${rowIndex}.gd_order_quantity`);\n    const gd_initial_delivered_qty = this.getValue(`table_gd.${rowIndex}.gd_initial_delivered_qty`);\n    const uom = this.getValue(`table_gd.${rowIndex}.gd_order_uom_id`);\n\n    const undeliveredQty = orderedQty - gd_initial_delivered_qty;\n\n    if(quantity >= 0){\n        if(quantity > undeliveredQty) {\n            return;\n        } else {\n\n            const itemCode = this.getValue(`table_gd.${rowIndex}.material_id`);\n            const itemDesc = this.getValue(`table_gd.${rowIndex}.gd_material_desc`);\n            if(!itemCode && itemDesc !== '') {\n\n                let uomData = '';\n    \n                if(uom) {\n                    const gdUOM = await db.collection(\"unit_of_measurement\").where({ id: uom }).get()\n                    uomData = gdUOM.data[0].uom_name;\n                }\n\n                const totalDeliveredQty = quantity + gd_initial_delivered_qty;\n    \n                this.setData({\n                    [`table_gd.${rowIndex}.gd_delivered_qty`]: totalDeliveredQty,\n                    [`table_gd.${rowIndex}.gd_undelivered_qty`]: orderedQty - totalDeliveredQty,\n                    [`table_gd.${rowIndex}.view_stock`]: \"Total: \" + quantity + \" \" + uomData\n    \n                })\n            }\n\n            \n        }\n    }\n})();",
        "type": "js"
      },
      {
        "key": "ojxqozbb",
        "name": "onCancel_creditLimit",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "qsbnrqlz",
            "action": "closeDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "dialog_credit_limit"
            }
          }
        ]
      },
      {
        "key": "ol2yrfe5",
        "name": "onCancel_isAccurate",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "4c6qwekb",
            "action": "closeDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "dialog_accurate"
            }
          }
        ]
      },
      {
        "key": "qr1v486c",
        "name": "onClick_isAccurate",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "a8a3wgbm",
            "action": "closeDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "dialog_accurate"
            }
          },
          {
            "key": "fii8ilqq",
            "action": "js",
            "options": {
              "func": "(async () => {\n  try {\n    const customer_id = this.getValue(\"customer_name\");\n    this.showLoading();\n    await this.runWorkflow(\n      \"1902566784276480001\",\n      { cust_id: customer_id, is_single: 1 },\n      async (res) => {\n        console.log(\"成功结果：\", res);\n      },\n      (err) => {\n        console.error(\"失败结果：\", err);\n      }\n    );\n\n    await db\n      .collection(\"Customer\")\n      .where({ id: customer_id })\n      .then((res) => {\n        const customerData = res.data[0];\n        if (customerData) {\n          this.setData({\n            acc_integration_type: customerData.acc_integration_type,\n            last_sync_date: customerData.last_sync_date,\n            customer_credit_limit: customerData.customer_credit_limit,\n            overdue_limit: customerData.overdue_limit,\n            outstanding_balance: customerData.outstanding_balance,\n            overdue_inv_total_amount: customerData.overdue_inv_total_amount,\n            is_accurate: customerData.is_accurate,\n          });\n        }\n      });\n\n    this.hideLoading();\n    this.$message.success(\"Sync customer successfully\");\n  } catch (error) {\n    console.error(\"Error in main execution:\", error);\n    this.hideLoading();\n    this.$message.error(\"An error occurred while sync customer\");\n  }\n})();\n"
            }
          }
        ]
      },
      {
        "key": "e5v7cseq",
        "name": "onClick_creditLimit",
        "func": "",
        "type": "rule",
        "rules": [
          {
            "key": "hc7035lm",
            "action": "closeDialog",
            "options": {
              "condition": "",
              "isCondition": false,
              "field": "dialog_credit_limit"
            }
          },
          {
            "key": "rz0na3dp",
            "action": "js",
            "options": {
              "func": "const closeDialog = () => {\n  if (this.parentGenerateForm) {\n    this.parentGenerateForm.$refs.SuPageDialogRef.hide();\n    this.parentGenerateForm.refresh();\n    this.hideLoading();\n  }\n};\n\n// For quantities - 3 decimal places\nconst roundQty = (value) => {\n  return parseFloat(parseFloat(value || 0).toFixed(3));\n};\n\n// For prices - 4 decimal places\nconst roundPrice = (value) => {\n  return parseFloat(parseFloat(value || 0).toFixed(4));\n};\n\n// Prevent duplicate processing\nconst preventDuplicateProcessing = () => {\n  if (window.isProcessing) {\n    console.log(\"Process already running, skipping...\");\n    return false;\n  }\n\n  const transactionId =\n    Date.now().toString() + Math.random().toString(36).substring(2, 15);\n  if (!window.processedTransactions) {\n    window.processedTransactions = new Set();\n  }\n\n  if (window.processedTransactions.has(transactionId)) {\n    console.log(\"This transaction already processed\");\n    return false;\n  }\n\n  window.processedTransactions.add(transactionId);\n\n  if (window.processedTransactions.size > 50) {\n    const transactions = Array.from(window.processedTransactions);\n    window.processedTransactions = new Set(transactions.slice(-20));\n  }\n\n  window.isProcessing = true;\n  return true;\n};\n\n// Update FIFO inventory\nconst updateFIFOInventory = (materialId, deliveryQty, batchId, plantId) => {\n  return new Promise((resolve, reject) => {\n    const query = batchId\n      ? db.collection(\"fifo_costing_history\").where({\n          material_id: materialId,\n          batch_id: batchId,\n          plant_id: plantId,\n        })\n      : db\n          .collection(\"fifo_costing_history\")\n          .where({ material_id: materialId, plant_id: plantId });\n\n    query\n      .get()\n      .then((response) => {\n        const result = response.data;\n\n        if (result && Array.isArray(result) && result.length > 0) {\n          // Sort by FIFO sequence (lowest/oldest first)\n          const sortedRecords = result.sort(\n            (a, b) => a.fifo_sequence - b.fifo_sequence\n          );\n\n          let remainingQtyToDeduct = parseFloat(deliveryQty);\n          console.log(\n            `Need to deduct ${remainingQtyToDeduct} units from FIFO inventory`\n          );\n\n          // Process each FIFO record in sequence until we've accounted for all delivery quantity\n          for (const record of sortedRecords) {\n            if (remainingQtyToDeduct <= 0) {\n              break;\n            }\n\n            const availableQty = roundQty(record.fifo_available_quantity || 0);\n            console.log(\n              `FIFO record ${record.fifo_sequence} has ${availableQty} available`\n            );\n\n            // Calculate how much to take from this record\n            const qtyToDeduct = Math.min(availableQty, remainingQtyToDeduct);\n            const newAvailableQty = roundQty(availableQty - qtyToDeduct);\n\n            console.log(\n              `Deducting ${qtyToDeduct} from FIFO record ${record.fifo_sequence}, new available: ${newAvailableQty}`\n            );\n\n            // Update this FIFO record\n            db.collection(\"fifo_costing_history\")\n              .doc(record.id)\n              .update({\n                fifo_available_quantity: newAvailableQty,\n              })\n              .catch((error) =>\n                console.error(\n                  `Error updating FIFO record ${record.fifo_sequence}:`,\n                  error\n                )\n              );\n\n            // Reduce the remaining quantity to deduct\n            remainingQtyToDeduct -= qtyToDeduct;\n          }\n\n          if (remainingQtyToDeduct > 0) {\n            console.warn(\n              `Warning: Couldn't fully satisfy FIFO deduction. Remaining qty: ${remainingQtyToDeduct}`\n            );\n          }\n        } else {\n          console.warn(`No FIFO records found for material ${materialId}`);\n        }\n      })\n      .catch((error) =>\n        console.error(\n          `Error retrieving FIFO history for material ${materialId}:`,\n          error\n        )\n      )\n      .then(() => {\n        resolve();\n      })\n      .catch((error) => {\n        console.error(`Error in FIFO update:`, error);\n        reject(error);\n      });\n  });\n};\n\nconst updateWeightedAverage = (item, batchId, baseWAQty, plantId) => {\n  // Input validation\n  if (\n    !item ||\n    !item.material_id ||\n    isNaN(parseFloat(baseWAQty)) ||\n    parseFloat(baseWAQty) <= 0\n  ) {\n    console.error(\"Invalid item data for weighted average update:\", item);\n    return Promise.resolve();\n  }\n\n  const deliveredQty = parseFloat(baseWAQty);\n  const query = batchId\n    ? db.collection(\"wa_costing_method\").where({\n        material_id: item.material_id,\n        batch_id: batchId,\n        plant_id: plantId,\n      })\n    : db\n        .collection(\"wa_costing_method\")\n        .where({ material_id: item.material_id, plant_id: plantId });\n\n  return query\n    .get()\n    .then((waResponse) => {\n      const waData = waResponse.data;\n      if (!waData || !Array.isArray(waData) || waData.length === 0) {\n        console.warn(\n          `No weighted average records found for material ${item.material_id}`\n        );\n        return Promise.resolve();\n      }\n\n      // Sort by date (newest first) to get the latest record\n      waData.sort((a, b) => {\n        if (a.created_at && b.created_at) {\n          return new Date(b.created_at) - new Date(a.created_at);\n        }\n        return 0;\n      });\n\n      const waDoc = waData[0];\n      const waCostPrice = roundPrice(waDoc.wa_cost_price || 0);\n      const waQuantity = roundQty(waDoc.wa_quantity || 0);\n\n      if (waQuantity <= deliveredQty) {\n        console.warn(\n          `Warning: Cannot fully update weighted average for ${item.material_id} - ` +\n            `Available: ${waQuantity}, Requested: ${deliveredQty}`\n        );\n\n        if (waQuantity <= 0) {\n          return Promise.resolve();\n        }\n      }\n\n      const newWaQuantity = Math.max(0, roundQty(waQuantity - deliveredQty));\n\n      // If new quantity would be zero, handle specially\n      if (newWaQuantity === 0) {\n        return db\n          .collection(\"wa_costing_method\")\n          .doc(waDoc.id)\n          .update({\n            wa_quantity: 0,\n            updated_at: new Date(),\n          })\n          .then(() => {\n            console.log(\n              `Updated Weighted Average for item ${item.material_id} to zero quantity`\n            );\n            return Promise.resolve();\n          });\n      }\n\n      // const calculatedWaCostPrice = roundPrice(\n      //   (waCostPrice * waQuantity - waCostPrice * deliveredQty) / newWaQuantity\n      // );\n      // const newWaCostPrice = Math.round(calculatedWaCostPrice * 10000) / 10000;\n\n      return db\n        .collection(\"wa_costing_method\")\n        .doc(waDoc.id)\n        .update({\n          wa_quantity: newWaQuantity,\n          wa_cost_price: waCostPrice,\n          updated_at: new Date(),\n        })\n        .then(() => {\n          console.log(\n            `Successfully processed Weighted Average for item ${item.material_id}, ` +\n              `new quantity: ${newWaQuantity}, new cost price: ${waCostPrice}`\n          );\n          return Promise.resolve();\n        });\n    })\n    .catch((error) => {\n      console.error(\n        `Error processing Weighted Average for item ${\n          item?.material_id || \"unknown\"\n        }:`,\n        error\n      );\n      return Promise.reject(error);\n    });\n};\n\n// Function to get latest FIFO cost price with available quantity check\nconst getLatestFIFOCostPrice = async (\n  materialId,\n  batchId,\n  deductionQty = null,\n  previouslyConsumedQty = 0,\n  plantId\n) => {\n  try {\n    const query = batchId\n      ? db.collection(\"fifo_costing_history\").where({\n          material_id: materialId,\n          batch_id: batchId,\n          plant_id: plantId,\n        })\n      : db\n          .collection(\"fifo_costing_history\")\n          .where({ material_id: materialId, plant_id: plantId });\n\n    const response = await query.get();\n    const result = response.data;\n\n    if (result && Array.isArray(result) && result.length > 0) {\n      // Sort by FIFO sequence (lowest/oldest first, as per FIFO principle)\n      const sortedRecords = result.sort(\n        (a, b) => a.fifo_sequence - b.fifo_sequence\n      );\n\n      // Process previously consumed quantities to simulate their effect on available quantities\n      if (previouslyConsumedQty > 0) {\n        let qtyToSkip = previouslyConsumedQty;\n\n        console.log(\n          `Adjusting for ${previouslyConsumedQty} units already consumed in this transaction`\n        );\n\n        // Simulate the effect of previous consumption on available quantities\n        for (let i = 0; i < sortedRecords.length && qtyToSkip > 0; i++) {\n          const record = sortedRecords[i];\n          const availableQty = roundQty(record.fifo_available_quantity || 0);\n\n          if (availableQty <= 0) continue;\n\n          // If this record has enough quantity, just reduce it\n          if (availableQty >= qtyToSkip) {\n            record._adjustedAvailableQty = roundQty(availableQty - qtyToSkip);\n            console.log(\n              `FIFO record ${record.fifo_sequence}: Adjusted available from ${availableQty} to ${record._adjustedAvailableQty} (consumed ${qtyToSkip})`\n            );\n            qtyToSkip = 0;\n          } else {\n            // Otherwise, consume all of this record and continue to next\n            record._adjustedAvailableQty = 0;\n            console.log(\n              `FIFO record ${record.fifo_sequence}: Fully consumed ${availableQty} units, no remainder`\n            );\n            qtyToSkip = roundQty(qtyToSkip - availableQty);\n          }\n        }\n\n        if (qtyToSkip > 0) {\n          console.warn(\n            `Warning: Could not account for all previously consumed quantity. Remaining: ${qtyToSkip}`\n          );\n        }\n      }\n\n      // If no deduction quantity is provided, just return the cost price of the first record with available quantity\n      if (!deductionQty) {\n        // First look for records with available quantity\n        for (const record of sortedRecords) {\n          // Use adjusted quantity if available, otherwise use original\n          const availableQty = roundQty(\n            record._adjustedAvailableQty !== undefined\n              ? record._adjustedAvailableQty\n              : record.fifo_available_quantity || 0\n          );\n\n          if (availableQty > 0) {\n            console.log(\n              `Found FIFO record with available quantity: Sequence ${record.fifo_sequence}, Cost price ${record.fifo_cost_price}`\n            );\n            return roundPrice(record.fifo_cost_price || 0);\n          }\n        }\n\n        // If no records with available quantity, use the most recent record\n        console.warn(\n          `No FIFO records with available quantity found for ${materialId}, using most recent cost price`\n        );\n        return roundPrice(\n          sortedRecords[sortedRecords.length - 1].fifo_cost_price || 0\n        );\n      }\n\n      // If deduction quantity is provided, calculate weighted average cost price across multiple FIFO records\n      let remainingQtyToDeduct = roundQty(deductionQty);\n      let totalCost = 0;\n      let totalDeductedQty = 0;\n\n      // Log the calculation process\n      console.log(\n        `Calculating weighted average FIFO cost for ${materialId}, deduction quantity: ${remainingQtyToDeduct}`\n      );\n\n      // Process each FIFO record in sequence until we've accounted for all deduction quantity\n      for (const record of sortedRecords) {\n        if (remainingQtyToDeduct <= 0) {\n          break;\n        }\n\n        // Use adjusted quantity if available, otherwise use original\n        const availableQty = roundQty(\n          record._adjustedAvailableQty !== undefined\n            ? record._adjustedAvailableQty\n            : record.fifo_available_quantity || 0\n        );\n\n        if (availableQty <= 0) {\n          continue; // Skip records with no available quantity\n        }\n\n        const costPrice = roundPrice(record.fifo_cost_price || 0);\n        const qtyToDeduct = Math.min(availableQty, remainingQtyToDeduct);\n\n        const costContribution = roundPrice(qtyToDeduct * costPrice);\n        totalCost = roundPrice(totalCost + costContribution);\n        totalDeductedQty = roundQty(totalDeductedQty + qtyToDeduct);\n\n        console.log(\n          `FIFO record ${record.fifo_sequence}: Deducting ${qtyToDeduct} units at ${costPrice} per unit = ${costContribution}`\n        );\n\n        remainingQtyToDeduct = roundQty(remainingQtyToDeduct - qtyToDeduct);\n      }\n\n      // If we couldn't satisfy the full deduction from available records, issue a warning\n      if (remainingQtyToDeduct > 0) {\n        console.warn(\n          `Warning: Not enough FIFO quantity available. Remaining to deduct: ${remainingQtyToDeduct}`\n        );\n\n        // For the remaining quantity, use the last record's cost price\n        if (sortedRecords.length > 0) {\n          const lastRecord = sortedRecords[sortedRecords.length - 1];\n          const lastCostPrice = roundPrice(lastRecord.fifo_cost_price || 0);\n\n          console.log(\n            `Using last FIFO record's cost price (${lastCostPrice}) for remaining ${remainingQtyToDeduct} units`\n          );\n\n          const additionalCost = roundPrice(\n            remainingQtyToDeduct * lastCostPrice\n          );\n          totalCost = roundPrice(totalCost + additionalCost);\n          totalDeductedQty = roundQty(totalDeductedQty + remainingQtyToDeduct);\n        }\n      }\n\n      // Calculate the weighted average cost price\n      if (totalDeductedQty > 0) {\n        const weightedAvgCost = roundPrice(totalCost / totalDeductedQty);\n        console.log(\n          `Weighted Average FIFO Cost: ${totalCost} / ${totalDeductedQty} = ${weightedAvgCost}`\n        );\n        return weightedAvgCost;\n      }\n\n      // Fallback to first record with cost if no quantity could be deducted\n      return roundPrice(sortedRecords[0].fifo_cost_price || 0);\n    }\n\n    console.warn(`No FIFO records found for material ${materialId}`);\n    return 0;\n  } catch (error) {\n    console.error(`Error retrieving FIFO cost price for ${materialId}:`, error);\n    return 0;\n  }\n};\n\n// Function to get Weighted Average cost price\nconst getWeightedAverageCostPrice = async (materialId, batchId, plantId) => {\n  try {\n    const query = batchId\n      ? db.collection(\"wa_costing_method\").where({\n          material_id: materialId,\n          batch_id: batchId,\n          plant_id: plantId,\n        })\n      : db\n          .collection(\"wa_costing_method\")\n          .where({ material_id: materialId, plant_id: plantId });\n\n    const response = await query.get();\n    const waData = response.data;\n\n    if (waData && Array.isArray(waData) && waData.length > 0) {\n      // Sort by date (newest first) to get the latest record\n      waData.sort((a, b) => {\n        if (a.created_at && b.created_at) {\n          return new Date(b.created_at) - new Date(a.created_at);\n        }\n        return 0;\n      });\n\n      return roundPrice(waData[0].wa_cost_price || 0);\n    }\n\n    console.warn(\n      `No weighted average records found for material ${materialId}`\n    );\n    return 0;\n  } catch (error) {\n    console.error(`Error retrieving WA cost price for ${materialId}:`, error);\n    return 0;\n  }\n};\n\nconst getFixedCostPrice = async (materialId) => {\n  try {\n    const query = db.collection(\"Item\").where({ id: materialId });\n    const response = await query.get();\n    const result = response.data;\n\n    if (result && result.length > 0) {\n      return roundPrice(parseFloat(result[0].purchase_unit_price || 0));\n    }\n\n    return 0;\n  } catch (error) {\n    console.error(\n      `Error retrieving fixed cost price for ${materialId}:`,\n      error\n    );\n    return 0;\n  }\n};\n\nconst processBalanceTable = async (\n  data,\n  isUpdate,\n  plantId,\n  organizationId,\n  gdStatus\n) => {\n  console.log(\"Processing balance table\");\n  const items = data.table_gd;\n\n  if (!Array.isArray(items) || items.length === 0) {\n    console.log(\"No items to process\");\n    return Promise.resolve();\n  }\n\n  // Create a map to track consumed FIFO quantities during this transaction\n  const consumedFIFOQty = new Map();\n\n  for (let itemIndex = 0; itemIndex < items.length; itemIndex++) {\n    const item = items[itemIndex];\n    const updatedDocs = [];\n    try {\n      console.log(`Processing item ${itemIndex + 1}/${items.length}`);\n\n      // Input validation\n      if (!item.material_id || !item.temp_qty_data) {\n        console.error(`Invalid item data for index ${itemIndex}:`, item);\n        continue;\n      }\n\n      // Track created or updated documents for potential rollback\n      const createdDocs = [];\n\n      // First check if this item should be processed based on stock_control\n      const itemRes = await db\n        .collection(\"Item\")\n        .where({ id: item.material_id })\n        .get();\n\n      if (!itemRes.data || !itemRes.data.length) {\n        console.error(`Item not found: ${item.material_id}`);\n        return;\n      }\n\n      const itemData = itemRes.data[0];\n      if (itemData.stock_control === 0) {\n        console.log(\n          `Skipping inventory update for item ${item.material_id} (stock_control=0)`\n        );\n        return;\n      }\n\n      const temporaryData = JSON.parse(item.temp_qty_data);\n      const prevTempData = isUpdate\n        ? JSON.parse(item.prev_temp_qty_data)\n        : null;\n\n      if (\n        temporaryData.length > 0 &&\n        (!isUpdate || (prevTempData && prevTempData.length > 0))\n      ) {\n        for (let i = 0; i < temporaryData.length; i++) {\n          const temp = temporaryData[i];\n          const prevTemp = isUpdate ? prevTempData[i] : null;\n\n          console.log(\"gdStatus\", gdStatus);\n          const inventoryCategory =\n            gdStatus === \"Created\" ? \"Reserved\" : \"Unrestricted\";\n\n          // UOM Conversion\n          let altQty = roundQty(temp.gd_quantity);\n          let baseQty = altQty;\n          let altUOM = item.gd_order_uom_id;\n          let baseUOM = itemData.based_uom;\n          let altWAQty = roundQty(item.gd_qty);\n          let baseWAQty = altWAQty;\n          let uomConversion = null;\n          if (\n            Array.isArray(itemData.table_uom_conversion) &&\n            itemData.table_uom_conversion.length > 0\n          ) {\n            console.log(`Checking UOM conversions for item ${item.item_id}`);\n\n            uomConversion = itemData.table_uom_conversion.find(\n              (conv) => conv.alt_uom_id === altUOM\n            );\n\n            if (uomConversion) {\n              console.log(\n                `Found UOM conversion: 1 ${uomConversion.alt_uom_id} = ${uomConversion.base_qty} ${uomConversion.base_uom_id}`\n              );\n\n              baseQty = roundQty(altQty * uomConversion.base_qty);\n              baseWAQty = roundQty(altWAQty * uomConversion.base_qty);\n\n              console.log(\n                `Converted ${altQty} ${altUOM} to ${baseQty} ${baseUOM}`\n              );\n            } else {\n              console.log(`No conversion found for UOM ${altUOM}, using as-is`);\n            }\n          } else {\n            console.log(\n              `No UOM conversion table for item ${item.item_id}, using received quantity as-is`\n            );\n          }\n\n          const costingMethod = itemData.material_costing_method;\n\n          let unitPrice = roundPrice(item.unit_price);\n          let totalPrice = roundPrice(unitPrice * altQty);\n\n          if (costingMethod === \"First In First Out\") {\n            // Define a key for tracking consumed FIFO quantities\n            const materialBatchKey = temp.batch_id\n              ? `${item.material_id}-${temp.batch_id}`\n              : item.material_id;\n\n            // Get previously consumed quantity (default to 0 if none)\n            const previouslyConsumedQty =\n              consumedFIFOQty.get(materialBatchKey) || 0;\n\n            // Get unit price from latest FIFO sequence with awareness of consumed quantities\n            const fifoCostPrice = await getLatestFIFOCostPrice(\n              item.material_id,\n              temp.batch_id,\n              baseQty,\n              previouslyConsumedQty,\n              plantId\n            );\n\n            // Update the consumed quantity for this material/batch\n            consumedFIFOQty.set(\n              materialBatchKey,\n              previouslyConsumedQty + baseQty\n            );\n\n            unitPrice = roundPrice(fifoCostPrice);\n            totalPrice = roundPrice(fifoCostPrice * baseQty);\n          } else if (costingMethod === \"Weighted Average\") {\n            // Get unit price from WA cost price\n            const waCostPrice = await getWeightedAverageCostPrice(\n              item.material_id,\n              temp.batch_id,\n              plantId\n            );\n            unitPrice = roundPrice(waCostPrice);\n            totalPrice = roundPrice(waCostPrice * baseQty);\n          } else if (costingMethod === \"Fixed Cost\") {\n            // Get unit price from Fixed Cost\n            const fixedCostPrice = await getFixedCostPrice(item.material_id);\n            unitPrice = roundPrice(fixedCostPrice);\n            totalPrice = roundPrice(fixedCostPrice * baseQty);\n          } else {\n            return Promise.resolve();\n          }\n\n          // Create inventory_movement record\n          const inventoryMovementData = {\n            transaction_type: \"GDL\",\n            trx_no: data.delivery_no,\n            parent_trx_no: item.line_so_no,\n            movement: \"OUT\",\n            unit_price: unitPrice,\n            total_price: totalPrice,\n            quantity: altQty,\n            item_id: item.material_id,\n            inventory_category: inventoryCategory,\n            uom_id: altUOM,\n            base_qty: baseQty,\n            base_uom_id: baseUOM,\n            bin_location_id: temp.location_id,\n            batch_number_id: temp.batch_id,\n            costing_method_id: item.item_costing_method,\n            plant_id: plantId,\n            organization_id: organizationId,\n          };\n\n          const invMovementResult = await db\n            .collection(\"inventory_movement\")\n            .add(inventoryMovementData);\n          createdDocs.push({\n            collection: \"inventory_movement\",\n            docId: invMovementResult.id,\n          });\n\n          const itemBalanceParams = {\n            material_id: item.material_id,\n            location_id: temp.location_id,\n          };\n\n          if (temp.batch_id) {\n            itemBalanceParams.batch_id = temp.batch_id;\n          }\n\n          const balanceCollection = temp.batch_id\n            ? \"item_batch_balance\"\n            : \"item_balance\";\n\n          const balanceQuery = await db\n            .collection(balanceCollection)\n            .where(itemBalanceParams)\n            .get();\n\n          const hasExistingBalance =\n            balanceQuery.data &&\n            Array.isArray(balanceQuery.data) &&\n            balanceQuery.data.length > 0;\n\n          const existingDoc = hasExistingBalance ? balanceQuery.data[0] : null;\n\n          if (existingDoc && existingDoc.id) {\n            // Update balance\n            let finalUnrestrictedQty = roundQty(\n              parseFloat(existingDoc.unrestricted_qty || 0)\n            );\n            let finalReservedQty = roundQty(\n              parseFloat(existingDoc.reserved_qty || 0)\n            );\n            let finalBalanceQty = roundQty(\n              parseFloat(existingDoc.balance_quantity || 0)\n            );\n\n            if (isUpdate) {\n              let prevAltQty = roundQty(prevTemp.gd_quantity);\n\n              let prevBaseQty = prevAltQty;\n              if (\n                Array.isArray(itemData.table_uom_conversion) &&\n                itemData.table_uom_conversion.length > 0 &&\n                uomConversion\n              ) {\n                prevBaseQty = roundQty(prevAltQty * uomConversion.base_qty);\n              }\n\n              const gdQuantityDiff = roundQty(baseQty - prevBaseQty);\n\n              finalUnrestrictedQty = roundQty(\n                finalUnrestrictedQty - gdQuantityDiff\n              );\n              finalReservedQty = roundQty(finalReservedQty + gdQuantityDiff);\n            }\n\n            if (gdStatus === \"Created\") {\n              finalReservedQty = roundQty(finalReservedQty - baseQty);\n              finalBalanceQty = roundQty(finalBalanceQty - baseQty);\n              console.log(\"finalReservedQty\", finalReservedQty);\n              console.log(\"finalBalanceQty\", finalBalanceQty);\n            } else {\n              finalUnrestrictedQty = roundQty(finalUnrestrictedQty - baseQty);\n              finalBalanceQty = roundQty(finalBalanceQty - baseQty);\n            }\n\n            updatedDocs.push({\n              collection: balanceCollection,\n              docId: existingDoc.id,\n              originalData: {\n                unrestricted_qty: roundQty(\n                  parseFloat(existingDoc.unrestricted_qty || 0)\n                ),\n                reserved_qty: roundQty(\n                  parseFloat(existingDoc.reserved_qty || 0)\n                ),\n                balance_quantity: roundQty(\n                  parseFloat(existingDoc.balance_quantity || 0)\n                ),\n              },\n            });\n\n            await db.collection(balanceCollection).doc(existingDoc.id).update({\n              unrestricted_qty: finalUnrestrictedQty,\n              reserved_qty: finalReservedQty,\n              balance_quantity: finalBalanceQty,\n            });\n          }\n\n          if (costingMethod === \"First In First Out\") {\n            await updateFIFOInventory(\n              item.material_id,\n              baseQty,\n              temp.batch_id,\n              plantId\n            );\n          } else if (costingMethod === \"Weighted Average\") {\n            await updateWeightedAverage(\n              item,\n              temp.batch_id,\n              baseWAQty,\n              plantId\n            );\n          } else {\n            return Promise.resolve();\n          }\n        }\n      }\n    } catch (error) {\n      console.error(`Error processing item ${item.material_id}:`, error);\n\n      // Rollback changes if any operation fails\n      for (const doc of updatedDocs.reverse()) {\n        try {\n          await db\n            .collection(doc.collection)\n            .doc(doc.docId)\n            .update(doc.originalData);\n        } catch (rollbackError) {\n          console.error(\"Rollback error:\", rollbackError);\n        }\n      }\n    }\n  }\n\n  return Promise.resolve();\n};\n\n// Enhanced goods delivery status update\nconst updateSalesOrderStatus = async (salesOrderId, tableGD) => {\n  const soIds = Array.isArray(salesOrderId) ? salesOrderId : [salesOrderId];\n\n  // Arrays to collect data for the return format\n  let soDataArray = [];\n\n  try {\n    const updatePromises = soIds.map(async (salesOrderId) => {\n      const filteredGD = tableGD.filter(\n        (item) => item.line_so_id === salesOrderId\n      );\n\n      const resSO = await db\n        .collection(\"sales_order\")\n        .where({ id: salesOrderId })\n        .get();\n\n      if (!resSO.data || !resSO.data.length) {\n        console.log(`Sales order ${salesOrderId} not found`);\n        return;\n      }\n\n      const soDoc = resSO.data[0];\n\n      const soItems = soDoc.table_so || [];\n      if (!soItems.length) {\n        console.log(`No items found in sales order ${salesOrderId}`);\n        return;\n      }\n\n      const filteredSO = soItems\n        .map((item, index) => ({ ...item, originalIndex: index }))\n        .filter((item) => item.item_name !== \"\" || item.so_desc !== \"\");\n\n      // Create a map to sum delivered quantities for each item\n      let totalItems = soItems.length;\n      let partiallyDeliveredItems = 0;\n      let fullyDeliveredItems = 0;\n\n      // Create a copy of the SO items to update later\n      const updatedSoItems = JSON.parse(JSON.stringify(soItems));\n\n      filteredSO.forEach((filteredItem, filteredIndex) => {\n        const originalIndex = filteredItem.originalIndex;\n        const orderedQty = parseFloat(filteredItem.so_quantity || 0);\n        const gdDeliveredQty = parseFloat(\n          filteredGD[filteredIndex]?.gd_qty || 0\n        );\n        const currentDeliveredQty = parseFloat(\n          updatedSoItems[originalIndex].delivered_qty || 0\n        );\n        const totalDeliveredQty = currentDeliveredQty + gdDeliveredQty;\n\n        // Update the quantity in the original soItems structure\n        updatedSoItems[originalIndex].delivered_qty = totalDeliveredQty;\n\n        // Add ratio for tracking purposes\n        updatedSoItems[originalIndex].delivery_ratio =\n          orderedQty > 0 ? totalDeliveredQty / orderedQty : 0;\n\n        // Count items with ANY delivered quantity as \"partially delivered\"\n        if (totalDeliveredQty > 0) {\n          partiallyDeliveredItems++;\n\n          // Count fully delivered items separately\n          if (totalDeliveredQty >= orderedQty) {\n            fullyDeliveredItems++;\n          }\n        }\n      });\n\n      // Check item completion status\n      let allItemsComplete = fullyDeliveredItems === totalItems;\n      let anyItemProcessing = partiallyDeliveredItems > 0;\n\n      // Determine new status\n      let newSOStatus = soDoc.so_status;\n      let newGDStatus = soDoc.gd_status;\n\n      if (allItemsComplete) {\n        newSOStatus = \"Completed\";\n        newGDStatus = \"Fully Delivered\";\n      } else if (anyItemProcessing) {\n        newSOStatus = \"Processing\";\n        newGDStatus = \"Partially Delivered\";\n      }\n\n      // Create tracking ratios\n      const partiallyDeliveredRatio = `${partiallyDeliveredItems} / ${totalItems}`;\n      const fullyDeliveredRatio = `${fullyDeliveredItems} / ${totalItems}`;\n\n      console.log(`SO ${salesOrderId} status:\n        Total items: ${totalItems}\n        Partially delivered items (including fully delivered): ${partiallyDeliveredItems} (${partiallyDeliveredRatio})\n        Fully delivered items: ${fullyDeliveredItems} (${fullyDeliveredRatio})\n      `);\n\n      // Prepare a single update operation with all changes\n      const updateData = {\n        table_so: updatedSoItems,\n        partially_delivered: partiallyDeliveredRatio,\n        fully_delivered: fullyDeliveredRatio,\n      };\n\n      // Only include status changes if needed\n      if (newSOStatus !== soDoc.so_status) {\n        updateData.so_status = newSOStatus;\n      }\n\n      if (newGDStatus !== soDoc.gd_status) {\n        updateData.gd_status = newGDStatus;\n      }\n\n      // Execute a single database update\n      await db.collection(\"sales_order\").doc(soDoc.id).update(updateData);\n\n      const originalSOStatus = soDoc.so_status;\n      // Log the status change if it occurred\n      if (newSOStatus !== originalSOStatus) {\n        console.log(\n          `Updated SO ${salesOrderId} status from ${originalSOStatus} to ${newSOStatus}`\n        );\n      }\n      return {\n        soId: salesOrderId,\n        newSOStatus,\n        totalItems,\n        partiallyDeliveredItems,\n        fullyDeliveredItems,\n        success: true,\n      };\n    });\n\n    const results = await Promise.all(updatePromises);\n\n    results.forEach((result) => {\n      if (result && result.success) {\n        // Add PO data\n        soDataArray.push({\n          so_id: result.soId,\n          status: result.newSOStatus,\n        });\n      }\n    });\n\n    // Aggregate results for logging\n    const successCount = results.filter((r) => r && r.success).length;\n    const failCount = results.filter((r) => r && !r.success).length;\n\n    console.log(`SO Status Update Summary: \n      Total SOs: ${soIds.length}\n      Successfully updated: ${successCount}\n      Failed updates: ${failCount}\n    `);\n\n    // Return in the requested format\n    return {\n      so_data_array: soDataArray,\n    };\n  } catch (error) {\n    console.error(`Error in update sales order status process:`, error);\n    return {\n      so_data_array: [],\n    };\n  }\n};\n\nconst getPrefixData = async (organizationId) => {\n  console.log(\"Getting prefix data for organization:\", organizationId);\n  try {\n    const prefixEntry = await db\n      .collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Goods Delivery\",\n        is_deleted: 0,\n        organization_id: organizationId,\n        is_active: 1,\n      })\n      .get();\n\n    console.log(\"Prefix data result:\", prefixEntry);\n\n    if (!prefixEntry.data || prefixEntry.data.length === 0) {\n      console.log(\"No prefix configuration found\");\n      return null;\n    }\n\n    return prefixEntry.data[0];\n  } catch (error) {\n    console.error(\"Error getting prefix data:\", error);\n    throw error;\n  }\n};\n\nconst updatePrefix = async (organizationId, runningNumber) => {\n  console.log(\n    \"Updating prefix for organization:\",\n    organizationId,\n    \"with running number:\",\n    runningNumber\n  );\n  try {\n    await db\n      .collection(\"prefix_configuration\")\n      .where({\n        document_types: \"Goods Delivery\",\n        is_deleted: 0,\n        organization_id: organizationId,\n      })\n      .update({\n        running_number: parseInt(runningNumber) + 1,\n        has_record: 1,\n      });\n    console.log(\"Prefix update successful\");\n  } catch (error) {\n    console.error(\"Error updating prefix:\", error);\n    throw error;\n  }\n};\n\nconst generatePrefix = (runNumber, now, prefixData) => {\n  console.log(\"Generating prefix with running number:\", runNumber);\n  try {\n    let generated = prefixData.current_prefix_config;\n    generated = generated.replace(\"prefix\", prefixData.prefix_value);\n    generated = generated.replace(\"suffix\", prefixData.suffix_value);\n    generated = generated.replace(\n      \"month\",\n      String(now.getMonth() + 1).padStart(2, \"0\")\n    );\n    generated = generated.replace(\n      \"day\",\n      String(now.getDate()).padStart(2, \"0\")\n    );\n    generated = generated.replace(\"year\", now.getFullYear());\n    generated = generated.replace(\n      \"running_number\",\n      String(runNumber).padStart(prefixData.padding_zeroes, \"0\")\n    );\n    console.log(\"Generated prefix:\", generated);\n    return generated;\n  } catch (error) {\n    console.error(\"Error generating prefix:\", error);\n    throw error;\n  }\n};\n\nconst checkUniqueness = async (generatedPrefix, organizationId) => {\n  const existingDoc = await db\n    .collection(\"goods_delivery\")\n    .where({ delivery_no: generatedPrefix, organization_id: organizationId })\n    .get();\n\n  return !existingDoc.data || existingDoc.data.length === 0;\n};\n\nconst findUniquePrefix = async (prefixData, organizationId) => {\n  const now = new Date();\n  let prefixToShow;\n  let runningNumber = prefixData.running_number || 1;\n  let isUnique = false;\n  let maxAttempts = 10;\n  let attempts = 0;\n\n  while (!isUnique && attempts < maxAttempts) {\n    attempts++;\n    prefixToShow = generatePrefix(runningNumber, now, prefixData);\n    isUnique = await checkUniqueness(prefixToShow, organizationId);\n    if (!isUnique) {\n      runningNumber++;\n    }\n  }\n\n  if (!isUnique) {\n    throw new Error(\n      \"Could not generate a unique Goods Delivery number after maximum attempts\"\n    );\n  }\n\n  return { prefixToShow, runningNumber };\n};\n\nconst addEntry = async (organizationId, gd, gdStatus) => {\n  try {\n    const prefixData = await getPrefixData(organizationId);\n\n    if (prefixData.length !== 0) {\n      const { prefixToShow, runningNumber } = await findUniquePrefix(\n        prefixData,\n        organizationId\n      );\n\n      await updatePrefix(organizationId, runningNumber);\n\n      gd.delivery_no = prefixToShow;\n    }\n    await db.collection(\"goods_delivery\").add(gd);\n\n    await processBalanceTable(gd, false, gd.plant_id, organizationId, gdStatus);\n\n    const { so_data_array } = await updateSalesOrderStatus(\n      gd.so_id,\n      gd.table_gd\n    );\n\n    await this.runWorkflow(\n      \"1918140858502557698\",\n      { delivery_no: gd.delivery_no, so_data: so_data_array },\n      async (res) => {\n        console.log(\"成功结果：\", res);\n      },\n      (err) => {\n        alert();\n        console.error(\"失败结果：\", err);\n        closeDialog();\n      }\n    );\n\n    this.$message.success(\"Add successfully\");\n    await closeDialog();\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\nconst updateEntry = async (organizationId, gd, gdStatus, goodsDeliveryId) => {\n  try {\n    if (gdStatus === \"Draft\") {\n      const prefixData = await getPrefixData(organizationId);\n\n      if (prefixData.length !== 0) {\n        const { prefixToShow, runningNumber } = await findUniquePrefix(\n          prefixData,\n          organizationId\n        );\n\n        await updatePrefix(organizationId, runningNumber);\n\n        gd.delivery_no = prefixToShow;\n      }\n    }\n    await db.collection(\"goods_delivery\").doc(goodsDeliveryId).update(gd);\n\n    await processBalanceTable(gd, true, gd.plant_id, organizationId, gdStatus);\n\n    const { so_data_array } = await updateSalesOrderStatus(\n      gd.so_id,\n      gd.table_gd\n    );\n\n    await this.runWorkflow(\n      \"1918140858502557698\",\n      { delivery_no: gd.delivery_no, so_data: so_data_array },\n      async (res) => {\n        console.log(\"成功结果：\", res);\n      },\n      (err) => {\n        alert();\n        console.error(\"失败结果：\", err);\n        closeDialog();\n      }\n    );\n\n    this.$message.success(\"Update successfully\");\n    await closeDialog();\n  } catch (error) {\n    this.$message.error(error);\n  }\n};\n\nconst findFieldMessage = (obj) => {\n  // Base case: if current object has the structure we want\n  if (obj && typeof obj === \"object\") {\n    if (obj.field && obj.message) {\n      return obj.message;\n    }\n\n    // Check array elements\n    if (Array.isArray(obj)) {\n      for (const item of obj) {\n        const found = findFieldMessage(item);\n        if (found) return found;\n      }\n    }\n\n    // Check all object properties\n    for (const key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        const found = findFieldMessage(obj[key]);\n        if (found) return found;\n      }\n    }\n  }\n  return null;\n};\n\n// Main execution wrapped in an async IIFE\n(async () => {\n  // Prevent duplicate processing\n  if (!preventDuplicateProcessing()) {\n    return;\n  }\n\n  try {\n    this.showLoading();\n    const data = await this.getValues();\n\n    // Get page status\n    const page_status = data.page_status;\n    const gdStatus = data.gd_status;\n\n    if (missingFields.length === 0) {\n      // If this is an edit, store previous temporary quantities\n      if (page_status === \"Edit\" && Array.isArray(data.table_gd)) {\n        data.table_gd.forEach((item) => {\n          item.prev_temp_qty_data = item.temp_qty_data;\n        });\n      }\n\n      // Get organization ID\n      let organizationId = this.getVarGlobal(\"deptParentId\");\n      if (organizationId === \"0\") {\n        organizationId = this.getVarSystem(\"deptIds\").split(\",\")[0];\n      }\n\n      const {\n        fake_so_id,\n        so_id,\n        so_no,\n        gd_billing_address,\n        gd_shipping_address,\n        delivery_no,\n        plant_id,\n        organization_id,\n        gd_ref_doc,\n        customer_name,\n        email_address,\n        document_description,\n        gd_delivery_method,\n        delivery_date,\n\n        driver_name,\n        driver_contact_no,\n        ic_noic_no,\n        validity_of_collection,\n        vehicle_no,\n        pickup_date,\n\n        courier_company,\n        shipping_date,\n        freight_charges,\n        tracking_number,\n        est_arrival_date,\n\n        driver_cost,\n        est_delivery_date,\n\n        shipping_company,\n        shipping_method,\n\n        tpt_vehicle_number,\n        tpt_transport_name,\n        tpt_ic_no,\n        tpt_driver_contact_no,\n\n        table_gd,\n        order_remark,\n        billing_address_line_1,\n        billing_address_line_2,\n        billing_address_line_3,\n        billing_address_line_4,\n        billing_address_city,\n        billing_address_state,\n        billing_address_country,\n        billing_postal_code,\n        billing_address_name,\n        billing_address_phone,\n        billing_attention,\n\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_line_3,\n        shipping_address_line_4,\n        shipping_address_city,\n        shipping_address_state,\n        shipping_address_country,\n        shipping_postal_code,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_attention,\n\n        acc_integration_type,\n        last_sync_date,\n        customer_credit_limit,\n        overdue_limit,\n        outstanding_balance,\n        overdue_inv_total_amount,\n        is_accurate,\n        gd_total,\n      } = data;\n\n      // Prepare goods delivery object\n      const gd = {\n        gd_status: \"Completed\",\n        fake_so_id,\n        so_id,\n        so_no,\n        gd_billing_address,\n        gd_shipping_address,\n        delivery_no,\n        plant_id,\n        organization_id,\n        gd_ref_doc,\n        customer_name,\n        email_address,\n        document_description,\n        gd_delivery_method,\n        delivery_date,\n\n        driver_name,\n        driver_contact_no,\n        ic_noic_no,\n        validity_of_collection,\n        vehicle_no,\n        pickup_date,\n\n        courier_company,\n        shipping_date,\n        freight_charges,\n        tracking_number,\n        est_arrival_date,\n\n        driver_cost,\n        est_delivery_date,\n\n        shipping_company,\n        shipping_method,\n\n        tpt_vehicle_number,\n        tpt_transport_name,\n        tpt_ic_no,\n        tpt_driver_contact_no,\n\n        table_gd,\n        order_remark,\n        billing_address_line_1,\n        billing_address_line_2,\n        billing_address_line_3,\n        billing_address_line_4,\n        billing_address_city,\n        billing_address_state,\n        billing_address_country,\n        billing_postal_code,\n        billing_address_name,\n        billing_address_phone,\n        billing_attention,\n\n        shipping_address_line_1,\n        shipping_address_line_2,\n        shipping_address_line_3,\n        shipping_address_line_4,\n        shipping_address_city,\n        shipping_address_state,\n        shipping_address_country,\n        shipping_postal_code,\n        shipping_address_name,\n        shipping_address_phone,\n        shipping_attention,\n\n        acc_integration_type,\n        last_sync_date,\n        customer_credit_limit,\n        overdue_limit,\n        outstanding_balance,\n        overdue_inv_total_amount,\n        is_accurate,\n        gd_total,\n      };\n\n      // Clean up undefined/null values\n      Object.keys(gd).forEach((key) => {\n        if (gd[key] === undefined || gd[key] === null) {\n          delete gd[key];\n        }\n      });\n\n      // Perform action based on page status\n      if (page_status === \"Add\") {\n        await addEntry(organizationId, gd, gdStatus);\n      } else if (page_status === \"Edit\") {\n        const goodsDeliveryId = data.id;\n        await updateEntry(organizationId, gd, gdStatus, goodsDeliveryId);\n      }\n    } else {\n      this.hideLoading();\n      this.$message.error(`Validation errors: ${missingFields.join(\", \")}`);\n    }\n  } catch (error) {\n    this.hideLoading();\n\n    // Try to get message from standard locations first\n    let errorMessage = \"\";\n\n    if (error && typeof error === \"object\") {\n      errorMessage = findFieldMessage(error) || \"An error occurred\";\n    } else {\n      errorMessage = error;\n    }\n\n    this.$message.error(errorMessage);\n    console.error(errorMessage);\n  } finally {\n    window.isProcessing = false;\n    this.hideLoading();\n    console.log(\"Goods Delivery function execution completed\");\n  }\n})();\n"
            }
          }
        ]
      }
    ],
    "uniqueGroup": [],
    "params": [
      {
        "key": "3stt305r",
        "name": "page_status",
        "title": "",
        "description": "",
        "bsonType": "string",
        "isExpand": false,
        "children": []
      },
      {
        "key": "g99c2p26",
        "name": "goods_delivery_no",
        "title": "",
        "description": "",
        "bsonType": "string",
        "isExpand": false,
        "children": []
      }
    ],
    "deps": {},
    "paramsDeps": {},
    "styleSheets": ".padding{\n  padding:20px\n}\n\n.margin{\n  margin-left: 15px\n}\n\n.marginright{\n  margin-right: 20px;\n  margin-top : 3px;\n}\n\n.fixbutton{\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  z-index: 9999;\n}\n\n",
    "labelSuffix": true
  }
}
