# Scratchpad

## Current Task: Fix costing method aggregation for multiple serialized items

### Problem Analysis:

- When processing multiple serialized items with the same material (e.g., MAT123 with SN001 and SN002), the WA/FIFO costing methods were only being updated once instead of aggregating the total quantity
- User reverted from aggregated approach back to individual processing, causing race conditions and incorrect costing updates
- Example scenario: Item #1 (MAT123, SN001, Qty:1) + Item #2 (MAT123, SN002, Qty:1) should deduct 2 total from WA/FIFO, but was only deducting 1

### Solution Implemented:

[X] **CRITICAL FIX**: Restored aggregated costing update approach to prevent race conditions and ensure correct totals
[X] **THREE-STEP PROCESSING**: Implemented proper separation of concerns:

- Step 1: Aggregate costing updates by material across all items
- Step 2: Apply aggregated costing updates once per material
- Step 3: Process individual balance updates and inventory movements
  [X] **NEW FUNCTION**: Created `processSerializedItemBalancesOnly` to handle balance updates without costing
  [X] **RACE CONDITION FIX**: Prevented multiple async processes from updating same WA/FIFO records simultaneously
  [X] **QUANTITY AGGREGATION**: Properly aggregates quantities from multiple items with same material before updating costing methods

### Previous Completed Task: Add duplicate serial number validation to Stock Adjustment

### Problem Analysis:

- Stock Adjustment (SAsaveAsCompleted.js) was missing validation to prevent users from processing 2 identical serialized items with the same serial numbers
- Users could accidentally select the same serial number for multiple items, leading to inventory inconsistencies
- Goods Delivery (GDsaveAsCompleted.js) already has this validation implemented
- Need to implement similar validation logic for Stock Adjustment

### Solution Implemented:

[X] **CRITICAL FIX**: Added `validateDuplicateSerialNumbers` function to prevent duplicate serial number processing
[X] **COMPREHENSIVE VALIDATION**: Implemented validation that checks for:

- Duplicate serial numbers across different items
- Excessive quantities (>1) for serialized items
- Non-integer quantities for serialized items
- Conflicting IN/OUT movements for non-serialized items at same location/batch/category
  [X] **DETAILED ERROR MESSAGES**: Added user-friendly error messages showing exactly which serial numbers are duplicated and in which items
  [X] **INTEGRATION**: Added validation call in `preCheckQuantitiesAndCosting` function before processing
  [X] **MAP-BASED TRACKING**: Used Map data structure to efficiently track serial number usage across all items

### Previous Completed Task: Fix Putaway split item serial number deduction

[X] **CRITICAL FIX**: Enhanced `calculateLeftoverSerialNumbers` function to handle split scenarios
[X] **SPLIT LOGIC**: Added logic to aggregate processed serial numbers from all child items for parent items
[X] **PARAMETER PASSING**: Updated function signature to accept `allItems` and `itemIndex` parameters for split handling
[X] **FORM UPDATES**: Enhanced form data updates to properly persist leftover serial numbers for both parent and child items
[X] **COMPREHENSIVE LOGGING**: Added detailed logging for split scenario debugging
[X] **PARENT COMPLETION FIX**: Fixed parent item serial number clearing when all child items are completed

### Fix Details:

**Enhanced calculateLeftoverSerialNumbers Function:**

- **Split Parent Items**: For parent items in split scenarios, collects all processed serial numbers from child items
- **Child Items**: For child items, uses their own `select_serial_number` array
- **Non-Split Items**: Maintains original behavior for standalone items
- **Aggregation Logic**: Properly aggregates serial numbers across multiple child items

**Split Scenario Handling:**

```javascript
if (item.parent_or_child === "Parent" && item.is_split === "Yes" && allItems) {
  // Collect all processed serial numbers from child items
  const childItems = allItems.filter(
    (childItem, childIndex) =>
      childItem.parent_index === itemIndex &&
      childItem.parent_or_child === "Child" &&
      childItem.item_code === item.item_code
  );

  // Aggregate all processed serial numbers from child items
  childItems.forEach((childItem) => {
    if (Array.isArray(childItem.select_serial_number)) {
      const childProcessedSerials = childItem.select_serial_number
        .map((sn) => sn.trim())
        .filter((sn) => sn !== "");

      allProcessedSerialNumbers = allProcessedSerialNumbers.concat(
        childProcessedSerials
      );
    }
  });
}
```

**Form Data Updates:**

- Updates `line_status` for all items (parent and child)
- Updates `pending_process_qty` for proper quantity tracking
- Updates `serial_numbers` for serialized items to reflect leftover serials
- Special handling for parent items in split scenarios to show correct leftover serial numbers

**Parent Item Completion Logic:**

- Added serial number handling in the parent item processing section
- When `parentPendingProcessQty === 0`, clears all serial numbers from parent item
- When `parentPendingProcessQty > 0`, calculates leftover serial numbers using child aggregation
- Ensures parent items show correct serial number state based on child completion status

### Example Split Scenario:

- **Original Serial Numbers**: `"SN001, SN002, SN003, SN004"`
- **Child 1 Processed**: `["SN001", "SN002"]`
- **Child 2 Processed**: `["SN003"]`
- **Parent Leftover**: `"SN004"`

The parent item will correctly show `SN004` as the leftover serial number after both child items have processed their respective serial numbers.

### Testing Required:

[X] Test split serialized items: verify parent serial numbers are correctly reduced by child processing
[X] Test multiple child items: verify aggregation works across multiple child items
[X] Test partial processing: verify leftover serial numbers are correctly calculated for split scenarios
[X] Test form persistence: verify leftover serial numbers are properly saved for both parent and child items

## Previous Completed Tasks:

### Fix Picking serial number removal for leftover processing - COMPLETED

[X] **CRITICAL FIX**: Added `calculateLeftoverSerialNumbers` helper function to handle serial number removal logic
[X] **ENHANCED**: Modified `validateAndUpdateLineStatuses` function to update serial numbers based on processing status
[X] **UPDATED**: Enhanced form data updates to persist leftover serial numbers back to the form
[X] **LOGGING**: Added comprehensive logging for serial number processing and leftover calculations

## Previous Completed Tasks:

### Fix Stock Movement createSerialNumberRecord for Misc Receipt - COMPLETED

[X] **CRITICAL FIX**: Fixed createSerialNumberRecord function to use generated_serial_numbers instead of raw serial_number_data
[X] **ENHANCED**: Modified addSerialNumberInventoryForSM to store generated_serial_numbers array in the item data structure
[X] **UPDATED**: Changed createSerialNumberRecord to use generated_serial_numbers.join("\n") like Goods Receiving process
[X] **ALIGNED**: Ensured Stock Movement follows the same pattern as Goods Receiving for serial number record creation

### Fix inventory dialog temp_qty_data missing location_id - COMPLETED

[X] Enhanced the filteredData creation in GDconfirmDialog.js to ensure all required fields are preserved
[X] **CRITICAL FIX**: Modified GDgdQty.js to preserve inventory dialog allocations instead of overwriting them
[X] Added detection in GDgdQty.js to identify inventory dialog allocations (by checking for location_id)
[X] This ensures the mergeWithTempData function in GDinventoryDialog.js can properly match records

### Fix Stock Adjustment WA/FIFO updates for serialized items - COMPLETED

[X] Modified `processSerializedItemAdjustment` to calculate net quantity changes for costing
[X] Added costing method updates for serialized items by calling `updateQuantities()`
[X] Enhanced `updateQuantities()` function to accept parameters for reuse in serialized item context
[X] Updated all references within `updateQuantities()` to use the passed parameters

### Fix Putaway item_serial_balance incorrect balance handling - COMPLETED

[X] **CRITICAL FIX**: Completely rewrote `processSerialBalanceMovement` in both putaway files
[X] **MAJOR CHANGE**: Replaced `available_qty` logic with proper balance quantity management
[X] Added support for all inventory categories (Unrestricted, Reserved, Quality Inspection, Blocked, In Transit)
[X] Implemented proper OUT/IN movement handling with correct category-based quantity updates

### Fix Putaway split item handling inconsistency - COMPLETED

[X] **CRITICAL FIX**: Fixed createPutawayRecords logic in PutawaySaveAsInProgress.js
[X] **CRITICAL FIX**: Fixed validateAndUpdateLineStatuses logic in PutawaySaveAsInProgress.js
[X] Ensured consistency between PutawaySaveAsInProgress.js and PutawaySaveAsCompleted.js
[X] Verified serialized items now follow same flow as non-serialized items for split cases
